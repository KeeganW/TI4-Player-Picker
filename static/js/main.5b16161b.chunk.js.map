{"version":3,"sources":["BootstrapScripts.js","panels/icons/influence.png","panels/icons/planet.png","panels/icons/resource.png","panels/icons/specialty-biotic.png","panels/icons/specialty-warfare.png","panels/icons/specialty-propulsion.png","panels/icons/specialty-cybernetic.png","panels/icons/trait-cultural.png","panels/icons/trait-hazardous.png","panels/icons/trait-industrial.png","panels/MoreInfo.js","panels/ExtraTiles.js","overview/MainOverview.js","overview/exampleMap.png","overview/exampleMapNumbered.png","overview/dragAndDrop.png","overview/ST_82.png","map/MainMap.js","map/MapControls.js","options/OptionsControls.js","options/HelpModal.js","options/SetPlayerNameModal.js","options/SetRacesModal.js","options/MapOptions.js","App.js","reportWebVitals.js","index.js"],"names":["BootstrapScripts","id","src","integrity","crossOrigin","React","Component","MoreInfo","props","getAdjacent","bind","tileNumber","adjacencies","adjacencyData","planets","resources","influence","specialties","traits","adjacentIndex","adjacentTileNumber","adjacentTile","this","tiles","planetIndex","tileData","all","planet","moreInfoByPlayer","adjacentInfo","playerName","currentPlayerNames","length","push","scope","className","Array","cultural","map","e","i","traitCultural","alt","hazardous","traitHazardous","industrial","traitIndustrial","biotic","specialtyBiotic","warfare","specialtyWarfare","propulsion","specialtyPropulsion","cybernetic","specialtyCybernetic","visible","resource","ExtraTiles","underlayStyle","width","height","position","top","left","tileStyle","display","margin","tileNumbers","concat","blue","red","useProphecyOfKings","pokBlue","pokRed","tileObjects","entries","value","isNaN","Number","undefined","split","window","location","origin","pathname","draggable","onDragStart","drag","onDrop","drop","onDragOver","allowDrop","onDragEnter","dragEnter","onDragLeave","dragLeave","style","xmlns","viewBox","fill","points","MainOverview","href","from","boardData","pokSize","_","index","tile","place","effect","onClick","zoomPlus","zoomMinus","toggleOverlay","overlayVisible","data-tip","transform","toggleExtraTiles","extraTilesVisible","toggleMoreInfo","moreInfoVisible","copyTilesToClipboard","toggleBackground","type","isMobileView","toggleOptions","HelpModal","Modal","show","onHide","hideModal","Header","closeButton","Title","title","Body","dangerouslySetInnerHTML","__html","content","x","htmlFor","name","placeholder","defaultValue","onChange","handleNameChange","visibleRaces","races","pokRaces","raceName","raceIndex","replace","checked","currentRaces","indexOf","handleRacesChange","MapOptions","startingValues","numberOfPlayers","pokNumberOfPlayers","boardStyles","2","Object","keys","styles","key","3","4","5","6","filter","boardStylesPok","7","8","pickStyles","raceData","homeworlds","pokHomeworlds","state","optionsPossible","currentNumberOfPlayers","currentNumberOfPlayersOptions","currentBoardStyleOptions","currentBoardStyle","currentPickStyle","currentSeed","userSetSeed","pickRaces","pickMultipleRaces","shuffleBoards","reversePlacementOrder","generated","pickRacesHelp","boardStyleHelp","pickStyleHelp","setPlayerNamesHelp","setRacesHelp","pickMultipleRacesHelp","shufflePriorityHelp","reversePlacementOrderHelp","resourceWeight","influenceWeight","planetCountWeight","specialtyWeight","anomalyWeight","wormholeWeight","shuffleThreshold","handleInputChange","updatePok","updatePlayerCount","updateBoardStyle","updateSeed","ensureAnomalies","ensureWormholesForType","updateBoardStyleOptions","generateBoard","togglePickRacesHelp","toggleBoardStyleHelp","togglePickStyleHelp","toggleSetPlayerNamesHelp","toggleSetRacesHelp","togglePickMultipleRacesHelp","toggleShufflePriorityHelp","toggleReversePlacementOrderHelp","event","target","setState","nameIndex","parseInt","substring","newPlayerNames","race","newCurrentRaces","indexToToggle","splice","boardOptions","toggleProphecyOfKings","newSeed","str","charAt","toUpperCase","slice","array","seed","t","m","Math","floor","random","sin","preventDefault","planetIndexesToPlace","getPlanetIndexesToPlace","possibleTiles","getPossiblePlanets","allAlphaWormholes","alphaWormholes","pokAlphaWormholes","allBetaWormholes","betaWormholes","pokBetaWormholes","newTiles","blankMap","shift","toString","hyperlaneData","shuffle","raceToHomeSystemMap","allTrueAnomalies","anomaly","pokAnomaly","anomalyTileNumber","adjacentTiles","adjacentAnomalies","swapped","blankReds","blankRed","pokBlankRed","possibleBlanks","blankRedTileNumber","swappable","alphaWormhole","alphaWormholeTileNumber","adjacentTileNumbers","adjacentWormhole","el","adjacentTilesNumbers","betaWormhole","betaWormholeTileNumber","updateTiles","planetWormholes","allWormholes","oppositeWormholes","allAnomalyList","unusedWormholes","usedWormholes","wormholeIndex","console","log","excludedTiles","reverseReplace","numPlanetsToPlace","blueTileRatio","redTileRatio","numAnomaliesLeftToBePlaced","possibleAnomalies","anomalyIndex","numTilesToReplace","replacementTiles","reverseBeforeAndAfter","reverse","currentTileIndex","tileOfInterest","primary","secondary","tertiary","possiblePlanets","weights","getWeightedPlanetList","planetWeights","planetTileNumber","getWeight","sort","a","b","currentIndex","currentHighValue","currentSetToShuffle","postPossiblePlanets","planetWeight","orderedPlanets","weightedPlanet","total_weight","onSubmit","capitalize","SetPlayerNameModal","SetRacesModal","App","isOptionsMenuShowing","overviewVisible","backgroundAnimated","apply","zoom","mobileBreakpoint","drawMap","onPopState","checkResize","validateTiles","toggleOptionsMenu","showExtraTiles","zoomPlusClick","zoomMinusClick","$mapContainer","$","$tiMap","onpopstate","addEventListener","innerWidth","document","documentElement","setProperty","URL","searchParams","get","history","pushState","newOptionsMenuState","replaceAll","tileIndex","parsed","optionsSize","justTriggeredTiles","tileString","navigator","clipboard","writeText","css","justTriggeredInfo","tileNumberIndex","includes","hide","mapVisible","mapControlsVisible","mapWidth","mapHeight","tileWidth","tileHeight","constraintWidth","min","constraintHeight","offsets","leftWidth","topHeight","halfWidth","ceil","halfHeight","treQuarWidth","calculateOffsets","currentPlayerNumber","numOverlay","underlay","attr","mapNumberTilesWidth","mapNumberTilesHeight","degrees","html","removeClass","addClass","scrollIntoView","behavior","block","inline","ev","targetSelector","targetUnderlay","dataTransfer","setData","fromId","getData","targetId","fromSelector","targetSource","targetType","fromType","targetSecond","fromSecond","tilesCopy","temp","OptionsControls","MapControls","MainMap","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5b16161b.chunk.js","sourcesContent":["import React from \"react\";\n\nclass BootstrapScripts extends React.Component {\n    render() {\n        return (\n            <div id=\"bootstrapScripts\">\n                <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"\n                         integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\"\n                         crossOrigin=\"anonymous\" />\n                <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"\n                        integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\"\n                        crossOrigin=\"anonymous\" />\n                <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"\n                        integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\"\n                        crossOrigin=\"anonymous\" />\n            </div>\n        );\n    }\n}\nexport default BootstrapScripts;","export default __webpack_public_path__ + \"static/media/influence.d1f8e76f.png\";","export default __webpack_public_path__ + \"static/media/planet.7203e647.png\";","export default __webpack_public_path__ + \"static/media/resource.4e66e6d4.png\";","export default __webpack_public_path__ + \"static/media/specialty-biotic.683b8aa5.png\";","export default __webpack_public_path__ + \"static/media/specialty-warfare.222674a3.png\";","export default __webpack_public_path__ + \"static/media/specialty-propulsion.767d15a0.png\";","export default __webpack_public_path__ + \"static/media/specialty-cybernetic.16601911.png\";","export default __webpack_public_path__ + \"static/media/trait-cultural.800b2f56.png\";","export default __webpack_public_path__ + \"static/media/trait-hazardous.64956721.png\";","export default __webpack_public_path__ + \"static/media/trait-industrial.37a31434.png\";","import React from \"react\";\nimport adjacencyData from \"../data/adjacencyData.json\";\nimport tileData from \"../data/tileData.json\";\n\nimport influence from './icons/influence.png';\nimport planet from './icons/planet.png';\nimport resource from './icons/resource.png';\nimport specialtyBiotic from './icons/specialty-biotic.png';\nimport specialtyWarfare from './icons/specialty-warfare.png';\nimport specialtyPropulsion from './icons/specialty-propulsion.png';\nimport specialtyCybernetic from './icons/specialty-cybernetic.png';\nimport traitCultural from './icons/trait-cultural.png';\nimport traitHazardous from './icons/trait-hazardous.png';\nimport traitIndustrial from './icons/trait-industrial.png';\n\nclass MoreInfo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.getAdjacent = this.getAdjacent.bind(this);\n    }\n\n    getAdjacent(tileNumber) {\n        // TODO rewrite this to calculate adjacencies, not reference them from a data file\n        let adjacencies = [...adjacencyData[tileNumber]];\n        // adjacencies.push(tileNumber);  // Add back in if we want to add the home system to these calcs\n\n        let planets = 0;\n        let resources = 0;\n        let influence = 0;\n        let specialties = {\n            \"biotic\": 0,\n            \"warfare\": 0,\n            \"propulsion\": 0,\n            \"cybernetic\": 0\n        };\n        let traits = {\n            \"cultural\": 0,\n            \"industrial\": 0,\n            \"hazardous\": 0\n        }\n\n        for (let adjacentIndex in adjacencies) {\n            let adjacentTileNumber = adjacencies[adjacentIndex]\n            let adjacentTile = this.props.tiles[adjacentTileNumber]\n            if (adjacentTile > 0) {\n                for (let planetIndex in tileData.all[adjacentTile][\"planets\"]) {\n                    let planet = tileData.all[adjacentTile][\"planets\"][planetIndex];\n                    planets += 1;\n                    resources += planet[\"resources\"];\n                    influence += planet[\"influence\"];\n                    specialties[planet[\"specialty\"]] += 1;\n                    traits[planet[\"trait\"]] += 1;\n                }\n            }\n        }\n        return {\n            \"planets\": planets,\n            \"resources\": resources,\n            \"influence\": influence,\n            \"specialties\": specialties,\n            \"traits\": traits,\n        }\n    }\n\n    render() {\n        let moreInfoByPlayer = [];\n\n        for (let tileNumber in this.props.tiles) {\n            if ((this.props.tiles[tileNumber] >= 0 && this.props.tiles[tileNumber] < 18) ||\n                (this.props.tiles[tileNumber] >= 51 && this.props.tiles[tileNumber] < 58)) {\n                // This is a homeworld, so gather its info\n                let adjacentInfo = this.getAdjacent(tileNumber);\n                let playerName = this.props.currentPlayerNames[moreInfoByPlayer.length];\n                if (playerName === \"\") {\n                    playerName = \"P\" + (moreInfoByPlayer.length + 1);\n                }\n                moreInfoByPlayer.push(\n                    <tr>\n                        <th scope=\"row\">{playerName}</th>\n                        <td>{adjacentInfo.resources}</td>\n                        <td>{adjacentInfo.influence}</td>\n                        <td>\n                            <span className={\"d-flex\"}>\n                                {[...Array(adjacentInfo.traits.cultural)].map((e, i) => <img className={\"icon\"} src={traitCultural} alt={\"C\"}/>)}\n                                {[...Array(adjacentInfo.traits.hazardous)].map((e, i) => <img className={\"icon\"} src={traitHazardous} alt={\"H\"}/>)}\n                                {[...Array(adjacentInfo.traits.industrial)].map((e, i) => <img className={\"icon\"} src={traitIndustrial} alt={\"I\"}/>)}\n                            </span>\n                        </td>\n                        <td>\n                            <span className={\"d-flex\"}>\n                                {[...Array(adjacentInfo.specialties.biotic)].map((e, i) => <img className={\"icon\"} src={specialtyBiotic} alt={\"B\"}/>)}\n                                {[...Array(adjacentInfo.specialties.warfare)].map((e, i) => <img className={\"icon\"} src={specialtyWarfare} alt={\"W\"}/>)}\n                                {[...Array(adjacentInfo.specialties.propulsion)].map((e, i) => <img className={\"icon\"} src={specialtyPropulsion} alt={\"P\"}/>)}\n                                {[...Array(adjacentInfo.specialties.cybernetic)].map((e, i) => <img className={\"icon\"} src={specialtyCybernetic} alt={\"C\"}/>)}\n                            </span>\n                        </td>\n                    </tr>\n                );\n            }\n\n        }\n        return (\n            <div id=\"moreInfoContainer\" className={this.props.visible ? \"\" : \"d-none\"}>\n                <div className=\"title\">\n                    <h4 id=\"infoTitle\" className=\"text-center\">Assets Adjacent to Home System</h4>\n                </div>\n                <div id=\"moreInfo\" className=\"\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\"></th>\n                                <th scope=\"col\"><img className={\"icon\"} src={resource} alt={\"Res.\"}/></th>\n                                <th scope=\"col\"><img className={\"icon\"} src={influence} alt={\"Inf.\"}/></th>\n                                <th scope=\"col\"><img className={\"icon\"} src={planet} alt={\"Planets\"}/></th>\n                                <th scope=\"col\"><img className={\"icon\"} src={specialtyWarfare} alt={\"Tech\"}/></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {moreInfoByPlayer}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}\nexport default MoreInfo;","import React from \"react\";\nimport tileData from \"../data/tileData.json\";\n\nclass ExtraTiles extends React.Component {\n    constructor(props) {\n        super(props);\n        this.underlayStyle = {\n            width: \"210px\",\n            height: \"185px\",\n            position: \"absolute\",\n            top: \"0\",\n            left: \"0\",\n        }\n        this.tileStyle = {\n            display: \"none\",\n            margin: \"5px\",\n            position: \"relative\",\n        }\n    }\n    \n    render() {\n        let tileNumbers = []\n        tileNumbers = tileNumbers.concat(tileData.blue).concat(tileData.red)\n        if (this.props.useProphecyOfKings) {\n            tileNumbers = tileNumbers.concat(tileData.pokBlue).concat(tileData.pokRed)\n        }\n\n        const tileObjects = []\n        for (const [index, value] of tileNumbers.entries()) {\n            let tileNumber = value\n            if (isNaN(Number(tileNumber)) && tileNumber !== undefined) {\n                tileNumber = value.split(\"-\")[0]\n            }\n            tileObjects.push(\n                <div className=\"tile-wrapper\">\n                    {/*<span id={\"num-\" + tileNumber} className={\"overlay\" + (this.props.overlayVisible ? \"\" : \" d-none\")}>{tileNumber}</span>*/}\n                    <img id={\"extra-\" + tileNumber}\n                         width=\"200px\"\n                         height=\"175px\"\n                         className=\"tile\"\n                         src={window.location.origin + window.location.pathname + \"/tiles/ST_\" + tileNumber + \".png\"}\n                         draggable=\"true\" onDragStart={this.props.drag} onDrop={this.props.drop}\n                         onDragOver={this.props.allowDrop} onDragEnter={this.props.dragEnter}\n                         onDragLeave={this.props.dragLeave}\n                         alt=\"\"\n                         style={this.tileStyle}\n                    />\n                    <svg id={\"extra-underlay-\" + tileNumber} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 359.35 311.21\" className=\"underlay\" fill=\"currentColor\"\n                         style={this.underlayStyle}>\n                        <polygon points=\"269.51 0 89.84 0 0 155.6 89.84 311.2 269.51 311.2 359.35 155.6 269.51 0\" />\n                    </svg>\n                </div>\n            )\n        }\n    \n        return (\n            <div id=\"extraTilesContainer\" className={this.props.visible ? \"\" : \"d-none\"}>\n                <div className=\"title\">\n                    <h4 id=\"extraTitle\" className=\"text-center\">Extra Tiles</h4>\n                </div>\n                <div id=\"extraTiles\" className=\"\">\n                    {tileObjects}\n                </div>\n            </div>\n        );\n    }\n}\nexport default ExtraTiles;","import React from \"react\";\nimport exampleMap from './exampleMap.png';\nimport exampleMapNumbered from './exampleMapNumbered.png';\nimport dragAndDrop from './dragAndDrop.png';\nimport st82 from './ST_82.png';\n\nclass MainOverview extends React.Component {\n    render() {\n        return (\n            <div id=\"overview\" className={\"flex-column justify-content-center\" + (this.props.visible ? \" d-flex\" : \" d-none\")}>\n                <div className=\"title\">\n                    <h1>TI4 Map Generator</h1>\n                </div>\n\n                <div className={\"overview-panel mb-4 mt-4 ml-auto mr-auto\"}>\n                    <h4 className={\"m-3\"}>Customize Your Next Twilight Imperium 4 Map!</h4>\n                    <div className={\"d-flex\"}>\n                        <p className={\"text-left p-3\"}>\n                            Use this tool to generate a fresh new Twilight Imperium map for the next game you play. The\n                            goal of this tool is to cut down the game setup time by letting you generate a fair and balanced map\n                            before you play, so that you are not spending a half-hour picking and placing tiles, or getting a bad draw of tiles. Get started\n                            by customizing settings via the generation panel on the right, and hit \"Generate\" to see a new\n                            map.\n                        </p>\n                        {/*<img className={\"overview-image\"} src={exampleMap} alt=\"TI4 Generated Map\"/>*/}\n                    </div>\n                </div>\n\n                <div className={\"overview-panel mb-4 mt-4 ml-auto mr-auto\"}>\n                    <h4 className={\"m-3\"}>Drag and Drop for Further Customization</h4>\n                    <div className={\"d-flex\"}>\n                        <p className={\"text-left p-3\"}>\n                            Unhappy with a wormhole next to a home world? Are two asteroids next to one another? Don't like\n                            a certain system? Just swap it with another tile by click and dragging one tile over the top of\n                            another tile.\n                        </p>\n                        {/*<img className={\"overview-image\"} src={dragAndDrop} alt=\"Tile Drag Example\"/>*/}\n                    </div>\n                </div>\n\n                <div className={\"overview-panel mb-4 mt-4 ml-auto mr-auto\"}>\n                    <h4 className={\"m-3\"}>New Prophecy of Kings Expansion Content</h4>\n                    <div className={\"d-flex\"}>\n                        <p className={\"text-left p-3\"}>\n                            The new expansion content for TI4, called Prophecy of Kings, was recently released. Check out\n                            the new tiles and 7 and 8 player maps. Hyperlane additions are still a work in progress.\n                        </p>\n                        {/*<img className={\"overview-image\"} src={st82} alt=\"TI4 Generated Map\"/>*/}\n                    </div>\n                </div>\n\n                <div className={\"overview-panel mb-4 mt-4 ml-auto mr-auto\"}>\n                    <h4 className={\"m-3\"}>Share With Your Friends</h4>\n                    <div className={\"d-flex\"}>\n                        <p className={\"text-left p-3\"}>\n                            After you have made your custom map, just copy the url and send it to your friends!\n                        </p>\n                    </div>\n                </div>\n\n                <div className={\"overview-panel mb-4 mt-4 ml-auto mr-auto\"}>\n                    <h4 className={\"m-3\"}>Use Any Tile You Want</h4>\n                    <div className={\"d-flex\"}>\n                        <p className={\"text-left p-3\"}>\n                            Do you really like the gravity rift anomaly and not see it on the board? Click the \"Show unused\n                            tiles\" button to see any tiles not currently being used in the map, and drag and drop them to add them!\n                        </p>\n                    </div>\n                </div>\n\n                <div className={\"overview-panel mb-4 mt-4 ml-auto mr-auto\"}>\n                    <h4 className={\"m-3\"}>Easy Setup On Game Day</h4>\n                    <div className={\"d-flex\"}>\n                        <p className={\"text-left p-3\"}>\n                            It can be hard to know which tile is which when it is time to setup your new board. Click the\n                            \"Toggle Tile Number Overlay\" button to see the numbers of every tile on your custom board.\n                        </p>\n                        {/*<img className={\"overview-image\"} src={exampleMapNumbered} alt=\"TI4 Generated Map\"/>*/}\n                    </div>\n                </div>\n\n                <div className={\"overview-panel mb-4 mt-4 ml-auto mr-auto\"}>\n                    <h4 className={\"m-3\"}>Have Any Ideas On Improvements?</h4>\n                    <div className={\"d-flex\"}>\n                        <p className={\"text-left p-3\"}>\n                            I am always open to feedback and suggestions! You can see\n                            the <a href=\"https://github.com/KeeganW/ti4/issues\">current set of issues</a> with the generator, or if\n                            you don't see your issue or want to suggest a new feature, add\n                            it <a href=\"https://github.com/KeeganW/ti4/issues/new\">to my issue tracker</a>. Thanks for checking\n                            this out!\n                        </p>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default MainOverview;","export default __webpack_public_path__ + \"static/media/exampleMap.939a66ea.png\";","export default __webpack_public_path__ + \"static/media/exampleMapNumbered.73d3f4d9.png\";","export default __webpack_public_path__ + \"static/media/dragAndDrop.1f50c03f.png\";","export default __webpack_public_path__ + \"static/media/ST_82.6bfdc511.png\";","import React from \"react\";\nimport boardData from \"../data/boardData.json\";\n\nclass MoreInfo extends React.Component {\n    render() {\n        const tileNumbers = Array.from({length: boardData.pokSize}, (_, i) => i);\n        const tileObjects = []\n        for (const [index, value] of tileNumbers.entries()) {\n            let tile = this.props.tiles[index]\n            if (isNaN(Number(tile)) && tile !== undefined) {\n                tile = this.props.tiles[index].split(\"-\")[0]\n            }\n            tileObjects.push(\n                <div className=\"tile-wrapper\">\n                    <span id={\"num-\" + index} className={\"overlay\"}>{index}</span>\n                    <img id={\"tile-\" + index}\n                         className=\"tile\"\n                         src={window.location.origin + window.location.pathname + \"/tiles/ST_\" + tile + \".png\"}\n                         draggable=\"true\" onDragStart={this.props.drag} onDrop={this.props.drop}\n                         onDragOver={this.props.allowDrop} onDragEnter={this.props.dragEnter}\n                         onDragLeave={this.props.dragLeave}\n                         alt={\"Twilight Imperium 4 Tile Number \" + index}\n                    />\n                    <svg id={\"underlay-\" + index} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 359.35 311.21\" className=\"underlay\" fill=\"currentColor\">\n                        <polygon points=\"269.51 0 89.84 0 0 155.6 89.84 311.2 269.51 311.2 359.35 155.6 269.51 0\" />\n                    </svg>\n                </div>\n            )\n        }\n        \n        return (\n            <div id=\"tiMap\" className={\"map center-map \" + (this.props.visible ? \"\" : \"d-none\")}>\n                {tileObjects}\n            </div>\n        );\n    }\n}\nexport default MoreInfo;","import React from \"react\";\nimport {CardImage, ClipboardPlus, Dash, InfoCircle, Plus} from \"react-bootstrap-icons\";\nimport ReactTooltip from 'react-tooltip';\n\nclass MoreInfo extends React.Component {\n    \n    render() {\n        return (\n            <div id={\"map-controls\"}>\n                <ReactTooltip place={\"left\"} effect={\"solid\"}/>\n                <div id=\"zoomButtons\" className={\"btn-group-justified btn-group-sm btn-group-vertical\" + (this.props.visible ? \"\" : \" d-none\")}>\n                    <button className=\"btn btn-primary\" id=\"zoomPlus\" onClick={this.props.zoomPlus}>\n                        <Plus className=\"icon\" />\n                    </button>\n                    <button className=\"btn btn-primary\" id=\"zoomMinus\" onClick={this.props.zoomMinus}>\n                        <Dash className=\"icon\" />\n                    </button>\n                </div>\n    \n                <div id=\"hexOverlay\" className={\"btn-group-justified btn-group-sm\" + (this.props.visible ? \"\" : \" d-none\")} onClick={this.props.toggleOverlay}>\n                    <button className={\"btn btn-primary\" + (this.props.overlayVisible ? \" active\": \"\")} id=\"showHexOverlay\" data-tip=\"Tile Number Overlay\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 194.78 169.62\" className=\"icon\" fill=\"currentColor\">\n                            <polygon className=\"overlay-cls-1\" points=\"148.03 4 51.81 4 4.61 86.92 52.02 169.84 148.03 169.84 195.03 86.92 148.03 4\"/>\n                            <text className=\"overlay-cls-2\" transform=\"translate(27.09 132.03)\">18</text>\n                        </svg>\n                    </button>\n                </div>\n    \n                <div id=\"extraTilesButton\" className={\"btn-group-justified btn-group-sm\" + (this.props.visible ? \"\" : \" d-none\")} onClick={this.props.toggleExtraTiles}>\n                    <button className={\"btn btn-primary\" + (this.props.extraTilesVisible ? \" active\": \"\")} id=\"showExtraTiles\" data-tip=\"Unused Tiles\" >\n                        <svg id=\"showExtraTilesSvg\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 359.35 311.21\" className=\"icon\" fill=\"currentColor\">\n                            <polygon id=\"showExtraTilesPoly\" points=\"269.51 0 89.84 0 0 155.6 89.84 311.2 269.51 311.2 359.35 155.6 269.51 0\" />\n                        </svg>\n                    </button>\n                </div>\n\n                <div id=\"moreInfoButton\" className={\"btn-group-justified btn-group-sm\" + (this.props.visible ? \"\" : \" d-none\")} onClick={this.props.toggleMoreInfo}>\n                    <button className={\"btn btn-primary\" + (this.props.moreInfoVisible ? \" active\": \"\")} id=\"showMoreInfo\" data-tip=\"Assets Adjacent to Home\">\n                        <InfoCircle id=\"showMoreInfoSvg\" className=\"icon\" />\n                    </button>\n                </div>\n\n                <div id=\"copyTileStringButton\" className={\"btn-group-justified btn-group-sm\" + (this.props.visible ? \"\" : \" d-none\")} onClick={this.props.copyTilesToClipboard}>\n                    <button className={\"btn btn-primary\"} id=\"copyTileStringInfo\" data-tip=\"Copy TTS Tile String to Clipboard\">\n                        <ClipboardPlus id=\"copyTileStringSvg\" className=\"icon\" />\n                    </button>\n                </div>\n\n\n\n                <div id=\"toggleBackgroundButton\" className={\"btn-group-justified btn-group-sm\"} onClick={this.props.toggleBackground}>\n                    <button className={\"btn btn-primary\"} id=\"toggleBackground\" data-tip=\"Toggle Background Animation\">\n                        <CardImage id=\"toggleBackgroundSvg\" className=\"icon\" />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\nexport default MoreInfo;","import React from \"react\";\nimport {ArrowBarLeft, ArrowBarRight} from \"react-bootstrap-icons\";\n\nclass MoreInfo extends React.Component {\n    render() {\n        return (\n            <div className=\"controls btn-group-justified btn-group-sm\">\n                <button type=\"button\" id=\"toggleOptions\" className={\"btn btn-primary\" + (this.props.visible ? \"\" : \" hidden\") + (this.props.isMobileView ? \" full-screen\" : \"\")} onClick={this.props.toggleOptions}>\n                    <ArrowBarRight className={\"icon icon-contract\"} />\n                    <ArrowBarLeft className={\"icon icon-expand\"} />\n                </button>\n            </div>\n        );\n    }\n}\nexport default MoreInfo;","import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\n\nclass HelpModal extends React.Component {\n    render() {\n        return (\n            <Modal show={this.props.visible} onHide={this.props.hideModal}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{this.props.title}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div dangerouslySetInnerHTML={{__html: this.props.content}} />\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\nexport default HelpModal;","import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\n\nclass HelpModal extends React.Component {\n    render() {\n        return (\n            <Modal show={this.props.visible} onHide={this.props.hideModal}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Set Player Names</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <form id={\"playerNameForm\"}>\n                        {this.props.currentPlayerNames.map((x, i) => {\n                            return (\n                                <div className={\"form-group\"}>\n                                    <label htmlFor={\"player\" + (i+1) + \"Name\"}>Player {(i+1)}</label>\n                                    <input className={\"form-control\"} name={\"playerName\" + i} type={\"text\"} placeholder={\"P\" + (i+1)} defaultValue={x} onChange={this.props.handleNameChange} />\n                                </div>\n                            )\n                        })}\n                    </form>\n\n\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\nexport default HelpModal;","import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\n\nclass HelpModal extends React.Component {\n    render() {\n        let visibleRaces = this.props.races\n        if (this.props.useProphecyOfKings) {\n            visibleRaces = visibleRaces.concat(this.props.pokRaces)\n        }\n\n        return (\n            <Modal show={this.props.visible} onHide={this.props.hideModal}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Set Races</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {/*{this.props.races}*/}\n                    {/*{this.props.pokRaces}*/}\n                    {/*{this.props.useProphecyOfKings}*/}\n                    {/*{this.props.currentRaces}*/}\n                    {/*{this.props.handleRacesChange}*/}\n                    <form id={\"includedRacesForm\"}>\n                        {/*<div className={\"form-group\"}>*/}\n                        {/*    <input className={\"form-control\"} id={\"filterRaces\"} type={\"text\"} placeholder={\"filterRaces\"} />*/}\n                        {/*</div>*/}\n                        {visibleRaces.map((raceName, raceIndex) => {\n                            return (\n                                <div className={\"custom-control custom-checkbox mb-3 races\"} id={\"wrapper\" + raceName.replace(\" \", \"\")}>\n                                    <input className={\"custom-control-input\"} name={raceName} type={\"checkbox\"} id={\"include\" + raceName.replace(\" \", \"\")} checked={this.props.currentRaces.indexOf(raceName) > -1} onChange={this.props.handleRacesChange} />\n                                    <label className={\"custom-control-label d-flex\"} htmlFor={\"include\" + raceName.replace(\" \", \"\")}>{raceName}</label>\n                                </div>\n                            )\n                        })}\n                    </form>\n\n\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\nexport default HelpModal;","import React from \"react\";\nimport {QuestionCircle} from \"react-bootstrap-icons\";\nimport boardData from \"../data/boardData.json\";\nimport tileData from \"../data/tileData.json\";\nimport raceData from \"../data/raceData.json\";\nimport adjacencyData from \"../data/adjacencyData.json\";\nimport HelpModal from \"./HelpModal\";\nimport SetPlayerNameModal from \"./SetPlayerNameModal\";\nimport SetRacesModal from \"./SetRacesModal\";\n\n\nclass MapOptions extends React.Component {\n    constructor(props) {\n        super(props);\n        const startingValues = {\n            numberOfPlayers: [2, 3, 4, 5, 6],\n            pokNumberOfPlayers: [7, 8],\n            boardStyles: {\n                2: Object.keys(boardData.styles[\"2\"]).map((key) => key),\n                3: Object.keys(boardData.styles[\"3\"]).map((key) => key),\n                4: Object.keys(boardData.styles[\"4\"]).map((key) => key),\n                5: Object.keys(boardData.styles[\"5\"]).map((key) => key),\n                6: Object.keys(boardData.styles[\"6\"]).map((key) => key === \"large\" ? null : key).filter(x => x),\n            },\n            boardStylesPok: {\n                2: Object.keys(boardData.styles[\"2\"]).map((key) => key),\n                3: Object.keys(boardData.styles[\"3\"]).map((key) => key),\n                4: Object.keys(boardData.styles[\"4\"]).map((key) => key),\n                5: Object.keys(boardData.styles[\"5\"]).map((key) => key),\n                6: Object.keys(boardData.styles[\"6\"]).map((key) => key),\n                7: Object.keys(boardData.styles[\"7\"]).map((key) => key),\n                8: Object.keys(boardData.styles[\"8\"]).map((key) => key),\n            },\n            pickStyles: [\"balanced\", \"random\", \"resource\", \"influence\", \"custom\"],\n            races: [...raceData[\"races\"]],\n            pokRaces: [...raceData[\"pokRaces\"]],\n            homeworlds: raceData[\"homeSystems\"],\n            pokHomeworlds: raceData[\"pokHomeSystems\"]\n        }\n        const startingPlayers = 6;\n\n        this.state = {\n            optionsPossible: startingValues,\n            currentNumberOfPlayers: startingPlayers,\n            currentNumberOfPlayersOptions: startingValues[\"numberOfPlayers\"],\n            currentBoardStyleOptions: startingValues[\"boardStyles\"][startingPlayers],\n            currentBoardStyle: startingValues[\"boardStyles\"][startingPlayers][0],\n            currentPickStyle: startingValues[\"pickStyles\"][0],\n            currentSeed: \"\",\n            userSetSeed: false,\n            pickRaces: false,\n            pickMultipleRaces: false,\n            shuffleBoards: true,\n            reversePlacementOrder: false,\n            generated: false,\n\n            pickRacesHelp: false,\n            boardStyleHelp: false,\n            pickStyleHelp: false,\n            setPlayerNamesHelp: false,\n            setRacesHelp: false,\n            pickMultipleRacesHelp: false,\n            shufflePriorityHelp: false,\n            reversePlacementOrderHelp: false,\n\n            resourceWeight: 70,\n            influenceWeight: 30,\n            planetCountWeight: 15,\n            specialtyWeight: 50,\n            anomalyWeight: 10,\n            wormholeWeight: 25,\n\n            shuffleThreshold: 5,\n        };\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleNameChange = this.handleNameChange.bind(this);\n        this.handleRacesChange = this.handleRacesChange.bind(this);\n        this.updatePok = this.updatePok.bind(this);\n        this.updatePlayerCount = this.updatePlayerCount.bind(this);\n        this.updateBoardStyle = this.updateBoardStyle.bind(this);\n        this.updateSeed = this.updateSeed.bind(this);\n\n        this.ensureAnomalies = this.ensureAnomalies.bind(this);\n        this.ensureWormholesForType = this.ensureWormholesForType.bind(this);\n\n        this.updateBoardStyleOptions = this.updateBoardStyleOptions.bind(this); // TODO is the bind needed?\n\n        this.generateBoard = this.generateBoard.bind(this);\n\n        this.togglePickRacesHelp = this.togglePickRacesHelp.bind(this);\n        this.toggleBoardStyleHelp = this.toggleBoardStyleHelp.bind(this);\n        this.togglePickStyleHelp = this.togglePickStyleHelp.bind(this);\n        this.toggleSetPlayerNamesHelp = this.toggleSetPlayerNamesHelp.bind(this);\n        this.toggleSetRacesHelp = this.toggleSetRacesHelp.bind(this);\n        this.togglePickMultipleRacesHelp = this.togglePickMultipleRacesHelp.bind(this);\n        this.toggleShufflePriorityHelp = this.toggleShufflePriorityHelp.bind(this);\n        this.toggleReversePlacementOrderHelp = this.toggleReversePlacementOrderHelp.bind(this);\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleNameChange(event) {\n        let nameIndex = parseInt(event.target.name.substring(10))\n        let newPlayerNames = this.props.currentPlayerNames\n        newPlayerNames[nameIndex] = event.target.value\n\n        this.setState({\n            currentPlayerNames: newPlayerNames\n        })\n    }\n\n    handleRacesChange(event) {\n        let race = event.target.name;\n        let newCurrentRaces = this.props.currentRaces;\n        let indexToToggle = newCurrentRaces.indexOf(race)\n        if (indexToToggle >= 0) {\n            newCurrentRaces.splice(indexToToggle, 1)\n        } else {\n            newCurrentRaces.push(race)\n        }\n\n        this.setState({\n            currentRaces: newCurrentRaces\n        })\n    }\n\n    updatePok(event) {\n        let boardOptions = this.state.optionsPossible.boardStyles;\n        if (event.target.checked) {\n            boardOptions = this.state.optionsPossible.boardStylesPok;\n            this.setState({\n                currentNumberOfPlayersOptions: this.state.optionsPossible.numberOfPlayers.concat(this.state.optionsPossible.pokNumberOfPlayers),\n                currentRaces: [...this.state.optionsPossible.races].concat([...this.state.optionsPossible.pokRaces]),\n                currentBoardStyle: boardOptions[this.state.currentNumberOfPlayers][0],\n                currentBoardStyleOptions: boardOptions[this.state.currentNumberOfPlayers],\n            }, this.props.toggleProphecyOfKings(event));\n        } else {\n            this.setState({\n                currentNumberOfPlayers: this.state.currentNumberOfPlayers > 6 ? 6 : this.state.currentNumberOfPlayers,\n                currentNumberOfPlayersOptions: this.state.optionsPossible.numberOfPlayers,\n                currentBoardStyle: this.state.currentNumberOfPlayers > 6 ? boardOptions[\"6\"][0] : this.state.currentBoardStyle,\n                currentBoardStyleOptions: this.state.currentNumberOfPlayers > 6 ? boardOptions[\"6\"] : boardOptions[this.state.currentNumberOfPlayers],\n                currentRaces: [...this.state.optionsPossible.races],\n            }, this.props.toggleProphecyOfKings(event));\n        }\n    }\n\n    updatePlayerCount(event) {\n        this.setState({\n            currentNumberOfPlayers: parseInt(event.target.value),\n        }, () => {\n            this.updateBoardStyleOptions(event)\n        });\n    }\n\n    updateBoardStyle(event) {\n        this.setState({\n            currentBoardStyle: event.target.value,\n        }, () => {\n            if (this.state.generated) {\n                this.generateBoard(event)\n            }\n        });\n    }\n\n    updateBoardStyleOptions(event) {\n        let boardOptions = this.state.optionsPossible.boardStyles;\n        if (this.props.useProphecyOfKings) {\n            boardOptions = this.state.optionsPossible.boardStylesPok;\n        }\n        this.setState({\n            currentBoardStyleOptions: boardOptions[this.state.currentNumberOfPlayers],\n            currentBoardStyle: boardOptions[this.state.currentNumberOfPlayers][0],\n        }, () => {\n            if (this.state.generated) {\n                this.generateBoard(event)\n            }\n        });\n    }\n\n    updateSeed(event) {\n        let newSeed = parseInt(event.target.value)\n        if (!isNaN(newSeed) || event.target.value === \"\") {\n            this.setState({\n                currentSeed: event.target.value,\n                userSetSeed: event.target.value !== \"\"  // Ignore user entry if the value is blank\n            });\n        }\n    }\n\n    capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    shuffle(array, seed) {\n        var m = array.length, t, i;\n\n        // While there remain elements to shuffle…\n        while (m) {\n\n            // Pick a remaining element…\n            i = Math.floor(this.random(seed) * m--);\n\n            // And swap it with the current element.\n            t = array[m];\n            array[m] = array[i];\n            array[i] = t;\n            ++seed\n        }\n\n        return array;\n    }\n\n    random(seed) {\n        var x = Math.sin(seed++) * 10000;\n        return x - Math.floor(x);\n    }\n\n    generateBoard(e) {\n        // Don't actually submit the form\n        e.preventDefault();\n\n        // Create a random seed to use unless the user has specified one\n        let currentSeed = this.state.currentSeed\n        if (!this.state.userSetSeed) {\n            currentSeed = Math.floor(Math.random() * Math.floor(9999));\n        }\n\n        // Get a list of board spaces that need to have non-homeworld planets assigned to them\n        let planetIndexesToPlace = this.getPlanetIndexesToPlace(currentSeed)\n\n        // Get an ordered list of planets to use to fill board with\n        let possibleTiles = this.getPossiblePlanets()\n\n        // Check that we will have enough anomalies in our placed planets, if not, then reverse replace until there are enough anomalies\n        possibleTiles = this.ensureAnomalies(possibleTiles, planetIndexesToPlace.length)\n\n        // Ensure that if we have an alpha wormhole, then we have at least two of them\n        const allAlphaWormholes = this.props.useProphecyOfKings ? [...tileData.alphaWormholes.concat(tileData.pokAlphaWormholes)] : [...tileData.alphaWormholes];\n        const allBetaWormholes = this.props.useProphecyOfKings ? [...tileData.betaWormholes.concat(tileData.pokBetaWormholes)] : [...tileData.betaWormholes];\n\n        possibleTiles = this.ensureWormholesForType(possibleTiles, [26], allAlphaWormholes, allBetaWormholes);\n\n        // Ensure that if we have an alpha wormhole, then we have at least two of them\n        possibleTiles = this.ensureWormholesForType(possibleTiles, [25, 64], allBetaWormholes, allAlphaWormholes);\n\n        let newTiles = [...boardData.blankMap]\n\n        // Place planets one at a time, using the indexes to place combined with the ordered planet list\n        for (let planetIndex in planetIndexesToPlace) {\n            newTiles[planetIndexesToPlace[planetIndex]] = possibleTiles.shift();\n        }\n\n        // Place hyperlanes in their specific layout and orientation\n        // TODO in the future, can this be random? Can they rotate?\n        for (let index = 0; index < boardData.styles[this.state.currentNumberOfPlayers.toString()][this.state.currentBoardStyle]['hyperlane_tiles'].length; index++) {\n            let hyperlaneData = boardData.styles[this.state.currentNumberOfPlayers.toString()][this.state.currentBoardStyle]['hyperlane_tiles'][index]\n            newTiles[hyperlaneData[0]] = hyperlaneData[1] + \"-\" + hyperlaneData[2]\n        }\n\n        // Get current races for placing races, and shuffle them around\n        let currentRaces = [...this.props.currentRaces]\n        currentRaces = this.shuffle(currentRaces, currentSeed)\n\n        // Place data for the homeSystems from board data\n        for (let index = 0; index < boardData.styles[this.state.currentNumberOfPlayers.toString()][this.state.currentBoardStyle]['home_worlds'].length; index++) {\n            let planetIndex = boardData.styles[this.state.currentNumberOfPlayers.toString()][this.state.currentBoardStyle]['home_worlds'][index]\n            if (this.state.pickRaces && !this.state.pickMultipleRaces) {\n                // Convert races into race hexes and assign a random race to a player\n                newTiles[planetIndex] = raceData.raceToHomeSystemMap[currentRaces[0]]\n                currentRaces.shift();\n            } else {\n                // Set home worlds to 0, races to be decided later\n                newTiles[planetIndex] = 0\n            }\n        }\n\n        // Put Mecatol Rex in the middle\n        newTiles[0] = 18\n\n        // Planets have been placed, time to do post processing checks to make sure things are good to go.\n        // Get all anomalies that are adjacent to one another\n        let allTrueAnomalies = this.props.useProphecyOfKings ? [...tileData.anomaly.concat(tileData.pokAnomaly)] : [...tileData.anomaly];\n        for (let anomaly of allTrueAnomalies) {\n            let anomalyTileNumber = newTiles.indexOf(anomaly);\n            if (anomalyTileNumber >= 0) {\n                // anomaly exists in the map, so check it\n                let adjacentTiles = adjacencyData[anomalyTileNumber];\n                let adjacentAnomalies = [];\n\n                // Get a list of all adjacent anomalies to this one\n                for (let adjacentTileNumber of adjacentTiles) {\n                    let adjacentTile = newTiles[adjacentTileNumber];\n                    if (allTrueAnomalies.indexOf(adjacentTile) >= 0) {\n                        // This tile is an anomaly\n                        adjacentAnomalies.push(adjacentTile)\n                    }\n                }\n\n                // If tile is in conflict more than 1 anomaly, see if there is a \"blank\" anomaly off the board to swap with. if not, then continue\n                let swapped = false;\n                let blankReds = this.props.useProphecyOfKings ? [...tileData.blankRed.concat(tileData.pokBlankRed)] : [...tileData.blankRed];\n                if (adjacentAnomalies.length > 1) {\n                    let possibleBlanks = [];\n                    for (let blankRed of blankReds) {\n                        if (newTiles.indexOf(blankRed) < 0) {\n                            possibleBlanks.push(blankRed)\n                        }\n                    }\n                    possibleBlanks = this.shuffle(possibleBlanks, this.state.currentSeed);\n                    if (possibleBlanks.length > 0) {\n                        swapped = true;\n                        newTiles[anomalyTileNumber] = possibleBlanks[0];\n                    }\n                }\n\n                if (!swapped && adjacentAnomalies.length > 0) {\n                    // Look at all red back tiles on the board that are not anomalies, and see if they have adjacent anomalies\n                    // Test this code with 2 player, everything else base, seed of 9986\n                    for (let blankRed of blankReds) {\n                        let blankRedTileNumber = newTiles.indexOf(blankRed)\n                        if (blankRedTileNumber >= 0) {\n                            let adjacentTiles = adjacencyData[blankRedTileNumber];\n                            let swappable = true;\n                            for (let adjacentTile of adjacentTiles) {\n                                if (allTrueAnomalies.indexOf(newTiles[adjacentTile]) >= 0 && adjacentTile !== anomalyTileNumber) {\n                                    // This blank has an adjacent anomaly, so throw it out\n                                    swappable = false;\n                                    break;\n                                }\n                            }\n                            if (swappable) {\n                                // This blank red has no other adjacent anomalies, so swap\n                                newTiles[anomalyTileNumber] = blankRed;\n                                newTiles[blankRedTileNumber] = anomaly;\n                                swapped = true;\n                                break;\n                            }\n                        }\n                    }\n                    if (!swapped) {\n                        /*\n                        There is a potential use for this strategy, but for now it seems pretty safe to just let it fail\n                        to swap on a blank. It is rare that it is impossible, and even when it is, its a pretty simple\n                        rule. Plus the rules let you place reds next to each other if moving them is impossible.\n                        btw, not sure this code below works properly. I believe there is a bug in it.\n                         */\n\n                        /*\n                        // Going in reverse, find the first tile with no anomalies adjacent, and swap\n                        newTiles.reverse()\n                        for (let tile of newTiles) {\n                            if (tile !== 0 && tile !== -1 && allTrueAnomalies.indexOf(tile) < 0 && blankReds.indexOf(tile) < 0) {\n                                console.log(\"Tile: \" + tile)\n                                // This is a real tile, check for adjacency to other anomalies\n                                let blankRedTileNumber = newTiles.indexOf(tile)\n                                let adjacentTiles = adjacencyData[blankRedTileNumber];\n                                let swappable = true;\n                                for (let adjacentTile of adjacentTiles) {\n                                    if (allTrueAnomalies.indexOf(newTiles[adjacentTile]) >= 0) {\n                                        // This blank has an adjacent anomaly, so throw it out\n                                        swappable = false;\n                                        break;\n                                    }\n                                }\n                                if (swappable) {\n                                    // No adjacency breaks found, go ahead and swap it\n                                    console.log(anomalyTileNumber)\n                                    console.log(blankRedTileNumber)\n                                    newTiles[anomalyTileNumber] = tile;\n                                    newTiles[blankRedTileNumber] = anomaly;\n                                    swapped = true;\n                                    break;\n                                }\n                            }\n                        }\n                        // If no swap possible, no problem. Continue on\n                        newTiles.reverse()\n                        */\n                    }\n                }\n            }\n        }\n\n        // Alpha, at least one wormhole is a \"empty tile\" so swap it with a blank tile\n        for (let alphaWormhole of allAlphaWormholes) {\n            let alphaWormholeTileNumber = newTiles.indexOf(alphaWormhole);\n            if (alphaWormholeTileNumber >= 0 && tileData.all[alphaWormhole].planets.length === 0) {\n                // Wormhole exists on the board, and is blank. Check if it is adjacent to another wormhole\n                let adjacentTileNumbers = adjacencyData[alphaWormholeTileNumber];\n                let adjacentWormhole = false;\n                for (let adjacentTileNumber of adjacentTileNumbers) {\n                    if (allAlphaWormholes.indexOf(newTiles[adjacentTileNumber]) >= 0) {\n                        adjacentWormhole = true;\n                        break;\n                    }\n                }\n                if (adjacentWormhole) {\n                    // This blank has an adjacent wormhole, so we need to move it. Loop over all blanks to swap with\n                    let blankReds = this.props.useProphecyOfKings ? [...tileData.blankRed.concat(tileData.pokBlankRed)] : [...tileData.blankRed];\n                    // Remove wormholes from blank reds, because swapping alphas doesn't make sense.\n                    blankReds = blankReds.filter( function( el ) {\n                        return allAlphaWormholes.indexOf( el ) < 0;\n                    } );\n                    blankReds = this.shuffle(blankReds, this.state.currentSeed);\n                    for (let blankRed of blankReds) {\n                        let blankRedTileNumber = newTiles.indexOf(blankRed)\n                        if (blankRedTileNumber >= 0) {\n                            let adjacentTilesNumbers = adjacencyData[blankRedTileNumber];\n                            let swappable = true;\n                            for (let adjacentTileNumber of adjacentTilesNumbers) {\n                                if ((allAlphaWormholes.indexOf(newTiles[adjacentTileNumber]) >= 0 && adjacentTileNumber !== alphaWormholeTileNumber) || (allTrueAnomalies.indexOf(alphaWormhole) >= 0 && allTrueAnomalies.indexOf(newTiles[adjacentTileNumber]) >= 0)) {\n                                    // This blank has an adjacent anomaly, so throw it out\n                                    swappable = false;\n                                    break;\n                                }\n                            }\n                            if (swappable) {\n                                // This blank red has no other adjacent anomalies, so swap\n                                newTiles[alphaWormholeTileNumber] = blankRed;\n                                newTiles[blankRedTileNumber] = alphaWormhole;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // Beta at least one planet wormhole, so swap it with another planet of equal resource value\n        for (let betaWormhole of allBetaWormholes) {\n            let betaWormholeTileNumber = newTiles.indexOf(betaWormhole);\n            if (betaWormholeTileNumber >= 0 && tileData.all[betaWormhole].planets.length === 0) {\n                // Wormhole exists on the board, and is blank. Check if it is adjacent to another wormhole\n                let adjacentTileNumbers = adjacencyData[betaWormholeTileNumber];\n                let adjacentWormhole = false;\n                for (let adjacentTileNumber of adjacentTileNumbers) {\n                    if (allBetaWormholes.indexOf(newTiles[adjacentTileNumber]) >= 0) {\n                        adjacentWormhole = true;\n                        break;\n                    }\n                }\n                if (adjacentWormhole) {\n                    // This blank has an adjacent wormhole, so we need to move it. Loop over all blanks to swap with\n                    let blankReds = this.props.useProphecyOfKings ? [...tileData.blue.concat(tileData.pokBlue)] : [...tileData.blue];\n                    // Remove wormholes from blank reds, because swapping alphas doesn't make sense.\n                    blankReds = blankReds.filter( function( el ) {\n                        return allBetaWormholes.indexOf( el ) < 0;\n                    } );\n                    blankReds = this.shuffle(blankReds, this.state.currentSeed);\n                    for (let blankRed of blankReds) {\n                        let blankRedTileNumber = newTiles.indexOf(blankRed)\n                        if (blankRedTileNumber >= 0) {\n                            let adjacentTilesNumbers = adjacencyData[blankRedTileNumber];\n                            let swappable = true;\n                            for (let adjacentTileNumber of adjacentTilesNumbers) {\n                                // Check for adjacency to another wormhole (excluding itself) and other anomalies\n                                if ((allBetaWormholes.indexOf(newTiles[adjacentTileNumber]) >= 0 && adjacentTileNumber !== betaWormholeTileNumber)) {\n                                    //\n                                    swappable = false;\n                                    break;\n                                }\n                            }\n                            if (swappable) {\n                                // This blank red has no other adjacent anomalies, so swap\n                                newTiles[betaWormholeTileNumber] = blankRed;\n                                newTiles[blankRedTileNumber] = betaWormhole;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // Update the seed we are using (so it is displayed) and then update the tiles\n        this.setState({\n            currentSeed: currentSeed,\n            generated: true\n        }, this.props.updateTiles(newTiles));\n    }\n\n    ensureWormholesForType(possibleTiles, planetWormholes, allWormholes, oppositeWormholes) {\n        let allAnomalyList = this.props.useProphecyOfKings ? [...tileData.anomaly.concat(tileData.pokAnomaly)] : [...tileData.anomaly];\n        let unusedWormholes = [];\n        let usedWormholes = [];\n\n        // Get an array of all unused wormholes\n        for (let wormholeIndex in allWormholes) {\n            possibleTiles.indexOf(allWormholes[wormholeIndex]) < 0 ?\n                unusedWormholes.push(allWormholes[wormholeIndex]) : usedWormholes.push(allWormholes[wormholeIndex]);\n        }\n\n        // If there is only one wormhole, then we need to add a new one in\n        if (usedWormholes.length === 1) {\n            console.log(\"Error! Only one wormhole!\")\n            /*\n            Lets do some tricky logic here. If we are using a planet wormhole tile, then we want to replace\n            another anomaly with one of the other one (pok: two) anomaly wormholes. If we are not using the planet tile,\n            then we can try to find a planet to replace with any remaining wormhole tiles.\n             */\n            unusedWormholes = this.shuffle(unusedWormholes, this.state.currentSeed);\n            let excludedTiles = [...allWormholes.concat(oppositeWormholes)];\n\n            // Check that the single used wormhole is not a planet. If not, try to replace some other planet with a planet wormhole\n            if (planetWormholes.indexOf(usedWormholes[0]) < 0) {\n                unusedWormholes = planetWormholes;\n                excludedTiles = excludedTiles.concat(allAnomalyList);\n            } // else { // Using a planet, so try to replace the lowest weight tiles with any wormhole tile }\n            possibleTiles = this.reverseReplace(possibleTiles, 1, unusedWormholes, excludedTiles, false);\n        }\n\n        return possibleTiles;\n    }\n\n    ensureAnomalies(possibleTiles, numPlanetsToPlace) {\n        // Only care about the tiles we will actually place\n        possibleTiles = possibleTiles.slice(0, numPlanetsToPlace);\n\n        // Check that there is a minimum number of anomalies on the board\n        let blueTileRatio = 2;\n        let redTileRatio = 1;\n        // For 3, 4, and 6 player games, there is a different ratio\n        switch (this.state.currentNumberOfPlayers) {\n            case(3):\n                blueTileRatio = 3\n                redTileRatio = 1\n                break;\n            case(4):\n                blueTileRatio = 5\n                redTileRatio = 3\n                break;\n            case(6):\n                blueTileRatio = 3\n                redTileRatio = 2\n                break;\n        }\n        let numAnomaliesLeftToBePlaced = (numPlanetsToPlace / (blueTileRatio + redTileRatio)) * redTileRatio;\n\n        // If there is no anomalies to add, then we are done\n        if (numAnomaliesLeftToBePlaced < 0) {\n            return possibleTiles\n        }\n\n        // Still have to add a certain number of anomalies in. Get a list of possible anomalies we can add to the tile list\n        let allAnomalyList = this.props.useProphecyOfKings ? [...tileData.anomaly.concat(tileData.pokAnomaly)] : [...tileData.anomaly];\n\n        // Remove all current anomalies in use from this list\n        let possibleAnomalies = []\n        for (let anomalyIndex in allAnomalyList) {\n            if (possibleTiles.indexOf(allAnomalyList[anomalyIndex]) < 0) {\n                // Not using this anomaly yet, so we can add it\n                possibleAnomalies.push(allAnomalyList[anomalyIndex])\n            } else {\n                // Anomaly is already being used\n                numAnomaliesLeftToBePlaced -= 1;\n            }\n        }\n\n        // Randomize, so anomalies we are using are not always the same\n        possibleAnomalies = this.shuffle(possibleAnomalies, this.state.currentSeed);\n\n        return this.reverseReplace(possibleTiles, numAnomaliesLeftToBePlaced, possibleAnomalies, allAnomalyList, false)\n\n    }\n\n    /**\n     * Replace tiles starting from the lowest weight (bottom of the list being defined by reversPlacementOrder)\n     * @param possibleTiles {Int8Array} The ordered list of tiles, cut to the needed size\n     * @param numTilesToReplace {Number} The number of tiles we need to try to replace from replacement into possible\n     * @param replacementTiles {Int8Array} An array of all the tiles we can pick from to put into possibleTiles\n     * @param excludedTiles {Int8Array} An array of tiles we do not want to replace in possible\n     * @param reverseBeforeAndAfter {Boolean} Whether we want to reverse the list before and after replacement\n     * @returns {Int8Array} An ordered list of tiles, with some tiles being replaced\n     */\n    reverseReplace (possibleTiles, numTilesToReplace, replacementTiles, excludedTiles, reverseBeforeAndAfter) {\n        // If we aren't placing in reverse order, we want to start changing the worst tiles (which are usually last)\n        if (reverseBeforeAndAfter) {\n            possibleTiles = possibleTiles.reverse()\n        }\n        let currentTileIndex = possibleTiles.length - 1;\n\n        // While there are anomalies to place and a place to put them...\n        while (numTilesToReplace > 0 && replacementTiles.length > 0 && currentTileIndex > 0) {\n            // Check the index to see that it is not an anomaly or a 0 or -1 or 18 or hyperlane\n            let tileOfInterest = possibleTiles[currentTileIndex]\n            if (excludedTiles.indexOf(tileOfInterest) < 0 && tileOfInterest !== -1  && tileOfInterest !== 18 && tileOfInterest !== 0 && typeof tileOfInterest !== \"string\") {\n                // It is a replaceable tile, so fill it from the new anomalies list\n                possibleTiles[currentTileIndex] = replacementTiles.shift()\n                numTilesToReplace -= 1;\n            }\n            currentTileIndex -= 1;\n        }\n\n        // Undo the reverse from before\n        if (reverseBeforeAndAfter) {\n            possibleTiles = possibleTiles.reverse()\n        }\n\n        return possibleTiles\n    }\n\n    getPlanetIndexesToPlace(currentSeed) {\n        // Copy all the tile arrays from board data\n        let primary = [...boardData.styles[this.state.currentNumberOfPlayers.toString()][this.state.currentBoardStyle]['primary_tiles']]\n        let secondary = [...boardData.styles[this.state.currentNumberOfPlayers.toString()][this.state.currentBoardStyle]['secondary_tiles']]\n        let tertiary = [...boardData.styles[this.state.currentNumberOfPlayers.toString()][this.state.currentBoardStyle]['tertiary_tiles']]\n\n        // If shuffling, we need to shuffle primary, secondary, and tertiary indexes.\n        if (this.state.shuffleBoards) {\n            primary = this.shuffle(primary, currentSeed)\n            secondary = this.shuffle(secondary, currentSeed)\n            tertiary = this.shuffle(tertiary, currentSeed)\n        }\n\n        // Return this list of planet tiles to populate\n        if (this.state.reversePlacementOrder) {\n            return tertiary.concat(secondary).concat(primary)\n        } else {\n            return primary.concat(secondary).concat(tertiary)\n        }\n    }\n\n    getPossiblePlanets() {\n        // Get the list of planets to evaluate\n        let possiblePlanets = []\n        possiblePlanets = possiblePlanets.concat(tileData.blue).concat(tileData.red)\n        if (this.props.useProphecyOfKings) {\n            possiblePlanets = possiblePlanets.concat(tileData.pokBlue).concat(tileData.pokRed)\n        }\n\n        // Get the preset weighting format based on the current pick style\n        let weights = {};\n        switch (this.state.currentPickStyle) {\n            case \"random\":\n                possiblePlanets = this.shuffle(possiblePlanets, this.state.currentSeed)\n                return possiblePlanets\n            case \"custom\":\n                weights = {\n                    \"resource\": parseInt(this.state.resourceWeight),\n                    \"influence\": parseInt(this.state.influenceWeight),\n                    \"planet_count\": parseInt(this.state.planetCountWeight),\n                    \"specialty\": parseInt(this.state.specialtyWeight),\n                    \"anomaly\": parseInt(this.state.anomalyWeight),\n                    \"wormhole\": parseInt(this.state.wormholeWeight)\n                }\n                break;\n            case \"resource\":\n                weights = {\n                    \"resource\": 100,\n                    \"influence\": 10,\n                    \"planet_count\": 10,\n                    \"specialty\": 10,\n                    \"anomaly\": 10,\n                    \"wormhole\": 10\n                }\n                break;\n            case \"influence\":\n                weights = {\n                    \"resource\": 10,\n                    \"influence\": 100,\n                    \"planet_count\": 10,\n                    \"specialty\": 10,\n                    \"anomaly\": 10,\n                    \"wormhole\": 10\n                }\n                break;\n            case \"balanced\":\n            default:\n                if (this.props.useProphecyOfKings) {\n                    weights = {\n                        \"resource\": 80,\n                        \"influence\": 30,\n                        \"planet_count\": 15,\n                        \"specialty\": 50,\n                        \"anomaly\": 40,\n                        \"wormhole\": 25\n                    }\n                } else {\n                    weights = {\n                        \"resource\": 80,\n                        \"influence\": 30,\n                        \"planet_count\": 15,\n                        \"specialty\": 40,\n                        \"anomaly\": 30,\n                        \"wormhole\": 25\n                    }\n                }\n                break;\n        }\n\n        // Re-order the planets based on their weights\n        possiblePlanets = this.getWeightedPlanetList(possiblePlanets, weights)\n\n        return possiblePlanets\n    }\n\n    // TODO rename from planet to tile\n    getWeightedPlanetList(possiblePlanets, weights) {\n        // Generate an array of tuples where the first element is the plant's tile number and the second is its weight\n        let planetWeights = [];\n        for (let planetTileNumber in possiblePlanets) {\n            planetWeights.push([possiblePlanets[planetTileNumber], this.getWeight(possiblePlanets[planetTileNumber], weights)])\n        }\n\n        // Sort the returned list by weight, with higher weighted planets being first\n        planetWeights.sort(function(a, b) {\n            return b[1] - a[1];\n        })\n\n        // Do a little post process shuffling for roughly similar planets\n        let currentIndex = 0;\n        let currentHighValue = planetWeights[0][1];\n        let currentSetToShuffle = [];\n        let postPossiblePlanets = [];\n        while (currentIndex < planetWeights.length) {\n            let planetWeight = planetWeights[currentIndex];\n            // Something in this array, lets see if we add to it\n            if (planetWeight[1] >= (currentHighValue - this.state.shuffleThreshold)) {\n                // Add this item to the array to shuffle\n                currentSetToShuffle.push(planetWeight);\n            } else {\n                // We are now outside our shuffle range. So shuffle what we have, and add it to the post\n                currentSetToShuffle = this.shuffle(currentSetToShuffle, this.state.currentSeed)\n                postPossiblePlanets = postPossiblePlanets.concat(currentSetToShuffle)\n                currentSetToShuffle = [planetWeight]\n                currentHighValue = planetWeight[1]\n            }\n\n            currentIndex += 1;\n        }\n        currentSetToShuffle = this.shuffle(currentSetToShuffle, this.state.currentSeed)\n        postPossiblePlanets = postPossiblePlanets.concat(currentSetToShuffle)\n\n\n        // Convert from tuple down to just the tile number\n        let orderedPlanets = [];\n        for (let weightedPlanet in postPossiblePlanets) {\n            orderedPlanets.push(postPossiblePlanets[weightedPlanet][0]);\n        }\n\n        return orderedPlanets\n    }\n\n    getWeight(planetTileNumber, weights) {\n        let total_weight = 0\n        let tile = tileData.all[planetTileNumber.toString()]\n\n        // Go over all the planets in this tile and add up their values\n        for (let planetIndex in tile['planets']) {\n            let planet = tile['planets'][planetIndex]\n            total_weight += (planet['resources'] / 4) * weights['resource']\n            total_weight += (planet['influence'] / 4) * weights['influence']\n            total_weight += (weights['planet_count'] / 2)\n            total_weight += planet['specialty'] ? weights['specialty'] : 0\n        }\n\n        // Handle anomalies\n        if (tile['type'] === 'anomaly') {\n            total_weight += weights['anomaly'] + 40;\n            // Providing bonuses to these sections mean the other ones are never used\n            // if (tile['anomaly'] === null\n            //     || tile['anomaly'] === 'asteroid-field'\n            //     || tile['anomaly'] === 'gravity-rift') {\n            //     // Give an extra boost to these anomalies, as they are easier to cross than others\n            //     total_weight += 20;  // Change total back to 30 if using this\n            // }\n        }\n        total_weight += tile['wormhole'] ? weights['wormhole'] : 0\n\n        return total_weight\n    }\n    togglePickRacesHelp(event) {\n        this.setState({\n            pickRacesHelp: !this.state.pickRacesHelp\n        })\n    }\n    toggleBoardStyleHelp(event) {\n        this.setState({\n            boardStyleHelp: !this.state.boardStyleHelp\n        })\n    }\n    togglePickStyleHelp(event) {\n        this.setState({\n            pickStyleHelp: !this.state.pickStyleHelp\n        })\n    }\n    toggleSetPlayerNamesHelp(event) {\n        this.setState({\n            setPlayerNamesHelp: !this.state.setPlayerNamesHelp\n        })\n    }\n    toggleSetRacesHelp(event) {\n        this.setState({\n            setRacesHelp: !this.state.setRacesHelp\n        })\n    }\n    togglePickMultipleRacesHelp(event) {\n        this.setState({\n            pickMultipleRacesHelp: !this.state.pickMultipleRacesHelp\n        })\n    }\n    toggleShufflePriorityHelp(event) {\n        this.setState({\n            shufflePriorityHelp: !this.state.shufflePriorityHelp\n        })\n    }\n    toggleReversePlacementOrderHelp(event) {\n        this.setState({\n            reversePlacementOrderHelp: !this.state.reversePlacementOrderHelp\n        })\n    }\n\n    render() {\n        const racesOptions = \"\" +\n            \"<form id=\\\"includedRacesForm\\\">\\n\" +\n            \"                                <div class=\\\"form-group\\\">\\n\" +\n            \"                                    <input class=\\\"form-control\\\" id=\\\"filterRaces\\\" type=\\\"text\\\" placeholder=\\\"Filter Races...\\\">\\n\" +\n            \"                                </div>\\n\" +\n            \"                                    <div class=\\\"custom-control custom-checkbox mb-3 races\\\" id=\\\"wrapper{{ race|replace(' ', '') }}\\\">\\n\" +\n            \"                                        <input type=\\\"checkbox\\\" class=\\\"custom-control-input\\\" id=\\\"include{{ race|replace(' ', '') }}\\\" name=\\\"race {{ race }}\\\" checked>\\n\" +\n            \"                                        <label class=\\\"custom-control-label d-flex\\\" for=\\\"include{{ race|replace(' ', '') }}\\\">{{ race }}</label>\\n\" +\n            \"                                    </div>\\n\" +\n            \"                            </form>\"\n        return (\n            <div id=\"options\" className={this.props.visible ? \"\" : \"d-none\"}>\n                <div className=\"title\">\n                    <h4 className=\"text-center\">Generation Options</h4>\n                </div>\n                <form id=\"generateForm\" onSubmit={this.generateBoard}>\n\n                    <div className=\"custom-control custom-checkbox mb-3\">\n                        <input type=\"checkbox\" className=\"custom-control-input\" id=\"pokExpansion\" name=\"useProphecyOfKings\" checked={this.props.useProphecyOfKings} onChange={this.updatePok} />\n                        <label className=\"custom-control-label\" htmlFor=\"pokExpansion\">Use Prophecy of Kings Expansion</label>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"playerCount\">Number of Players</label>\n                        <select className=\"form-control\" id=\"playerCount\" name=\"currentNumberOfPlayers\" value={this.state.currentNumberOfPlayers} onChange={this.updatePlayerCount}>\n                            {this.state.currentNumberOfPlayersOptions.map((x) => <option key={x} value={x}>{x}</option>)}\n                        </select>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"boardStyle\" className=\"d-flex\">Board Style\n                            <QuestionCircle className=\"icon\" onClick={this.toggleBoardStyleHelp} />\n                        </label>\n                        <select className=\"form-control\" id=\"boardStyle\" name=\"currentBoardStyle\" value={this.state.currentBoardStyle} onChange={this.updateBoardStyle}>\n                            {this.state.currentBoardStyleOptions.map((x) => <option key={x} value={x}>{this.capitalize(x)}</option>)}\n                        </select>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"pickStyle\" className=\"d-flex\">Picking Style\n                            <QuestionCircle className=\"icon\" onClick={this.togglePickStyleHelp} />\n                        </label>\n                        <select className=\"form-control\" id=\"pickStyle\" name=\"currentPickStyle\" value={this.state.currentPickStyle} onChange={this.handleInputChange}>\n                            {this.state.optionsPossible.pickStyles.map((x) => <option key={x} value={x}>{this.capitalize(x)}</option>)}\n                        </select>\n                    </div>\n                    <div className={\"ml-2 collapse \" + (this.state.currentPickStyle === \"custom\" ? \"show\" : \"\")} id=\"customPickStyle\">\n                        <div className=\"card card-body\">\n                            <label htmlFor=\"customResource\">Resource</label>\n                            <input type=\"range\" className=\"custom-range\" name=\"resourceWeight\" value={this.state.resourceWeight} onChange={this.handleInputChange} />\n\n                            <label htmlFor=\"customInfluence\">Influence</label>\n                            <input type=\"range\" className=\"custom-range\" name=\"influenceWeight\" value={this.state.influenceWeight} onChange={this.handleInputChange} />\n\n                            <label htmlFor=\"customPlanetCount\">Planet Count</label>\n                            <input type=\"range\" className=\"custom-range\" name=\"planetCountWeight\" value={this.state.planetCountWeight} onChange={this.handleInputChange} />\n\n                            <label htmlFor=\"customSpecialty\">Specialty</label>\n                            <input type=\"range\" className=\"custom-range\" name=\"specialtyWeight\" value={this.state.specialtyWeight} onChange={this.handleInputChange} />\n\n                            <label htmlFor=\"customAnomaly\">Anomaly</label>\n                            <input type=\"range\" className=\"custom-range\" name=\"anomalyWeight\" value={this.state.anomalyWeight} onChange={this.handleInputChange} />\n\n                            <label htmlFor=\"customWormhole\">Wormhole</label>\n                            <input type=\"range\" className=\"custom-range\" name=\"wormholeWeight\" value={this.state.wormholeWeight} onChange={this.handleInputChange} />\n                        </div>\n                    </div>\n\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"seed\">Specific Seed</label>\n                        <input className=\"form-control\" id=\"seed\" name=\"updateSeed\" type=\"text\" placeholder=\"Enter a number to seed generation...\" value={this.state.currentSeed} onChange={this.updateSeed} />\n                    </div>\n\n                    <div className=\"custom-control custom-checkbox mb-3 d-flex\">\n                        <input type=\"checkbox\" className=\"custom-control-input\" id=\"pickRaces\" name=\"pickRaces\" checked={this.state.pickRaces} onChange={this.handleInputChange} />\n                        <label className=\"custom-control-label\" htmlFor=\"pickRaces\">Pick Races for Players</label>\n                        <QuestionCircle className=\"icon\" onClick={this.togglePickRacesHelp} />\n                    </div>\n                    <div className={\"ml-2 collapse \" + (this.state.pickRaces ? \"show\" : \"\")} id=\"pickRacesCollapse\">\n                        <div className=\"card card-body\">\n                            <button type=\"button\" className=\"btn btn-outline-primary mb-2\" onClick={this.toggleSetPlayerNamesHelp}>Set Player Names</button>\n\n                            <button type=\"button\" className=\"btn btn-outline-primary mb-2\" onClick={this.toggleSetRacesHelp}>Set Included Races</button>\n\n                            {/*<div className=\"custom-control custom-checkbox d-flex\">*/}\n                            {/*    <input type=\"checkbox\" className=\"custom-control-input\" id=\"pickMultipleRaces\" name=\"pickMultipleRaces\" checked={this.state.pickMultipleRaces} onChange={this.handleInputChange} />*/}\n                            {/*    <label className=\"custom-control-label\" htmlFor=\"pickMultipleRaces\">Let Players Pick From Multiple</label>*/}\n                            {/*    <QuestionCircle className=\"icon\" onClick={this.togglePickMultipleRacesHelp} />*/}\n                            {/*</div>*/}\n                        </div>\n                    </div>\n\n                    <div className=\"custom-control custom-checkbox mb-3 d-flex\">\n                        <input type=\"checkbox\" className=\"custom-control-input\" id=\"shuffleBoards\" name=\"shuffleBoards\" checked={this.state.shuffleBoards} onChange={this.handleInputChange} />\n                        <label className=\"custom-control-label\" htmlFor=\"shuffleBoards\">Randomize Priorities Before Placement</label>\n                        <QuestionCircle className=\"icon\" onClick={this.toggleShufflePriorityHelp} />\n                    </div>\n\n                    <div className=\"custom-control custom-checkbox mb-3 d-flex\">\n                        <input type=\"checkbox\" className=\"custom-control-input\" id=\"reversePlacementOrder\" name=\"reversePlacementOrder\" checked={this.state.reversePlacementOrder} onChange={this.handleInputChange} />\n                        <label className=\"custom-control-label\" htmlFor=\"reversePlacementOrder\">Reverse Placement Order</label>\n                        <QuestionCircle className=\"icon\" onClick={this.toggleReversePlacementOrderHelp} />\n                    </div>\n\n                    <HelpModal visible={this.state.pickStyleHelp} hideModal={this.togglePickStyleHelp} title={\"About Pick Style\"}\n                         content='<p>\n                         Pick Style is used to determine how tiles are weighted for when they are placed on the board. A higher weighted tile means that the hex is more important, and so (depending on the board style) it is put closer to home worlds to facilitate available assets.\n                         <br>\n                         <br><b>Balanced:</b> A custom weight which favors resources and planet count more than anomalies. This more accurately factors in tech specialties and influence as trade-offs to the \"Resource\" pick.\n                         <br><b>Resource:</b> Tiles are ordered primarily by their resource values. Higher resource planets are more coveted, and so are more important.\n                         <br><b>Influence:</b> Similar to \"Resource\", tiles are ordered primarily by their influence values.\n                         <br><b>Random:</b> Tiles are completely randomly ordered. Expect chaotic and unbalanced maps.\n                         <br><b>Custom:</b> Enter your own values in for balancing tradeoffs between various tile qualities.\n                         </p>'\n\n                    />\n                    <SetPlayerNameModal visible={this.state.setPlayerNamesHelp} currentPlayerNames={this.props.currentPlayerNames}\n                                        hideModal={this.toggleSetPlayerNamesHelp} handleNameChange={this.handleNameChange}\n                    />\n                    <SetRacesModal visible={this.state.setRacesHelp} races={this.state.optionsPossible.races}\n                                   pokRaces={this.state.optionsPossible.pokRaces} useProphecyOfKings={this.props.useProphecyOfKings}\n                                   currentRaces={this.props.currentRaces}\n                                   hideModal={this.toggleSetRacesHelp} handleRacesChange={this.handleRacesChange}\n                    />\n                    <HelpModal visible={this.state.boardStyleHelp} hideModal={this.toggleBoardStyleHelp} title={\"About Board Style\"}\n                         content='<p>\n                         Board style changes how the tiles are actually laid out on a newly generated map.\n                         <br>\n                         <br>\n                         Changing this would cause you to expect different hex layouts, such as different patterns of tiles, usage of hyperlanes, or unorthodox placement of home worlds.\n                         </p>'\n                    />\n                    <HelpModal visible={this.state.pickRacesHelp} hideModal={this.togglePickRacesHelp} title={\"About Picking Races\"}\n                         content=\"<p>\n                         Automatically assigns races to the players on the boards.\n                         <br>\n                         <br>\n                         From the set of races, turning this on will assign every player a random race (designated by assigning them the homeworld tile of that race). You should pick which player sits at a certain position before turning this on.\n                         </p>\"\n                    />\n                    <HelpModal visible={this.state.pickMultipleRacesHelp} hideModal={this.togglePickMultipleRacesHelp} title={\"About Picking Multiple Races\"}\n                         content=\"<p>\n                         Divides all the races evenly up amongst the players in the game (with no overflow), so that they can choose from a selection instead of being specifically assigned one race.\n                         <br>\n                         <br>\n                         Some groups prefer to have a draft, where every player is given a few races to pick between. This lets them pick the races that they want to play, but not have any conflicts with other players about playing a certain race.\n                         </p>\"\n                    />\n                    <HelpModal visible={this.state.shufflePriorityHelp} hideModal={this.toggleShufflePriorityHelp} title={\"About Shuffling Priority\"}\n                         content='<p>\n                         Randomizes the priority picks for each picking round.\n                         <br>\n                         <br>\n                         Normally when placing tiles, this tool attempts to place the tiles so player 1 does not always get the best tiles. To do this, it gives player 1 first pick from the list of tiles weighted by picking style, player 2 second pick and so on for the first round of placing tiles. Once the last player has placed a tile, they then get to place another. The tiles are then placed in reverse order from there. So in a 6-player game, player 1 gets to place tile 1 and 12, while player 6 gets to place tile 6 and 7. This is a similar strategy to placing opening settlements in Settlers of Catan.\n                         <br>\n                         <br>\n                         Turning this on stops this from happening, and instead completely randomizes the placement order.\n                         </p>'\n                    />\n                    <HelpModal visible={this.state.reversePlacementOrderHelp} hideModal={this.toggleReversePlacementOrderHelp} title={\"About Reverse Placement Order\"}\n                         content='<p>\n                         Reverses which tiles are placed first in pick order.\n                         <br>\n                         <br>\n                         Tiles are normally placed in priority (see randomize priority help). This reverses the order, so that the last picks are first, which has the effect of pushing the morre valuable tiles towards the center of the galaxy.\n                         </p>'\n                    />\n            \n                    <button type=\"submit\" className=\"btn btn-primary\">Generate</button>\n                </form>\n            </div>\n        );\n    }\n}\nexport default MapOptions;","import React from 'react';\nimport $ from 'jquery';\nimport './App.css';\nimport BootstrapScripts from \"./BootstrapScripts\";\nimport MoreInfo from \"./panels/MoreInfo\";\nimport ExtraTiles from \"./panels/ExtraTiles\";\nimport MainOverview from \"./overview/MainOverview\";\nimport MainMap from \"./map/MainMap\";\nimport MapControls from \"./map/MapControls\";\nimport OptionsControls from \"./options/OptionsControls\";\nimport MapOptions from \"./options/MapOptions\";\nimport tileData from \"./data/tileData.json\";\nimport raceData from \"./data/raceData.json\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            isOptionsMenuShowing: true,\n            useProphecyOfKings: false,\n            overviewVisible: true,\n            extraTilesVisible: false,\n            moreInfoVisible: false,\n            backgroundAnimated: true,\n            tiles: Array.apply(-1, Array(37)).fill(-1),\n            overlayVisible: false,\n            zoom: 1.0,\n            mobileBreakpoint: 700,\n            isMobileView: false,\n            currentPlayerNames: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n            currentRaces: [...raceData[\"races\"]]\n        };\n    \n        this.drawMap = this.drawMap.bind(this);\n\n        this.onPopState = this.onPopState.bind(this);\n        this.checkResize = this.checkResize.bind(this);\n\n        this.updateTiles = this.updateTiles.bind(this);\n        this.validateTiles = this.validateTiles.bind(this);\n        this.toggleBackground = this.toggleBackground.bind(this);\n\n        this.toggleOptionsMenu = this.toggleOptionsMenu.bind(this);\n        this.toggleProphecyOfKings = this.toggleProphecyOfKings.bind(this);\n        this.toggleOverlay = this.toggleOverlay.bind(this);\n        this.toggleMoreInfo = this.toggleMoreInfo.bind(this);\n        this.toggleExtraTiles = this.toggleExtraTiles.bind(this);\n        this.copyTilesToClipboard = this.copyTilesToClipboard.bind(this);\n        this.showExtraTiles = this.showExtraTiles.bind(this);\n        this.zoomPlusClick = this.zoomPlusClick.bind(this);\n        this.zoomMinusClick = this.zoomMinusClick.bind(this);\n        \n        this.drag = this.drag.bind(this);\n        this.drop = this.drop.bind(this);\n        this.dragEnter = this.dragEnter.bind(this);\n        this.dragLeave = this.dragLeave.bind(this);\n        this.allowDrop = this.allowDrop.bind(this);\n\n    }\n    \n    /* URL CONTROLS */\n    \n    componentDidMount() {\n        // Do something at the start\n        this.$mapContainer =  $(\"#mainContent\");\n        this.$tiMap = $(\"#tiMap\");\n\n        window.onpopstate = this.onPopState\n        this.onPopState()\n\n        this.checkResize()\n\n        window.addEventListener('resize', this.checkResize)\n    }\n    checkResize() {\n        if (window.innerWidth < this.state.mobileBreakpoint) {\n            if (!this.state.isMobileView) {\n                // Just transitioned into mobile state, so hide the options menu\n                this.setState({\n                    isMobileView: true,\n                    isOptionsMenuShowing: false\n                })\n                document.documentElement.style.setProperty('--options-width', \"0px\");\n            } // else { // We went from mobile to mobile, don't need to do anything\n        } else {\n            this.setState({\n                isMobileView: false,\n                isOptionsMenuShowing: true\n            })\n            document.documentElement.style.setProperty('--options-width', \"400px\");\n        }\n        this.drawMap()\n    }\n    componentWillUnmount() {\n        // As you leave the page\n        window.onpopstate = () => {}\n    }\n    // Whenever we go back, grab the tiles from the url bar, and set them as the current tiles\n    onPopState(event) {\n        let url = new URL(document.location);\n        let tiles = url.searchParams.get(\"tiles\");\n        \n        // Make sure the tiles parameter is set\n        const newTiles = tiles !== null ? this.validateTiles(tiles) : [];\n    \n        if (newTiles !== []) {\n            this.setState({\n                tiles: newTiles\n            }, this.drawMap );\n        }\n    };\n    \n    /* TILE CHANGING FUNCTIONS */\n    \n    updateTiles(newTiles) {\n        window.history.pushState({}, null, window.location.pathname + '?tiles=' + newTiles.toString());\n\n        let newOptionsMenuState = this.state.isOptionsMenuShowing\n        if (this.state.isMobileView) {\n            newOptionsMenuState = false\n        }\n\n        this.setState({\n            tiles: newTiles,\n            isOptionsMenuShowing: newOptionsMenuState\n        }, () => {\n            this.showExtraTiles();\n            this.drawMap();\n        });\n    }\n    /**\n     * Attempts to validate a given tile string, by cleaning it up and turning it into an object.\n     * @returns {number[]} An array of numbers representing tiles.\n     */\n    validateTiles(tiles) {\n        // Remove any spaces\n        tiles = tiles.replaceAll(\" \", \"\");\n        \n        // Check if it has opening and closing brackets. If so, remove them\n        if (tiles.charAt(0) === \"[\") {\n            tiles = tiles.substring(1, tiles.length);\n        }\n        if (tiles.charAt(tiles.length - 1) === \"]\") {\n            tiles = tiles.substring(0, tiles.length-1);\n        }\n        \n        // Now split on commas\n        tiles = tiles.split(',');\n        let newTiles = []\n        for (let tileIndex in tiles) {\n            let parsed = Number(tiles[tileIndex])\n            newTiles.push(isNaN(parsed) ? tiles[tileIndex] : parsed)\n        }\n        return newTiles;\n    }\n    \n    /* BUTTON ACTIONS */\n    \n    toggleOptionsMenu() {\n        // Set the css variable for options width\n        if (window.innerWidth >= this.state.mobileBreakpoint) {\n            let optionsSize = this.state.isOptionsMenuShowing ? \"0px\" : \"400px\";\n            document.documentElement.style.setProperty('--options-width', optionsSize);\n        }\n        \n        // Update the map so that it correctly uses the new width\n        this.drawMap();\n        \n        // Update the state to the new view\n        this.setState(state => ({\n            isOptionsMenuShowing: !state.isOptionsMenuShowing\n        }));\n    }\n    toggleOverlay(event) {\n        this.setState({\n            overlayVisible: !this.state.overlayVisible,\n        }, this.drawMap );\n    }\n    toggleProphecyOfKings(event) {\n        this.setState({\n            useProphecyOfKings: !this.state.useProphecyOfKings,\n        }, this.showExtraTiles);\n    }\n    toggleMoreInfo(event, justTriggeredTiles) {\n        justTriggeredTiles = justTriggeredTiles === undefined ? false : justTriggeredTiles\n\n        let optionsSize = this.state.moreInfoVisible ? \"0px\" : \"400px\";\n        document.documentElement.style.setProperty('--more-info-width', optionsSize);\n\n        this.setState({\n            moreInfoVisible: !this.state.moreInfoVisible\n        }, () => {\n            if (this.state.extraTilesVisible && !justTriggeredTiles) {\n                this.toggleExtraTiles(event, true);\n            }\n        });\n    }\n    copyTilesToClipboard(event) {\n        let tileString = [...this.state.tiles];\n        tileString.shift();\n        tileString = tileString.toString();\n        tileString = tileString.replaceAll(\"-1\", \"0\");\n        tileString = tileString.replaceAll(\",\", \" \");\n        console.log(\"Here is your tile string for use with this TTS Mod (https://steamcommunity.com/sharedfiles/filedetails/?id=1466689117):\")\n        console.log(tileString)\n        navigator.clipboard.writeText(tileString)\n    }\n    toggleBackground(event) {\n        if (!this.state.backgroundAnimated) {\n            $(\"#stars\").css(\"animation\", \"animateStar 50s linear infinite\")\n            $(\"#stars2\").css(\"animation\", \"animateStar 100s linear infinite\")\n            $(\"#stars3\").css(\"animation\", \"animateStar 150s linear infinite\")\n        } else {\n            $(\"#stars\").css(\"animation\", \"staticStar 50s linear infinite\")\n            $(\"#stars2\").css(\"animation\", \"staticStar 100s linear infinite\")\n            $(\"#stars3\").css(\"animation\", \"staticStar 150s linear infinite\")\n        }\n        this.setState({\n            backgroundAnimated: !this.state.backgroundAnimated,\n        });\n    }\n    toggleExtraTiles(event, justTriggeredInfo) {\n        justTriggeredInfo = justTriggeredInfo === undefined ? false : justTriggeredInfo\n\n        this.showExtraTiles();\n        \n        let optionsSize = this.state.extraTilesVisible ? \"0px\" : \"250px\";\n        document.documentElement.style.setProperty('--extra-tiles-width', optionsSize);\n\n        this.setState({\n            extraTilesVisible: !this.state.extraTilesVisible\n        }, () => {\n            if (this.state.moreInfoVisible && !justTriggeredInfo) {\n                this.toggleMoreInfo(event, true);\n            }\n        });\n    }\n    showExtraTiles() {\n        let tileNumbers = []\n        tileNumbers = tileNumbers.concat(tileData.blue).concat(tileData.red)\n        if (this.state.useProphecyOfKings) {\n            tileNumbers = tileNumbers.concat(tileData.pokBlue).concat(tileData.pokRed)\n        }\n\n        for (let tileNumberIndex in tileNumbers) {\n            if (!this.state.tiles.includes(tileNumbers[tileNumberIndex])) {\n                $(\"#extra-\" + tileNumbers[tileNumberIndex]).show();\n            } else {\n                $(\"#extra-\" + tileNumbers[tileNumberIndex]).hide();\n            }\n        }\n    }\n    zoomPlusClick() {\n        if (this.state.zoom < 3) {\n            this.setState({\n                zoom: this.state.zoom + 0.75\n            }, this.drawMap );\n        }\n    }\n    zoomMinusClick() {\n        if (this.state.zoom > 0.5) {\n            this.setState({\n                zoom: this.state.zoom - 0.75\n            }, this.drawMap );\n        }\n    }\n\n    /* MAP GENERATION */\n\n    drawMap() {\n        // Check to see if there are any tiles to render currently\n        if (this.state === undefined || this.state.tiles.length <= 0) {\n            this.setState({\n                overviewVisible: true,\n                mapVisible: false,\n                mapControlsVisible: false,\n            });\n            return;\n        } else {\n            this.setState({\n                overviewVisible: false,\n                mapVisible: true,\n                mapControlsVisible: true,\n            });\n        }\n\n        // Configuration options for magic numbers\n        let mapPadding = 0; // The amount of pad spacing to apply to the map edges\n        let mapNumberTilesHeight = 9; // Every TI board is 7 tiles tall\n        let mapNumberTilesWidth = 7; // Every TI board is 5.5 tiles wide\n        let mapTileWidth = 364; // The width of every tile in the static folder\n        let mapTileHeight = 317;\n\n        // Get extra information about the map\n        let mapWidth = this.$mapContainer.width() - (2 * mapPadding); // Put padding on top/bottom of map\n        let mapHeight = this.$mapContainer.height() - (2 * mapPadding); // Put padding on either side of map\n        let tileWidth = Math.floor(mapWidth / mapNumberTilesWidth)\n        let tileHeight = Math.floor(mapHeight / mapNumberTilesHeight)\n\n        // Determine which will be our constraining factor, width or height?\n        let constraintWidth = Math.min(this.state.zoom * Math.min(tileWidth, Math.floor((mapTileWidth / mapTileHeight) * tileHeight)), mapTileWidth) // Prohibit over-zooming\n        let constraintHeight = Math.floor((mapTileHeight / mapTileWidth) * constraintWidth)\n\n        // Configure the map container to be this size\n        this.$tiMap.css(\"width\", constraintWidth * mapNumberTilesWidth)\n            .css(\"height\", constraintHeight * mapNumberTilesHeight);\n\n        /**\n         * Calculate offsets of the tiles in relation to Mecatol Rex (the center tile). This information\n         * is stored in an array of two value arrays. The two value arrays reperesent the margin left\n         * and margin right to offset the tile (based on size of of tiles).\n         * @param width The width (in pixels) of a single tile\n         * @param height The height (in pixels) of a single tile\n         * @returns {(number[]|(number)[])[]} an array of two value arrays.\n         */\n        function calculateOffsets(width, height) {\n            let leftWidth = -width\n            let topHeight = -height\n            let halfWidth = Math.ceil(leftWidth * 0.5)\n            let halfHeight = Math.ceil(topHeight * 0.5)\n            let treQuarWidth = Math.ceil(leftWidth * 0.75)\n\n            return [\n                [halfWidth, halfHeight],  // Mecatol Rex\n                // Inner ring\n                [halfWidth, halfHeight + topHeight],\n                [halfWidth - treQuarWidth, halfHeight + halfHeight],\n                [halfWidth - treQuarWidth, 0],\n                [halfWidth, halfHeight - topHeight],\n                [halfWidth + treQuarWidth, 0],\n                [halfWidth + treQuarWidth, halfHeight + halfHeight],\n                // Middle ring\n                [halfWidth, halfHeight + topHeight + topHeight],\n                [halfWidth - treQuarWidth, halfHeight + topHeight + halfHeight],\n                [halfWidth - leftWidth - halfWidth, halfHeight + topHeight],\n                [halfWidth - leftWidth - halfWidth, halfHeight],\n                [halfWidth - leftWidth - halfWidth, halfHeight - topHeight],\n                [halfWidth - treQuarWidth, halfHeight - topHeight - halfHeight],\n                [halfWidth, halfHeight - topHeight - topHeight],\n                [halfWidth + treQuarWidth, halfHeight - topHeight - halfHeight],\n                [halfWidth + leftWidth + halfWidth, halfHeight - topHeight],\n                [halfWidth + leftWidth + halfWidth, halfHeight],\n                [halfWidth + leftWidth + halfWidth, halfHeight + topHeight],\n                [halfWidth + treQuarWidth, halfHeight + topHeight + halfHeight],\n                // Outer Ring\n                [halfWidth, halfHeight + topHeight + topHeight + topHeight],\n                [halfWidth - treQuarWidth, halfHeight + topHeight + topHeight + halfHeight],\n                [halfWidth - leftWidth - halfWidth, halfHeight + topHeight + topHeight],\n                [halfWidth - treQuarWidth - leftWidth - halfWidth, halfHeight + topHeight + halfHeight],\n                [halfWidth - treQuarWidth - leftWidth - halfWidth, halfHeight + halfHeight],\n                [halfWidth - treQuarWidth - leftWidth - halfWidth, halfHeight - halfHeight],\n                [halfWidth - treQuarWidth - leftWidth - halfWidth, halfHeight - topHeight - halfHeight],\n                [halfWidth - leftWidth - halfWidth, halfHeight - topHeight - topHeight],\n                [halfWidth - treQuarWidth, halfHeight - topHeight - topHeight - halfHeight],\n                [halfWidth, halfHeight - topHeight - topHeight - topHeight],\n                [halfWidth + treQuarWidth, halfHeight - topHeight - topHeight - halfHeight],\n                [halfWidth + leftWidth + halfWidth, halfHeight - topHeight - topHeight],\n                [halfWidth + treQuarWidth + leftWidth + halfWidth, halfHeight - topHeight - halfHeight],\n                [halfWidth + treQuarWidth + leftWidth + halfWidth, halfHeight - halfHeight],\n                [halfWidth + treQuarWidth + leftWidth + halfWidth, halfHeight + halfHeight],\n                [halfWidth + treQuarWidth + leftWidth + halfWidth, halfHeight + topHeight + halfHeight],\n                [halfWidth + leftWidth + halfWidth, halfHeight + topHeight + topHeight],\n                [halfWidth + treQuarWidth, halfHeight + topHeight + topHeight + halfHeight],\n                // Extended Ring\n                [halfWidth, halfHeight + topHeight + topHeight + topHeight + topHeight],\n                [halfWidth - treQuarWidth, halfHeight + topHeight + topHeight + topHeight + halfHeight],\n                [halfWidth - leftWidth - halfWidth, halfHeight + topHeight + topHeight + topHeight],\n                [halfWidth - treQuarWidth - leftWidth - halfWidth, halfHeight + topHeight + topHeight + halfHeight],\n                [halfWidth - leftWidth - leftWidth - leftWidth, halfHeight + topHeight + topHeight],\n                [halfWidth - leftWidth - leftWidth - leftWidth, halfHeight + topHeight],\n                [halfWidth - leftWidth - leftWidth - leftWidth, halfHeight],\n                [halfWidth - leftWidth - leftWidth - leftWidth, halfHeight - topHeight],\n                [halfWidth - leftWidth - leftWidth - leftWidth, halfHeight - topHeight - topHeight],\n                [halfWidth - treQuarWidth - leftWidth - halfWidth, halfHeight - topHeight - topHeight - halfHeight],\n                [halfWidth - leftWidth - halfWidth, halfHeight - topHeight - topHeight - topHeight],\n                [halfWidth - treQuarWidth, halfHeight - topHeight - topHeight - topHeight - halfHeight],\n                [halfWidth, halfHeight - topHeight - topHeight - topHeight - topHeight],\n                [halfWidth + treQuarWidth, halfHeight - topHeight - topHeight - topHeight - halfHeight],\n                [halfWidth + leftWidth + halfWidth, halfHeight - topHeight - topHeight - topHeight],\n                [halfWidth + treQuarWidth + leftWidth + halfWidth, halfHeight - topHeight - topHeight - halfHeight],\n                [halfWidth + leftWidth + leftWidth + leftWidth, halfHeight - topHeight - topHeight],\n                [halfWidth + leftWidth + leftWidth + leftWidth, halfHeight - topHeight],\n                [halfWidth + leftWidth + leftWidth + leftWidth, halfHeight],\n                [halfWidth + leftWidth + leftWidth + leftWidth, halfHeight + topHeight],\n                [halfWidth + leftWidth + leftWidth + leftWidth, halfHeight + topHeight + topHeight],\n                [halfWidth + treQuarWidth + leftWidth + halfWidth, halfHeight + topHeight + topHeight + halfHeight],\n                [halfWidth + leftWidth + halfWidth, halfHeight + topHeight + topHeight + topHeight],\n                [halfWidth + treQuarWidth, halfHeight + topHeight + topHeight + topHeight + halfHeight],\n            ]\n        }\n\n        // Calculate the offset values for margin left and margin top per tile\n        let offsets = calculateOffsets(constraintWidth, constraintHeight)\n\n        // Loop over tiles to assign various values to them\n        let currentPlayerNumber = 0;\n        for (let tileNumber = 0; tileNumber < offsets.length; tileNumber++) {\n            let tile = $(\"#tile-\" + tileNumber);\n            let numOverlay = $(\"#num-\" + tileNumber);\n            let underlay = $(\"#underlay-\" + tileNumber);\n            if (this.state.tiles[tileNumber] >= 0 || typeof this.state.tiles[tileNumber] === \"string\") {\n                tile.attr(\"width\", constraintWidth)\n                    .attr(\"height\", constraintHeight)\n                    .css(\"margin-left\", offsets[tileNumber][0])\n                    .css(\"margin-top\", offsets[tileNumber][1])\n                    .css(\"left\", (mapNumberTilesWidth / 2) * constraintWidth)\n                    .css(\"top\", (mapNumberTilesHeight / 2) * constraintHeight)\n                    .css({'transform' : 'rotate(0)'})  // Reset any rotations from other hyperlanes\n\n                tile.show()\n\n                if (typeof this.state.tiles[tileNumber] === \"string\") {\n                    // Hyperlane, so remove the last section and check if it needs to be rotated\n                    if (this.state.tiles[tileNumber].split(\"-\")[1] !== \"0\") {\n                        let degrees = 60 * Number(this.state.tiles[tileNumber].split(\"-\")[1]);\n                        tile.css({'transform' : 'rotate(-'+ degrees +'deg)'})\n                    }\n                }\n            } else {\n                tile.hide()\n            }\n\n            numOverlay.css(\"width\", constraintWidth)\n                .css(\"height\", constraintHeight)\n                .css(\"line-height\", constraintHeight + \"px\")\n                .css(\"margin-left\", offsets[tileNumber][0])\n                .css(\"margin-top\", offsets[tileNumber][1])\n                .css(\"left\", (mapNumberTilesWidth / 2) * constraintWidth)\n                .css(\"top\", (mapNumberTilesHeight / 2) * constraintHeight)\n                .css(\"display\", \"none\")\n                // .html(tileNumber)\n\n            if (typeof this.state.tiles[tileNumber] === \"string\") {\n                numOverlay.html(this.state.tiles[tileNumber].split(\"-\")[0])\n            } else {\n                numOverlay.html(this.state.tiles[tileNumber])\n            }\n\n\n            underlay.css(\"width\", constraintWidth + 6)\n                .css(\"height\", constraintHeight + 6)\n                .css(\"margin-left\", offsets[tileNumber][0]-3)\n                .css(\"margin-top\", offsets[tileNumber][1]-3)\n                .css(\"left\", (mapNumberTilesWidth / 2) * constraintWidth)\n                .css(\"top\", (mapNumberTilesHeight / 2) * constraintHeight)\n\n            if (!this.state.overlayVisible) {\n                numOverlay.hide()\n            } else {\n                if (this.state.tiles[tileNumber] === 0) {\n                    // Show the player name\n                    let name = this.state.currentPlayerNames[currentPlayerNumber];\n                    numOverlay.html(name === \"\" ? \"P\" + (currentPlayerNumber + 1) : name);\n                    currentPlayerNumber += 1;\n                }\n\n                if (this.state.tiles[tileNumber] !== -1) {\n                    numOverlay.show();\n                }\n            }\n        }\n\n        // Clear any css classes on the map\n        this.$tiMap.removeClass(\"center-map\")\n        this.$tiMap.removeClass(\"center-map-vertical\")\n        this.$tiMap.removeClass(\"center-map-horizontal\")\n\n        // Check to see if we are zoomed, or map is always screen size.\n        if (this.state.zoom > 1.0) {\n            // Check to see if we should still be horizontally or vertically centered\n            if ((constraintWidth * mapNumberTilesWidth) < mapWidth) {\n                this.$tiMap.addClass(\"center-map-horizontal\")\n            } else if ((constraintHeight * mapNumberTilesHeight) < mapHeight) {\n                this.$tiMap.addClass(\"center-map-vertical\")\n            } else {\n                // Use default map values\n            }\n\n            // TODO find what the mouse is hovering nearest to, or over. Get that element, and zoom in. Something like this? https://stackoverflow.com/questions/6519043/get-mouse-position-on-scroll\n\n            // Center Mecatol Rex on the screen\n            $(\"#tile-0\").get(0).scrollIntoView({behavior: \"smooth\", block:\"center\", inline: \"center\"});\n        } else {\n            // No need to move the map around, just center it on the screen\n            this.$tiMap.addClass(\"center-map\")\n        }\n    }\n    \n    \n    // Drag and drop related functions, modified from https://www.w3schools.com/html/html5_draganddrop.asp\n    allowDrop(ev) {\n        ev.preventDefault();\n    }\n    dragEnter(ev){\n        let targetSelector = $(\"#\" + ev.target.id);\n        let targetUnderlay = $(\"#underlay-\" + ev.target.id.split(\"-\")[1]);\n        targetSelector.addClass(\"tile-target\")\n        targetUnderlay.addClass(\"underlay-target\")\n    }\n    dragLeave(ev){\n        let targetSelector = $(\"#\" + ev.target.id);\n        let targetUnderlay = $(\"#underlay-\" + ev.target.id.split(\"-\")[1]);\n        targetSelector.removeClass(\"tile-target\")\n        targetUnderlay.removeClass(\"underlay-target\")\n    }\n    drag(ev) {\n        ev.dataTransfer.setData(\"text\", ev.target.id);\n    }\n    drop(ev) {\n        ev.preventDefault();\n        // Get the associated ids\n        let fromId = ev.dataTransfer.getData(\"text\");\n        let targetId = ev.target.id;\n        \n        let targetSelector = $(\"#\" + targetId);\n        let fromSelector = $(\"#\" + fromId);\n        let targetUnderlay = $(\"#underlay-\" + ev.target.id.split(\"-\")[1]);\n        \n        // Temporarily store the target's source, and swap\n        let targetSource = targetSelector.attr('src');\n        targetSelector.attr('src', fromSelector.attr('src'));\n        fromSelector.attr('src', targetSource);\n        \n        let targetType = targetId.split(\"-\")[0];\n        let fromType = fromId.split(\"-\")[0];\n        let targetSecond = targetId.split(\"-\")[1];\n        let fromSecond = fromId.split(\"-\")[1];\n    \n        let tilesCopy = [...this.state.tiles];\n        if (fromType === \"tile\" && targetType === \"tile\") {\n            // Both are on the main map, so simply swap their positions in the tile array\n            let temp = tilesCopy[targetSecond];\n            tilesCopy[targetSecond] = tilesCopy[fromSecond];\n            tilesCopy[fromSecond] = temp;\n        } else if (fromType === \"extra\" && targetType === \"tile\") {\n            // Moving from the extra tiles onto the main map\n            let temp = tilesCopy[targetSecond];\n            tilesCopy[targetSecond] = parseInt(fromSecond);\n            // Update the id of the tile\n            fromSelector.attr('id', 'extra-' + temp)\n        } else if (fromType === \"tile\" && targetType === \"extra\") {\n            // Moving from the main map to the tiles\n            let temp = tilesCopy[fromSecond];\n            tilesCopy[fromSecond] = parseInt(targetSecond);\n            // Update the id of the tile\n            targetSelector.attr('id', 'extra-' + temp)\n        } else {\n            // Swapping extra tiles... Just update the ids\n            targetSelector.attr('id', 'extra-' + fromSecond)\n            fromSelector.attr('id', 'extra-' + targetSecond)\n        }\n        \n        // Clear the target classes\n        targetSelector.removeClass(\"tile-target\");\n        targetUnderlay.removeClass(\"underlay-target\");\n        \n        // Update the tile string\n        this.updateTiles(tilesCopy);\n    }\n    \n\n    render() {\n        return (\n            <div>\n                    \n                <OptionsControls visible={this.state.isOptionsMenuShowing} isMobileView={this.state.isMobileView} toggleOptions={this.toggleOptionsMenu} />\n\n                <MapControls visible={this.state.mapControlsVisible} overlayVisible={this.state.overlayVisible}\n                             moreInfoVisible={this.state.moreInfoVisible} extraTilesVisible={this.state.extraTilesVisible}\n                             toggleOverlay={this.toggleOverlay} copyTilesToClipboard={this.copyTilesToClipboard}\n                             toggleMoreInfo={this.toggleMoreInfo} toggleExtraTiles={this.toggleExtraTiles}\n                             zoomPlus={this.zoomPlusClick} zoomMinus={this.zoomMinusClick}\n                             toggleBackground={this.toggleBackground}\n                />\n                \n                <div id=\"mainContent\" className=\"justify-content-center align-items-center\">\n                    <MainOverview visible={this.state.overviewVisible} />\n                    \n                    <MainMap visible={this.state.mapVisible} overlayVisible={this.state.overlayVisible}\n                             tiles={this.state.tiles} useProphecyOfKings={this.state.useProphecyOfKings}\n                             drag={this.drag} drop={this.drop} dragEnter={this.dragEnter} dragLeave={this.dragLeave} allowDrop={this.allowDrop}/>\n                </div>\n                \n                <ExtraTiles visible={this.state.extraTilesVisible} overlayVisible={this.state.overlayVisible}\n                            useProphecyOfKings={this.state.useProphecyOfKings}\n                            updateTiles={this.updateTiles}\n                            drag={this.drag} drop={this.drop} dragEnter={this.dragEnter} dragLeave={this.dragLeave} allowDrop={this.allowDrop}/>\n                \n                <MoreInfo visible={this.state.moreInfoVisible} tiles={this.state.tiles}\n                          useProphecyOfKings={this.state.useProphecyOfKings} currentPlayerNames={this.state.currentPlayerNames} />\n                \n                <MapOptions visible={this.state.isOptionsMenuShowing}  useProphecyOfKings={this.state.useProphecyOfKings}\n                            currentPlayerNames={this.state.currentPlayerNames} currentRaces={this.state.currentRaces}\n                            toggleProphecyOfKings={this.toggleProphecyOfKings} updateTiles={this.updateTiles}\n                            showExtraTiles={this.showExtraTiles} />\n            \n                <BootstrapScripts />\n            </div>\n        );\n    }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}