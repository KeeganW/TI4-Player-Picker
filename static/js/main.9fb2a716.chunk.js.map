{"version":3,"sources":["BootstrapScripts.js","MoreInfo.js","ExtraTiles.js","MainOverview.js","MainMap.js","MapControls.js","OptionsControls.js","MapOptions.js","App.js","reportWebVitals.js","index.js"],"names":["BootstrapScripts","id","src","integrity","crossOrigin","React","Component","MoreInfo","className","this","props","visible","underlayStyle","width","height","position","top","left","tileStyle","display","margin","tileNumbers","Array","from","length","v","i","tileObjects","entries","value","push","overlayVisible","window","location","origin","draggable","onDragStart","drag","onDrop","drop","onDragOver","allowDrop","onDragEnter","dragEnter","onDragLeave","dragLeave","alt","style","xmlns","viewBox","fill","points","_","index","tiles","onClick","zoomPlus","zoomMinus","toggleOverlay","data-tip","transform","place","effect","toggleMoreInfo","toggleExtraTiles","type","toggleOptions","state","optionsPossible","numberOfPlayers","boardStyles","6","5","4","3","2","pickStyles","races","useProphecyOfKings","currentNumberOfPlayers","currentBoardStyleOptions","currentBoardStyle","currentPickStyle","currentPlayerNames","currentRaces","currentSeed","userSetSeed","pickRaces","pickMultipleRaces","shuffleBoards","handleInputChange","bind","updatePlayerCount","updateSeed","updateBoardStyleOptions","generateBoard","event","target","checked","name","setState","parseInt","str","charAt","toUpperCase","slice","array","seed","t","m","Math","floor","random","x","sin","e","preventDefault","planetIndexesToPlace","getPlanetIndexesToPlace","possiblePlanets","getPossiblePlanets","newTiles","apply","planetIndex","shift","shuffle","boardData","toString","homeworlds","planetTileNumberIndex","planetTileNumber","tileData","updateTiles","primary","secondary","tertiary","concat","weights","getWeightedPlanetList","planetWeights","getWeight","sort","a","b","orderedPlanets","weightedPlanet","total_weight","tile","planet","onSubmit","onChange","htmlFor","map","capitalize","placeholder","App","isOptionsMenuShowing","overviewVisible","extraTilesVisible","moreInfoVisible","zoom","onPopState","validateTiles","toggleOptionsMenu","zoomPlusClick","zoomMinusClick","$mapContainer","$","$tiMap","onpopstate","URL","document","searchParams","get","drawMap","history","pushState","replaceAll","substring","split","Number","optionsSize","documentElement","setProperty","tileNum","includes","show","mapVisible","mapControlsVisible","mapNumberTilesWidth","mapWidth","mapHeight","tileWidth","tileHeight","constraintWidth","min","constraintHeight","css","offsets","leftWidth","topHeight","halfWidth","ceil","halfHeight","treQuarWidth","calculateOffsets","tileNumber","numOverlay","underlay","attr","mapNumberTilesHeight","hide","html","removeClass","addClass","scrollIntoView","behavior","block","inline","ev","targetSelector","targetUnderlay","dataTransfer","setData","fromId","getData","targetId","fromSelector","targetSource","targetType","fromType","targetSecond","fromSecond","tilesCopy","temp","OptionsControls","MainOverview","MainMap","MapControls","ExtraTiles","MapOptions","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9fb2a716.chunk.js","sourcesContent":["import React from \"react\";\n\nclass BootstrapScripts extends React.Component {\n    render() {\n        return (\n            <div id=\"bootstrapScripts\">\n                <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"\n                         integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\"\n                         crossOrigin=\"anonymous\" />\n                <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"\n                        integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\"\n                        crossOrigin=\"anonymous\" />\n                <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"\n                        integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\"\n                        crossOrigin=\"anonymous\" />\n            </div>\n        );\n    }\n}\nexport default BootstrapScripts;","import React from \"react\";\n\nclass MoreInfo extends React.Component {\n    \n    render() {\n        return (\n            <div id=\"moreInfoContainer\" className={this.props.visible ? \"\" : \"d-none\"}>\n                <div className=\"title\">\n                    <h4 id=\"infoTitle\" className=\"text-center\">More Info</h4>\n                </div>\n                <div id=\"moreInfo\" className=\"\">\n                </div>\n            </div>\n        );\n    }\n}\nexport default MoreInfo;","import React from \"react\";\nimport $ from \"jquery\";\n\nclass MoreInfo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.underlayStyle = {\n            width: \"111px\",\n            height: \"97px\",\n            position: \"absolute\",\n            top: \"0\",\n            left: \"0\",\n        }\n        this.tileStyle = {\n            display: \"none\",\n            margin: \"3px\",\n            position: \"relative\",\n        }\n    }\n    \n    render() {\n        const tileNumbers = Array.from({length: 32}, (v, i) => (i + 19));\n        const tileObjects = []\n        for (const [index, value] of tileNumbers.entries()) {\n            tileObjects.push(\n                <div className=\"tile-wrapper\">\n                    <span id={\"num-\" + value} className={\"overlay\" + (this.props.overlayVisible ? \"\" : \" d-none\")}>{value}</span>\n                    <img id={\"extra-\" + value}\n                         width=\"105px\"\n                         height=\"91px\"\n                         className=\"tile\"\n                         src={window.location.origin + \"/tiles/ST_\" + value + \".png\"}\n                         draggable=\"true\" onDragStart={this.props.drag} onDrop={this.props.drop}\n                         onDragOver={this.props.allowDrop} onDragEnter={this.props.dragEnter}\n                         onDragLeave={this.props.dragLeave}\n                         alt=\"\"\n                         style={this.tileStyle}\n                    />\n                    <svg id={\"extra-underlay-\" + value} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 359.35 311.21\" className=\"underlay\" fill=\"currentColor\"\n                         style={this.underlayStyle}>\n                        <polygon points=\"269.51 0 89.84 0 0 155.6 89.84 311.2 269.51 311.2 359.35 155.6 269.51 0\" />\n                    </svg>\n                </div>\n            )\n        }\n    \n        return (\n            <div id=\"extraTilesContainer\" className={this.props.visible ? \"\" : \"d-none\"}>\n                <div className=\"title\">\n                    <h4 id=\"extraTitle\" className=\"text-center\">Extra Tiles</h4>\n                </div>\n                <div id=\"extraTiles\" className=\"\">\n                    {tileObjects}\n                    {/*{% for index in range(19,51) %}*/}\n                    {/*<div className=\"tile-wrapper\" style=\"position: relative\">*/}\n                    {/*    /!*<span id=\"extra-num-{{ index }}\" class=\"overlay\" style=\"width: 105px; height: 91px; line-height: 91px; display: none;\">index</span>*!/*/}\n                    {/*    <img id=\"extra-tile-{{ index }}\"*/}\n                    {/*         width=\"105px\"*/}\n                    {/*         height=\"91px\"*/}\n                    {/*         className=\"tile\"*/}\n                    {/*         src=\"/static/img/tiles/ST_{{ index }}.png\"*/}\n                    {/*         draggable=\"true\" onDragStart=\"drag(event)\" onDrop=\"drop(event)\"*/}\n                    {/*         onDragOver=\"allowDrop(event)\" onDragEnter=\"dragEnter(event)\"*/}\n                    {/*         onDragLeave=\"dragLeave(event)\"*/}\n                    {/*         alt=\"\"*/}\n                    {/*         // style=\"display: none;margin:3px;position:relative;\"*/}\n                    {/*    />*/}\n                    {/*    <svg id=\"extra-underlay-{{ index }}\" className=\"underlay\"*/}\n                    {/*         style=\"width: 111px; height: 97px;position:absolute;top:0;left:0;\">*/}\n                    {/*        <use xlink:href=\"#hex\"/>*/}\n                    {/*    </svg>*/}\n                    {/*</div>*/}\n                </div>\n            </div>\n        );\n    }\n}\nexport default MoreInfo;","import React from \"react\";\n\nclass MoreInfo extends React.Component {\n    \n    render() {\n        return (\n            <div id=\"overview\" className={\"justify-content-center\" + (this.props.visible ? \"\" : \" d-none\")}>\n                <div className=\"title\">\n                    <h2>TI4 Board Generator</h2>\n                </div>\n                <div id=\"description\" className=\"pt-4\">\n                    <p>This tool is designed to help you pick out a Twilight Imperium 4 board to play your\n                        next game on. By using the customization options to the right, you can design and\n                        agree upon on a fair and balanced galaxy map before you even open the box to begin\n                        setup. This helps cut down on game time and unlucky tile draws during traditional\n                        game setup. Hit \"Generate\" to view a randomly generated 6 player map, and drag and\n                        drop tiles to get started customizing your own board!</p>\n                </div>\n            </div>\n        );\n    }\n}\nexport default MoreInfo;","import React from \"react\";\nimport $ from \"jquery\";\n\nclass MoreInfo extends React.Component {\n    render() {\n        const tileNumbers = Array.from({length: 37}, (_, i) => i);\n        const tileObjects = []\n        for (const [index, value] of tileNumbers.entries()) {\n            tileObjects.push(\n                <div className=\"tile-wrapper\">\n                    <span id={\"num-\" + index} className={\"overlay\"}>{index}</span>\n                    <img id={\"tile-\" + index}\n                         className=\"tile\"\n                         src={window.location.origin + \"/tiles/ST_\" + this.props.tiles[index] + \".png\"}\n                         draggable=\"true\" onDragStart={this.props.drag} onDrop={this.props.drop}\n                         onDragOver={this.props.allowDrop} onDragEnter={this.props.dragEnter}\n                         onDragLeave={this.props.dragLeave}\n                         alt=\"\"\n                    />\n                    <svg id={\"underlay-\" + index} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 359.35 311.21\" className=\"underlay\" fill=\"currentColor\">\n                        <polygon points=\"269.51 0 89.84 0 0 155.6 89.84 311.2 269.51 311.2 359.35 155.6 269.51 0\" />\n                    </svg>\n                </div>\n            )\n        }\n        \n        return (\n            <div id=\"tiMap\" className={\"map center-map \" + (this.props.visible ? \"\" : \"d-none\")}>\n                {tileObjects}\n            </div>\n        );\n    }\n}\nexport default MoreInfo;","import React from \"react\";\nimport {Dash, InfoCircle, Plus} from \"react-bootstrap-icons\";\nimport ReactTooltip from 'react-tooltip';\n\nclass MoreInfo extends React.Component {\n    \n    render() {\n        return (\n            <div id={\"map-controls\"}>\n                <div id=\"zoomButtons\" className={\"btn-group-justified btn-group-sm btn-group-vertical\" + (this.props.visible ? \"\" : \" d-none\")}>\n                    <button className=\"btn btn-primary\" id=\"zoomPlus\" onClick={this.props.zoomPlus}>\n                        <Plus className=\"icon\" />\n                    </button>\n                    <button className=\"btn btn-primary\" id=\"zoomMinus\" onClick={this.props.zoomMinus}>\n                        <Dash className=\"icon\" />\n                    </button>\n                </div>\n    \n                <div id=\"hexOverlay\" className={\"btn-group-justified btn-group-sm\" + (this.props.visible ? \"\" : \" d-none\")} onClick={this.props.toggleOverlay}>\n                    <button className=\"btn btn-primary\" id=\"showHexOverlay\" data-tip=\"Toggle Tile Number Overlay\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 194.78 169.62\" className=\"icon\" fill=\"currentColor\">\n                            <polygon className=\"overlay-cls-1\" points=\"148.03 4 51.81 4 4.61 86.92 52.02 169.84 148.03 169.84 195.03 86.92 148.03 4\"/>\n                            <text className=\"overlay-cls-2\" transform=\"translate(27.09 132.03)\">18</text>\n                        </svg>\n                    </button>\n                    <ReactTooltip place={\"left\"} effect={\"solid\"}/>\n                </div>\n    \n                <div id=\"moreInfoButton\" className={\"btn-group-justified btn-group-sm\" + (this.props.visible ? \"\" : \" d-none\")} onClick={this.props.toggleMoreInfo}>\n                    <button className=\"btn btn-primary\" id=\"showMoreInfo\" data-tip=\"Extra Map Information\">\n                        <InfoCircle className=\"icon\" />\n                    </button>\n                </div>\n    \n                <div id=\"extraTilesButton\" className={\"btn-group-justified btn-group-sm\" + (this.props.visible ? \"\" : \" d-none\")} onClick={this.props.toggleExtraTiles}>\n                    <button className=\"btn btn-primary\" id=\"showExtraTiles\" data-tip=\"Show Unused Tiles\" >\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 359.35 311.21\" className=\"icon\" fill=\"currentColor\">\n                            <polygon points=\"269.51 0 89.84 0 0 155.6 89.84 311.2 269.51 311.2 359.35 155.6 269.51 0\" />\n                        </svg>\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\nexport default MoreInfo;","import React from \"react\";\nimport {ArrowBarLeft, ArrowBarRight} from \"react-bootstrap-icons\";\n\nclass MoreInfo extends React.Component {\n    render() {\n        return (\n            <div className=\"controls btn-group-justified btn-group-sm\">\n                <button type=\"button\" id=\"toggleOptions\" className={\"btn btn-primary\" + (this.props.visible ? \"\" : \" hidden\")} onClick={this.props.toggleOptions}>\n                    <ArrowBarRight className={\"icon icon-contract\"} />\n                    <ArrowBarLeft className={\"icon icon-expand\"} />\n                </button>\n            </div>\n        );\n    }\n}\nexport default MoreInfo;","import React from \"react\";\nimport {QuestionCircle} from \"react-bootstrap-icons\";\nimport boardData from \"./boardData.json\";\nimport tileData from \"./tileData.json\";\n\nclass MoreInfo extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            optionsPossible: {\n                numberOfPlayers: [6, 5, 4, 3, 2],\n                boardStyles: {\n                    6: [\"normal\", \"warzone\"],\n                    5: [\"normal\", \"diamond\"],\n                    4: [\"normal\", \"horizontal\", \"vertical\", \"gaps\"],\n                    3: [\"normal\", \"compact\", \"manta\"],\n                    2: [\"normal\"],\n                },\n                pickStyles: ['random', 'resource', 'influence', 'tas'],\n                races: [\n                    \"Sardakk N'orr\", \"The Arborec\", \"The Barony of Letnev\",\n                    \"The Clan of Saar\", \"The Embers of Muaat\", \"The Emirates of Hacan\",\n                    \"The Federation of Sol\", \"The Ghosts of Creuss\", \"The Lizix Mindnet\",\n                    \"The Mentak Coalition\", \"The Naalu Collective\", \"The Nekro Virus\",\n                    \"The Universities of Jol-Nar\", \"The Winnu\", \"The Xxcha Kingdom\",\n                    \"The Yin Brotherhood\", \"The Yssaril Tribes\"\n                ]\n            },\n            useProphecyOfKings: false,\n            currentNumberOfPlayers: 6,\n            currentBoardStyleOptions: [\"normal\", \"warzone\"],\n            currentBoardStyle: \"normal\",\n            currentPickStyle: \"normal\",\n            currentPlayerNames: [\"P1\", \"P2\", \"P3\", \"P4\", \"P5\", \"P6\"],\n            currentRaces: [\"Sardakk N'orr\", \"The Arborec\", \"The Barony of Letnev\", \"The Clan of Saar\", \"The Embers of Muaat\", \"The Emirates of Hacan\", \"The Federation of Sol\", \"The Ghosts of Creuss\", \"The Lizix Mindnet\", \"The Mentak Coalition\", \"The Naalu Collective\", \"The Nekro Virus\", \"The Universities of Jol-Nar\", \"The Winnu\", \"The Xxcha Kingdom\", \"The Yin Brotherhood\", \"The Yssaril Tribes\"],\n            currentSeed: \"\",\n            userSetSeed: false,\n            pickRaces: false,\n            pickMultipleRaces: false,\n            shuffleBoards: false,\n        };\n        \n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.updatePlayerCount = this.updatePlayerCount.bind(this);\n        this.updateSeed = this.updateSeed.bind(this);\n        \n        this.updateBoardStyleOptions = this.updateBoardStyleOptions.bind(this); // TODO is the bind needed?\n\n        this.generateBoard = this.generateBoard.bind(this);\n    }\n    \n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        \n        this.setState({\n            [name]: value\n        });\n    }\n    updatePlayerCount(event) {\n        this.setState(state => ({\n            currentNumberOfPlayers: parseInt(event.target.value)\n        }), this.updateBoardStyleOptions );\n    }\n    updateBoardStyleOptions() {\n        this.setState(state => ({\n            currentBoardStyleOptions: this.state.optionsPossible.boardStyles[this.state.currentNumberOfPlayers]\n        }));\n    }\n    updateSeed(event) {\n        this.setState(state => ({\n            currentSeed: event.target.value,\n            userSetSeed: event.target.value !== \"\"  // Ignore user entry if the value is blank\n        }));\n    }\n    \n    capitalize(str){\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n    \n    shuffle(array, seed) {\n        var m = array.length, t, i;\n        \n        // While there remain elements to shuffle…\n        while (m) {\n            \n            // Pick a remaining element…\n            i = Math.floor(this.random(seed) * m--);\n            \n            // And swap it with the current element.\n            t = array[m];\n            array[m] = array[i];\n            array[i] = t;\n            ++seed\n        }\n        \n        return array;\n    }\n    \n    random(seed) {\n        var x = Math.sin(seed++) * 10000;\n        return x - Math.floor(x);\n    }\n    \n    generateBoard(e) {\n        e.preventDefault();\n        \n        let currentSeed = this.state.currentSeed\n        if (!this.state.userSetSeed) {\n            currentSeed = Math.floor(Math.random() * Math.floor(9999));\n        }\n        \n        // Get a list of planets to populate\n        let planetIndexesToPlace = this.getPlanetIndexesToPlace(currentSeed)\n        \n        // Get an ordered list of planets to use to fill board with\n        let possiblePlanets = this.getPossiblePlanets()\n        \n        // Place planets in a specific order, focusing on spreading the planets evenly\n        let newTiles = Array.apply(-1, Array(37)).fill(-1);  // Reset tiles to be empty\n        for (let planetIndex in planetIndexesToPlace){\n            newTiles[planetIndexesToPlace[planetIndex]] = possiblePlanets.shift()\n        }\n        \n        // Get current races for placing races\n        let currentRaces = [...this.state.currentRaces]\n        currentRaces = this.shuffle(currentRaces, currentSeed)\n        \n        for (let index = 0; index < boardData[this.state.currentNumberOfPlayers.toString()][this.state.currentBoardStyle]['home_worlds'].length; index++) {\n            let planetIndex = boardData[this.state.currentNumberOfPlayers.toString()][this.state.currentBoardStyle]['home_worlds'][index]\n            if (this.state.pickRaces && !this.state.pickMultipleRaces) {\n                // Convert races into race hexes\n                // Assign a random race to a player\n                \n                // TODO make this cleaner. Currently looping over all homeworlds to try to match the race name\n                const homeworlds = Array.from({length: 18}, (_, i) => i+1)\n                for (let planetTileNumberIndex in homeworlds) {\n                    let planetTileNumber = homeworlds[planetTileNumberIndex]\n                    if (tileData[planetTileNumber.toString()]['race'] === currentRaces[0]) {\n                        newTiles[planetIndex] = planetTileNumber;\n                        currentRaces.shift();\n                    }\n                }\n            } else {\n                // Set home worlds to 0, races to be decided later\n                newTiles[planetIndex] = 0\n            }\n        }\n        \n        newTiles[0] = 18\n        \n        this.setState({\n            currentSeed: currentSeed\n        }, this.props.updateTiles(newTiles));\n    }\n    \n    getPlanetIndexesToPlace(currentSeed) {\n        let primary = [...boardData[this.state.currentNumberOfPlayers.toString()][this.state.currentBoardStyle]['primary_tiles']]\n        let secondary = [...boardData[this.state.currentNumberOfPlayers.toString()][this.state.currentBoardStyle]['secondary_tiles']]\n        let tertiary = [...boardData[this.state.currentNumberOfPlayers.toString()][this.state.currentBoardStyle]['tertiary_tiles']]\n        \n        // If shuffling, we need to shuffle primary, secondary, and tertiary indexes.\n        if (this.state.shuffleBoards) {\n            primary = this.shuffle(primary, currentSeed)\n            secondary = this.shuffle(secondary, currentSeed)\n            tertiary = this.shuffle(tertiary, currentSeed)\n        }\n        \n        // Return this list of planet tiles to populate\n        return primary.concat(secondary).concat(tertiary)\n    }\n    \n    getPossiblePlanets() {\n        let possiblePlanets = Array.from({length: 32}, (_, i) => i + 19)\n        let weights = {};\n        \n        switch (this.state.currentPickStyle) {\n            case \"random\":\n                // shuffle(possible_planets)\n                return possiblePlanets\n            case \"resource\":\n                weights = {\n                    \"resource\": 1.0,\n                    \"influence\": 0.1,\n                    \"planet_count\": 0.1,\n                    \"specialty\": 0.1,\n                    \"anomaly\": 0.1,\n                    \"wormhole\": 0.1\n                }\n                break;\n            case \"influence\":\n                weights = {\n                    \"resource\": 0.1,\n                    \"influence\": 1.0,\n                    \"planet_count\": 0.1,\n                    \"specialty\": 0.1,\n                    \"anomaly\": 0.1,\n                    \"wormhole\": 0.1\n                }\n                break;\n            case \"tas\":\n            default:\n                weights = {\n                    \"resource\": 1.0,\n                    \"influence\": 0.4,\n                    \"planet_count\": 0.4,\n                    \"specialty\": 0.6,\n                    \"anomaly\": 0.1,\n                    \"wormhole\": 0.1\n                }\n                break;\n        }\n        possiblePlanets = this.getWeightedPlanetList(possiblePlanets, weights)\n        return possiblePlanets\n    }\n    \n    getWeightedPlanetList(possiblePlanets, weights) {\n        let planetWeights = [];\n        for (let planetTileNumber in possiblePlanets) {\n            planetWeights.push([possiblePlanets[planetTileNumber], this.getWeight(possiblePlanets[planetTileNumber], weights)])\n        }\n        \n        // Sort the returned list by weight\n        planetWeights.sort(function(a, b) {\n            return b[1] - a[1];\n        })\n        \n        // Get just the planet number\n        let orderedPlanets = [];\n        for (let weightedPlanet in planetWeights) {\n            orderedPlanets.push(planetWeights[weightedPlanet][0]);\n        }\n        return orderedPlanets\n    }\n    \n    getWeight(planetTileNumber, weights) {\n        let total_weight = 0\n        let tile = tileData[planetTileNumber.toString()]\n        \n        for (let planetIndex in tile['planets']) {\n            let planet = tile['planets'][planetIndex]\n            total_weight += planet['resources'] * weights['resource']\n            total_weight += planet['influence'] * weights['influence']\n            total_weight += weights['planet_count']\n            if (planet['specialty']) {\n                total_weight += weights['specialty']\n            }\n        }\n        \n        if (tile['type'] === 'anomaly') {\n            total_weight += weights['anomaly']\n        }\n        if (tile['wormhole']) {\n            total_weight += weights['wormhole']\n        }\n        \n        return total_weight\n    }\n    \n    render() {\n        return (\n            <div id=\"options\" className={this.props.visible ? \"\" : \"d-none\"}>\n                <div className=\"title\">\n                    <h4 className=\"text-center\">Generation Options</h4>\n                </div>\n                <form id=\"generateForm\" onSubmit={this.generateBoard}>\n            \n                    <div className=\"custom-control custom-checkbox mb-3\">\n                        <input type=\"checkbox\" className=\"custom-control-input\" id=\"pokExpansion\" name=\"useProphecyOfKings\" checked={this.state.useProphecyOfKings} onChange={this.handleInputChange} />\n                        <label className=\"custom-control-label\" htmlFor=\"pokExpansion\">Use Prophecy of Kings Expansion</label>\n                    </div>\n            \n                    <div className=\"form-group\">\n                        <label htmlFor=\"playerCount\">Number of Players</label>\n                        <select className=\"form-control\" id=\"playerCount\" name=\"currentNumberOfPlayers\" value={this.state.currentNumberOfPlayers} onChange={this.updatePlayerCount}>\n                            {this.state.optionsPossible.numberOfPlayers.map((x) => <option key={x} value={x}>{x}</option>)}\n                        </select>\n                    </div>\n            \n                    <div className=\"form-group\">\n                        <label htmlFor=\"boardStyle\" className=\"d-flex\">Board Style\n                            <QuestionCircle className=\"icon\" />\n                        </label>\n                        <select className=\"form-control\" id=\"boardStyle\" name=\"currentBoardStyle\" value={this.state.currentBoardStyle} onChange={this.handleInputChange}>\n                            {this.state.currentBoardStyleOptions.map((x) => <option key={x} value={x}>{this.capitalize(x)}</option>)}\n                        </select>\n                    </div>\n            \n                    <div className=\"form-group\">\n                        <label htmlFor=\"pickStyle\" className=\"d-flex\">Picking Style\n                            <QuestionCircle className=\"icon\" />\n                        </label>\n                        <select className=\"form-control\" id=\"pickStyle\" name=\"currentPickStyle\" value={this.state.currentPickStyle} onChange={this.handleInputChange}>\n                            {this.state.optionsPossible.pickStyles.map((x) => <option key={x} value={x}>{this.capitalize(x)}</option>)}\n                        </select>\n                    </div>\n            \n            \n                    <div className=\"form-group\">\n                        <label htmlFor=\"seed\">Specific Seed</label>\n                        <input className=\"form-control\" id=\"seed\" name=\"updateSeed\" type=\"text\" placeholder=\"Enter a number to seed generation...\" value={this.state.currentSeed} onChange={this.updateSeed} />\n                    </div>\n            \n                    <div className=\"custom-control custom-checkbox mb-3 d-flex\">\n                        <input type=\"checkbox\" className=\"custom-control-input\" id=\"pickRaces\" name=\"pickRaces\" checked={this.state.pickRaces} onChange={this.handleInputChange} />\n                        <label className=\"custom-control-label\" htmlFor=\"pickRaces\">Pick Races for Players</label>\n                        <QuestionCircle className=\"icon\" />\n                    </div>\n                    <div className={\"ml-2 collapse \" + (this.state.pickRaces ? \"show\" : \"\")} id=\"pickRacesCollapse\">\n                        <div className=\"card card-body\">\n                            <button type=\"button\" className=\"btn btn-outline-primary mb-2\">Set Player Names</button>\n                    \n                            <button type=\"button\" className=\"btn btn-outline-primary mb-2\">Set Included Races</button>\n                    \n                            <div className=\"custom-control custom-checkbox d-flex\">\n                                <input type=\"checkbox\" className=\"custom-control-input\" id=\"pickMultipleRaces\" name=\"pickMultipleRaces\" checked={this.state.pickMultipleRaces} onChange={this.handleInputChange} />\n                                <label className=\"custom-control-label\" htmlFor=\"pickMultipleRaces\">Let Players Pick From Multiple</label>\n                                <QuestionCircle className=\"icon\" />\n                            </div>\n                        </div>\n                    </div>\n            \n                    <div className=\"custom-control custom-checkbox mb-3 d-flex\">\n                        <input type=\"checkbox\" className=\"custom-control-input\" id=\"shuffleBoards\" name=\"shuffleBoards\" checked={this.state.shuffleBoards} onChange={this.handleInputChange} />\n                        <label className=\"custom-control-label\" htmlFor=\"shuffleBoards\">Randomize Priorities Before Placement</label>\n                        <QuestionCircle className=\"icon\" />\n                    </div>\n            \n                    <button type=\"submit\" className=\"btn btn-primary\">Generate</button>\n                </form>\n            </div>\n        );\n    }\n}\nexport default MoreInfo;","import React from 'react';\nimport $ from 'jquery';\nimport './App.css';\nimport BootstrapScripts from \"./BootstrapScripts\";\nimport MoreInfo from \"./MoreInfo\";\nimport ExtraTiles from \"./ExtraTiles\";\nimport MainOverview from \"./MainOverview\";\nimport MainMap from \"./MainMap\";\nimport MapControls from \"./MapControls\";\nimport OptionsControls from \"./OptionsControls\";\nimport MapOptions from \"./MapOptions\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            isOptionsMenuShowing: true,\n            overviewVisible: true,\n            extraTilesVisible: false,\n            moreInfoVisible: false,\n            tiles: Array.apply(-1, Array(37)).fill(-1),\n            overlayVisible: false,\n            zoom: 1.0\n        };\n    \n        this.onPopState = this.onPopState.bind(this);\n        \n        this.updateTiles = this.updateTiles.bind(this);\n        this.validateTiles = this.validateTiles.bind(this);\n    \n        this.toggleOptionsMenu = this.toggleOptionsMenu.bind(this);\n        this.toggleOverlay = this.toggleOverlay.bind(this);\n        this.toggleMoreInfo = this.toggleMoreInfo.bind(this);\n        this.toggleExtraTiles = this.toggleExtraTiles.bind(this);\n        this.zoomPlusClick = this.zoomPlusClick.bind(this);\n        this.zoomMinusClick = this.zoomMinusClick.bind(this);\n        \n        this.drag = this.drag.bind(this);\n        this.drop = this.drop.bind(this);\n        this.dragEnter = this.dragEnter.bind(this);\n        this.dragLeave = this.dragLeave.bind(this);\n        this.allowDrop = this.allowDrop.bind(this);\n\n    }\n    \n    /* URL CONTROLS */\n    \n    componentDidMount() {\n        // Do something at the start\n        this.$mapContainer =  $(\"#mainContent\");\n        this.$tiMap = $(\"#tiMap\");\n\n        window.onpopstate = this.onPopState\n        this.onPopState()\n    }\n    componentWillUnmount() {\n        // As you leave the page\n        window.onpopstate = () => {}\n    }\n    // Whenever we go back, grab the tiles from the url bar, and set them as the current tiles\n    onPopState(event) {\n        let url = new URL(document.location);\n        let tiles = url.searchParams.get(\"tiles\");\n        \n        // Make sure the tiles parameter is set\n        const newTiles = tiles !== null ? this.validateTiles(tiles) : [];\n    \n        if (newTiles !== []) {\n            this.setState({\n                tiles: newTiles\n            }, this.drawMap );\n        }\n    };\n    \n    /* TILE CHANGING FUNCTIONS */\n    \n    updateTiles(newTiles) {\n        window.history.pushState({}, null, '/?tiles=' + newTiles.toString());\n        \n        this.setState({\n            tiles: newTiles\n        }, this.drawMap );\n    }\n    /**\n     * Attempts to validate a given tile string, by cleaning it up and turning it into an object.\n     * @returns {number[]} An array of numbers representing tiles.\n     */\n    validateTiles(tiles) {\n        // Remove any spaces\n        tiles = tiles.replaceAll(\" \", \"\");\n        \n        // Check if it has opening and closing brackets. If so, remove them\n        if (tiles.charAt(0) === \"[\") {\n            tiles = tiles.substring(1, tiles.length);\n        }\n        if (tiles.charAt(tiles.length - 1) === \"]\") {\n            tiles = tiles.substring(0, tiles.length-1);\n        }\n        \n        // Now split on commas\n        tiles = tiles.split(',').map( Number );\n        \n        return tiles;\n    }\n    \n    /* BUTTON ACTIONS */\n    \n    toggleOptionsMenu() {\n        // Set the css variable for options width\n        let optionsSize = this.state.isOptionsMenuShowing ? \"0px\" : \"400px\";\n        document.documentElement.style.setProperty('--options-width', optionsSize);\n        \n        // Update the map so that it correctly uses the new width\n        this.drawMap();\n        \n        // Update the state to the new view\n        this.setState(state => ({\n            isOptionsMenuShowing: !state.isOptionsMenuShowing\n        }));\n    }\n    toggleOverlay(event) {\n        this.setState({\n            overlayVisible: !this.state.overlayVisible,\n        }, this.drawMap );\n    }\n    toggleMoreInfo(event) {\n        let optionsSize = this.state.moreInfoVisible ? \"0px\" : \"400px\";\n        document.documentElement.style.setProperty('--more-info-width', optionsSize);\n        this.setState(state => ({\n            moreInfoVisible: !this.state.moreInfoVisible,\n        }));\n    }\n    toggleExtraTiles(event) {\n        for (let tileNum = 19; tileNum <= 50; tileNum++) {\n            if (!this.state.tiles.includes(tileNum)) {\n                $(\"#extra-\" + tileNum).show();\n            }\n        }\n        \n        let optionsSize = this.state.extraTilesVisible ? \"0px\" : \"150px\";\n        document.documentElement.style.setProperty('--extra-tiles-width', optionsSize);\n        this.setState(state => ({\n            extraTilesVisible: !this.state.extraTilesVisible,\n        }));\n    }\n    zoomPlusClick() {\n        if (this.state.zoom < 3) {\n            this.setState({\n                zoom: this.state.zoom + 0.75\n            }, this.drawMap );\n        }\n    }\n    zoomMinusClick() {\n        if (this.state.zoom > 1) {\n            this.setState({\n                zoom: this.state.zoom - 0.75\n            }, this.drawMap );\n        }\n    }\n\n    /* MAP GENERATION */\n\n    drawMap() {\n        // Check to see if there are any tiles to render currently\n        if (this.state.tiles.length <= 0) {\n            this.setState(state => ({\n                overviewVisible: true,\n                mapVisible: false,\n                mapControlsVisible: false,\n            }));\n            return;\n        } else {\n            this.setState(state => ({\n                overviewVisible: false,\n                mapVisible: true,\n                mapControlsVisible: true,\n            }));\n        }\n\n        // Configuration options for magic numbers\n        let mapPadding = 0; // The amount of pad spacing to apply to the map edges\n        let mapNumberTilesHeight = 7; // Every TI board is 7 tiles tall\n        let mapNumberTilesWidth = 5.5; // Every TI board is 5.5 tiles wide\n        let mapTileWidth = 364; // The width of every tile in the static folder\n        let mapTileHeight = 317;\n\n        // Get extra information about the map\n        let mapWidth = this.$mapContainer.width() - (2 * mapPadding); // Put padding on top/bottom of map\n        let mapHeight = this.$mapContainer.height() - (2 * mapPadding); // Put padding on either side of map\n        let tileWidth = Math.floor(mapWidth / mapNumberTilesWidth)\n        let tileHeight = Math.floor(mapHeight / mapNumberTilesHeight)\n\n        // Determine which will be our constraining factor, width or height?\n        let constraintWidth = Math.min(this.state.zoom * Math.min(tileWidth, Math.floor((mapTileWidth / mapTileHeight) * tileHeight)), mapTileWidth) // Prohibit over-zooming\n        let constraintHeight = Math.floor((mapTileHeight / mapTileWidth) * constraintWidth)\n\n        // Configure the map container to be this size\n        this.$tiMap.css(\"width\", constraintWidth * mapNumberTilesWidth)\n            .css(\"height\", constraintHeight * mapNumberTilesHeight);\n\n        /**\n         * Calculate offsets of the tiles in relation to Mecatol Rex (the center tile). This information\n         * is stored in an array of two value arrays. The two value arrays reperesent the margin left\n         * and margin right to offset the tile (based on size of of tiles).\n         * @param width The width (in pixels) of a single tile\n         * @param height The height (in pixels) of a single tile\n         * @returns {(number[]|(number)[])[]} an array of two value arrays.\n         */\n        function calculateOffsets(width, height) {\n            let leftWidth = -width\n            let topHeight = -height\n            let halfWidth = Math.ceil(leftWidth * 0.5)\n            let halfHeight = Math.ceil(topHeight * 0.5)\n            let treQuarWidth = Math.ceil(leftWidth * 0.75)\n\n            return [\n                [halfWidth, halfHeight],  // Mecatol Rex\n                // Inner ring\n                [halfWidth, halfHeight + topHeight],\n                [halfWidth - treQuarWidth, halfHeight + halfHeight],\n                [halfWidth - treQuarWidth, 0],\n                [halfWidth, halfHeight - topHeight],\n                [halfWidth + treQuarWidth, 0],\n                [halfWidth + treQuarWidth, halfHeight + halfHeight],\n                // Middle ring\n                [halfWidth, halfHeight + topHeight + topHeight],\n                [halfWidth - treQuarWidth, halfHeight + topHeight + halfHeight],\n                [halfWidth - leftWidth - halfWidth, halfHeight + topHeight],\n                [halfWidth - leftWidth - halfWidth, halfHeight],\n                [halfWidth - leftWidth - halfWidth, halfHeight - topHeight],\n                [halfWidth - treQuarWidth, halfHeight - topHeight - halfHeight],\n                [halfWidth, halfHeight - topHeight - topHeight],\n                [halfWidth + treQuarWidth, halfHeight - topHeight - halfHeight],\n                [halfWidth + leftWidth + halfWidth, halfHeight - topHeight],\n                [halfWidth + leftWidth + halfWidth, halfHeight],\n                [halfWidth + leftWidth + halfWidth, halfHeight + topHeight],\n                [halfWidth + treQuarWidth, halfHeight + topHeight + halfHeight],\n                // Outer Ring\n                [halfWidth, halfHeight + topHeight + topHeight + topHeight],\n                [halfWidth - treQuarWidth, halfHeight + topHeight + topHeight + halfHeight],\n                [halfWidth - leftWidth - halfWidth, halfHeight + topHeight + topHeight],\n                [halfWidth - treQuarWidth - leftWidth - halfWidth, halfHeight + topHeight + halfHeight],\n                [halfWidth - treQuarWidth - leftWidth - halfWidth, halfHeight + halfHeight],\n                [halfWidth - treQuarWidth - leftWidth - halfWidth, halfHeight - halfHeight],\n                [halfWidth - treQuarWidth - leftWidth - halfWidth, halfHeight - topHeight - halfHeight],\n                [halfWidth - leftWidth - halfWidth, halfHeight - topHeight - topHeight],\n                [halfWidth - treQuarWidth, halfHeight - topHeight - topHeight - halfHeight],\n                [halfWidth, halfHeight - topHeight - topHeight - topHeight],\n                [halfWidth + treQuarWidth, halfHeight - topHeight - topHeight - halfHeight],\n                [halfWidth + leftWidth + halfWidth, halfHeight - topHeight - topHeight],\n                [halfWidth + treQuarWidth + leftWidth + halfWidth, halfHeight - topHeight - halfHeight],\n                [halfWidth + treQuarWidth + leftWidth + halfWidth, halfHeight - halfHeight],\n                [halfWidth + treQuarWidth + leftWidth + halfWidth, halfHeight + halfHeight],\n                [halfWidth + treQuarWidth + leftWidth + halfWidth, halfHeight + topHeight + halfHeight],\n                [halfWidth + leftWidth + halfWidth, halfHeight + topHeight + topHeight],\n                [halfWidth + treQuarWidth, halfHeight + topHeight + topHeight + halfHeight]\n            ]\n        }\n\n        // Calculate the offset values for margin left and margin top per tile\n        let offsets = calculateOffsets(constraintWidth, constraintHeight)\n\n        // Loop over tiles to assign various values to them\n        for (let tileNumber = 0; tileNumber < offsets.length; tileNumber++) {\n            let tile = $(\"#tile-\" + tileNumber);\n            let numOverlay = $(\"#num-\" + tileNumber);\n            let underlay = $(\"#underlay-\" + tileNumber);\n            if (this.state.tiles[tileNumber] !== -1) {\n                tile.attr(\"width\", constraintWidth)\n                    .attr(\"height\", constraintHeight)\n                    .css(\"margin-left\", offsets[tileNumber][0])\n                    .css(\"margin-top\", offsets[tileNumber][1])\n                    .css(\"left\", (mapNumberTilesWidth / 2) * constraintWidth)\n                    .css(\"top\", (mapNumberTilesHeight / 2) * constraintHeight)\n                tile.show()\n            } else {\n                tile.hide()\n            }\n\n            numOverlay.css(\"width\", constraintWidth)\n                .css(\"height\", constraintHeight)\n                .css(\"line-height\", constraintHeight + \"px\")\n                .css(\"margin-left\", offsets[tileNumber][0])\n                .css(\"margin-top\", offsets[tileNumber][1])\n                .css(\"left\", (mapNumberTilesWidth / 2) * constraintWidth)\n                .css(\"top\", (mapNumberTilesHeight / 2) * constraintHeight)\n                .css(\"display\", \"block\")\n                .html(this.state.tiles[tileNumber])\n\n            underlay.css(\"width\", constraintWidth + 6)\n                .css(\"height\", constraintHeight + 6)\n                .css(\"margin-left\", offsets[tileNumber][0]-3)\n                .css(\"margin-top\", offsets[tileNumber][1]-3)\n                .css(\"left\", (mapNumberTilesWidth / 2) * constraintWidth)\n                .css(\"top\", (mapNumberTilesHeight / 2) * constraintHeight)\n\n            if (!this.state.overlayVisible || this.state.tiles[tileNumber] === 0 || this.state.tiles[tileNumber] === -1) {\n                numOverlay.hide()\n            } else {\n                numOverlay.show()\n            }\n        }\n\n        // Clear any css classes on the map\n        this.$tiMap.removeClass(\"center-map\")\n        this.$tiMap.removeClass(\"center-map-vertical\")\n        this.$tiMap.removeClass(\"center-map-horizontal\")\n\n        // Check to see if we are zoomed, or map is always screen size.\n        if (this.state.zoom > 1.0) {\n            // Check to see if we should still be horizontally or vertically centered\n            if ((constraintWidth * mapNumberTilesWidth) < mapWidth) {\n                this.$tiMap.addClass(\"center-map-horizontal\")\n            } else if ((constraintHeight * mapNumberTilesHeight) < mapHeight) {\n                this.$tiMap.addClass(\"center-map-vertical\")\n            } else {\n                // Use default map values\n            }\n\n            // Center Mecatol Rex on the screen\n            $(\"#tile-0\").get(0).scrollIntoView({behavior: \"smooth\", block:\"center\", inline: \"center\"});\n        } else {\n            // No need to move the map around, just center it on the screen\n            this.$tiMap.addClass(\"center-map\")\n        }\n    }\n    \n    \n    // Drag and drop related functions, modified from https://www.w3schools.com/html/html5_draganddrop.asp\n    allowDrop(ev) {\n        ev.preventDefault();\n    }\n    dragEnter(ev){\n        let targetSelector = $(\"#\" + ev.target.id);\n        let targetUnderlay = $(\"#underlay-\" + ev.target.id.split(\"-\")[1]);\n        targetSelector.addClass(\"tile-target\")\n        targetUnderlay.addClass(\"underlay-target\")\n    }\n    dragLeave(ev){\n        let targetSelector = $(\"#\" + ev.target.id);\n        let targetUnderlay = $(\"#underlay-\" + ev.target.id.split(\"-\")[1]);\n        targetSelector.removeClass(\"tile-target\")\n        targetUnderlay.removeClass(\"underlay-target\")\n    }\n    drag(ev) {\n        ev.dataTransfer.setData(\"text\", ev.target.id);\n    }\n    drop(ev) {\n        ev.preventDefault();\n        // Get the associated ids\n        let fromId = ev.dataTransfer.getData(\"text\");\n        let targetId = ev.target.id;\n        \n        let targetSelector = $(\"#\" + targetId);\n        let fromSelector = $(\"#\" + fromId);\n        let targetUnderlay = $(\"#underlay-\" + ev.target.id.split(\"-\")[1]);\n        \n        // Temporarily store the target's source, and swap\n        let targetSource = targetSelector.attr('src');\n        targetSelector.attr('src', fromSelector.attr('src'));\n        fromSelector.attr('src', targetSource);\n        \n        let targetType = targetId.split(\"-\")[0];\n        let fromType = fromId.split(\"-\")[0];\n        let targetSecond = targetId.split(\"-\")[1];\n        let fromSecond = fromId.split(\"-\")[1];\n    \n        let tilesCopy = [...this.state.tiles];\n        if (fromType === \"tile\" && targetType === \"tile\") {\n            // Both are on the main map, so simply swap their positions in the tile array\n            let temp = tilesCopy[targetSecond];\n            tilesCopy[targetSecond] = tilesCopy[fromSecond];\n            tilesCopy[fromSecond] = temp;\n        } else if (fromType === \"extra\" && targetType === \"tile\") {\n            // Moving from the extra tiles onto the main map\n            let temp = tilesCopy[targetSecond];\n            tilesCopy[targetSecond] = fromSecond;\n            // Update the id of the tile\n            fromSelector.attr('id', 'extra-' + temp)\n        } else if (fromType === \"tile\" && targetType === \"extra\") {\n            // Moving from the main map to the tiles\n            let temp = tilesCopy[fromSecond];\n            tilesCopy[fromSecond] = targetSecond;\n            // Update the id of the tile\n            targetSelector.attr('id', 'extra-' + temp)\n        } else {\n            // Swapping extra tiles... Just update the ids\n            targetSelector.attr('id', 'extra-' + fromSecond)\n            fromSelector.attr('id', 'extra-' + targetSecond)\n        }\n        \n        // Clear the target classes\n        targetSelector.removeClass(\"tile-target\");\n        targetUnderlay.removeClass(\"underlay-target\");\n        \n        // Update the tile string\n        this.updateTiles(tilesCopy);\n    }\n    \n\n    render() {\n        return (\n            <div>\n                    \n                <OptionsControls visible={this.state.isOptionsMenuShowing} toggleOptions={this.toggleOptionsMenu} />\n                \n                <div id=\"mainContent\" className=\"justify-content-center align-items-center\">\n                    <MainOverview visible={this.state.overviewVisible}/>\n                    \n                    <MainMap visible={this.state.mapVisible} overlayVisible={this.state.overlayVisible} tiles={this.state.tiles}\n                             drag={this.drag} drop={this.drop} dragEnter={this.dragEnter} dragLeave={this.dragLeave} allowDrop={this.allowDrop}/>\n                    \n                    {/* TODO can these controls be moved into MainMap? */}\n                    <MapControls visible={this.state.mapControlsVisible} toggleOverlay={this.toggleOverlay}\n                                 toggleMoreInfo={this.toggleMoreInfo} toggleExtraTiles={this.toggleExtraTiles}\n                                 zoomPlus={this.zoomPlusClick} zoomMinus={this.zoomMinusClick} />\n                </div>\n                \n                <ExtraTiles visible={this.state.extraTilesVisible} overlayVisible={this.state.overlayVisible} updateTiles={this.updateTiles}\n                            drag={this.drag} drop={this.drop} dragEnter={this.dragEnter} dragLeave={this.dragLeave} allowDrop={this.allowDrop}/>\n                \n                <MoreInfo visible={this.state.moreInfoVisible}/>\n                \n                <MapOptions visible={this.state.isOptionsMenuShowing} updateTiles={this.updateTiles} />\n                \n            \n                <BootstrapScripts />\n            </div>\n        );\n    }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}