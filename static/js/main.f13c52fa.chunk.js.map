{"version":3,"sources":["helpers/BootstrapScripts.js","panels/icons/influence.png","panels/icons/planet.png","panels/icons/resource.png","panels/icons/specialty-biotic.png","panels/icons/specialty-warfare.png","panels/icons/specialty-propulsion.png","panels/icons/specialty-cybernetic.png","panels/icons/trait-cultural.png","panels/icons/trait-hazardous.png","panels/icons/trait-industrial.png","panels/MoreInfo.js","panels/ExtraTiles.js","overview/MainOverview.js","map/MainMap.js","map/MapControls.js","options/OptionsControls.js","options/HelpModal.js","options/SetPlayerNameModal.js","options/SetRacesModal.js","options/MapOptions.js","App.js","helpers/Helpers.js","reportWebVitals.js","index.js"],"names":["BootstrapScripts","id","src","integrity","crossOrigin","React","Component","MoreInfo","props","getAdjacent","bind","tileNumber","adjacencies","adjacencyData","planets","resources","influence","specialties","traits","adjacentIndex","adjacentTileNumber","adjacentTile","this","tiles","planetIndex","tileData","all","planet","moreInfoByPlayer","adjacentInfo","playerName","currentPlayerNames","length","push","scope","className","Array","cultural","map","e","i","traitCultural","alt","hazardous","traitHazardous","industrial","traitIndustrial","biotic","specialtyBiotic","warfare","specialtyWarfare","propulsion","specialtyPropulsion","cybernetic","specialtyCybernetic","visible","resource","ExtraTiles","underlayStyle","width","height","position","top","left","tileStyle","display","margin","systemNumbers","concat","blue","red","useProphecyOfKings","pokBlue","pokRed","tileObjects","systemNumber","isNaN","Number","undefined","split","window","location","origin","pathname","draggable","onDragStart","drag","onDrop","drop","onDragOver","allowDrop","onDragEnter","dragEnter","onDragLeave","dragLeave","style","xmlns","viewBox","fill","points","MainOverview","transform","href","MainMap","mapTiles","boardData","pokSize","MapControls","place","effect","onClick","zoomPlus","zoomMinus","toggleOverlay","overlayVisible","data-tip","toggleExtraTiles","extraTilesVisible","toggleMoreInfo","moreInfoVisible","copyTilesToClipboard","toggleBackground","OptionsControls","type","isMobileView","toggleOptions","HelpModal","Modal","show","onHide","hideModal","Header","closeButton","Title","title","Body","dangerouslySetInnerHTML","__html","content","SetPlayerNameModal","x","htmlFor","name","placeholder","defaultValue","onChange","handleNameChange","SetRacesModal","visibleRaces","races","pokRaces","raceName","raceIndex","replace","checked","currentRaces","indexOf","handleRacesChange","MapOptions","startingValues","numberOfPlayers","pokNumberOfPlayers","boardStyles","2","Object","keys","styles","key","3","4","5","6","filter","boardStylesPok","7","8","pickStyles","placementStyles","raceData","homeworlds","pokHomeworlds","state","optionsPossible","currentNumberOfPlayers","currentNumberOfPlayersOptions","currentBoardStyleOptions","currentBoardStyle","currentPickStyle","currentPlacementStyle","currentSeed","userSetSeed","pickRaces","pickMultipleRaces","shuffleBoards","reversePlacementOrder","generated","pickRacesHelp","boardStyleHelp","pickStyleHelp","placementStyleHelp","setPlayerNamesHelp","setRacesHelp","pickMultipleRacesHelp","shufflePriorityHelp","reversePlacementOrderHelp","resourceWeight","influenceWeight","planetCountWeight","specialtyWeight","anomalyWeight","wormholeWeight","shuffleThreshold","handleInputChange","updatePok","updatePlayerCount","updateBoardStyle","updateSeed","ensureAnomalies","ensureWormholesForType","updateBoardStyleOptions","generateBoard","getNewTileSet","togglePickRacesHelp","toggleBoardStyleHelp","togglePickStyleHelp","togglePlacementStyleHelp","toggleSetPlayerNamesHelp","toggleSetRacesHelp","togglePickMultipleRacesHelp","toggleShufflePriorityHelp","toggleReversePlacementOrderHelp","event","target","value","setState","nameIndex","parseInt","substring","newPlayerNames","race","newCurrentRaces","indexToToggle","splice","updateRaces","boardOptions","toggleProphecyOfKings","newSeed","str","charAt","toUpperCase","slice","array","t","m","seed","valueOf","Math","floor","random","sin","preventDefault","updateTiles","systemIndexes","getNewTilesToPlace","newSystems","getNewSystemsToPlace","newTiles","blankMap","placeHyperlanes","placeHomeSystems","shift","checkAdjacencies","primary","toString","secondary","tertiary","shuffle","home","newPrimary","homeSystem","adjacentSystems","adjacentSystem","numberOfSystems","allBlues","allReds","blueTileRatio","redTileRatio","redsToPlace","round","bluesToPlace","allAlphaWormholes","alphaWormholes","pokAlphaWormholes","allBetaWormholes","betaWormholes","pokBetaWormholes","weights","getWeightedPlanetList","index","hyperlaneData","raceToHomeSystemMap","allTrueAnomalies","anomaly","pokAnomaly","anomalyTileNumber","adjacentTiles","adjacentAnomalies","swapped","blankReds","blankRed","pokBlankRed","possibleBlanks","blankRedTileNumber","swappable","console","log","alphaWormhole","alphaWormholeTileNumber","adjacentTileNumbers","adjacentWormhole","el","adjacentTilesNumbers","betaWormhole","betaWormholeTileNumber","possibleTiles","planetWormholes","allWormholes","oppositeWormholes","allAnomalyList","unusedWormholes","usedWormholes","wormholeIndex","excludedTiles","reverseReplace","numPlanetsToPlace","numAnomaliesLeftToBePlaced","possibleAnomalies","anomalyIndex","numTilesToReplace","replacementTiles","reverseBeforeAndAfter","reverse","currentTileIndex","tileOfInterest","possiblePlanets","planetWeights","planetTileNumber","getWeight","sort","a","b","currentIndex","currentHighValue","currentSetToShuffle","postPossiblePlanets","planetWeight","orderedPlanets","weightedPlanet","total_weight","tile","onSubmit","capitalize","App","isOptionsMenuShowing","overviewVisible","backgroundAnimated","zoom","mobileBreakpoint","drawMap","onPopState","checkResize","validateTiles","removeTrailing","toggleOptionsMenu","showExtraTiles","zoomPlusClick","zoomMinusClick","$mapContainer","$","$tiMap","onpopstate","onresize","innerWidth","document","documentElement","setProperty","URL","searchParams","get","history","pushState","newOptionsMenuState","pop","replaceAll","tileIndex","parsed","optionsSize","justTriggeredTiles","justTriggeredInfo","systemSelector","includes","hide","tileString","navigator","clipboard","writeText","css","mapVisible","mapControlsVisible","mapNumberTilesHeight","mapNumberTilesWidth","mapWidth","mapHeight","tileWidth","tileHeight","constraintWidth","min","constraintHeight","offsets","leftWidth","topHeight","halfWidth","ceil","halfHeight","treQuarWidth","calculateOffsets","currentPlayerNumber","numOverlay","underlay","attr","degrees","html","removeClass","addClass","scrollIntoView","behavior","block","inline","ev","targetSelector","targetUnderlay","dataTransfer","setData","fromId","getData","targetId","fromSelector","targetSource","targetType","fromType","targetSecond","fromSecond","tilesCopy","temp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f13c52fa.chunk.js","sourcesContent":["import React from \"react\";\n\n/**\n * Scripts for bootstrap and jquery integration.\n */\nclass BootstrapScripts extends React.Component {\n    render() {\n        return (\n            <div id=\"bootstrapScripts\">\n                <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"\n                         integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\"\n                         crossOrigin=\"anonymous\" />\n                <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"\n                        integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\"\n                        crossOrigin=\"anonymous\" />\n                <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"\n                        integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\"\n                        crossOrigin=\"anonymous\" />\n            </div>\n        );\n    }\n}\nexport default BootstrapScripts;","export default __webpack_public_path__ + \"static/media/influence.d1f8e76f.png\";","export default __webpack_public_path__ + \"static/media/planet.7203e647.png\";","export default __webpack_public_path__ + \"static/media/resource.4e66e6d4.png\";","export default __webpack_public_path__ + \"static/media/specialty-biotic.683b8aa5.png\";","export default __webpack_public_path__ + \"static/media/specialty-warfare.222674a3.png\";","export default __webpack_public_path__ + \"static/media/specialty-propulsion.767d15a0.png\";","export default __webpack_public_path__ + \"static/media/specialty-cybernetic.16601911.png\";","export default __webpack_public_path__ + \"static/media/trait-cultural.800b2f56.png\";","export default __webpack_public_path__ + \"static/media/trait-hazardous.64956721.png\";","export default __webpack_public_path__ + \"static/media/trait-industrial.37a31434.png\";","import React from \"react\";\nimport adjacencyData from \"../data/adjacencyData.json\";\nimport tileData from \"../data/tileData.json\";\n\nimport influence from './icons/influence.png';\nimport planet from './icons/planet.png';\nimport resource from './icons/resource.png';\nimport specialtyBiotic from './icons/specialty-biotic.png';\nimport specialtyWarfare from './icons/specialty-warfare.png';\nimport specialtyPropulsion from './icons/specialty-propulsion.png';\nimport specialtyCybernetic from './icons/specialty-cybernetic.png';\nimport traitCultural from './icons/trait-cultural.png';\nimport traitHazardous from './icons/trait-hazardous.png';\nimport traitIndustrial from './icons/trait-industrial.png';\n\nclass MoreInfo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.getAdjacent = this.getAdjacent.bind(this);\n    }\n\n    getAdjacent(tileNumber) {\n        // TODO rewrite this to calculate adjacencies, not reference them from a data file\n        let adjacencies = [...adjacencyData[tileNumber]];\n        // adjacencies.push(tileNumber);  // Add back in if we want to add the home system to these calcs\n\n        let planets = 0;\n        let resources = 0;\n        let influence = 0;\n        let specialties = {\n            \"biotic\": 0,\n            \"warfare\": 0,\n            \"propulsion\": 0,\n            \"cybernetic\": 0\n        };\n        let traits = {\n            \"cultural\": 0,\n            \"industrial\": 0,\n            \"hazardous\": 0\n        }\n\n        for (let adjacentIndex in adjacencies) {\n            let adjacentTileNumber = adjacencies[adjacentIndex]\n            let adjacentTile = this.props.tiles[adjacentTileNumber]\n            if (adjacentTile > 0) {\n                for (let planetIndex in tileData.all[adjacentTile][\"planets\"]) {\n                    let planet = tileData.all[adjacentTile][\"planets\"][planetIndex];\n                    planets += 1;\n                    resources += planet[\"resources\"];\n                    influence += planet[\"influence\"];\n                    specialties[planet[\"specialty\"]] += 1;\n                    traits[planet[\"trait\"]] += 1;\n                }\n            }\n        }\n        return {\n            \"planets\": planets,\n            \"resources\": resources,\n            \"influence\": influence,\n            \"specialties\": specialties,\n            \"traits\": traits,\n        }\n    }\n\n    render() {\n        let moreInfoByPlayer = [];\n\n        for (let tileNumber in this.props.tiles) {\n            if ((this.props.tiles[tileNumber] >= 0 && this.props.tiles[tileNumber] < 18) ||\n                (this.props.tiles[tileNumber] >= 51 && this.props.tiles[tileNumber] < 58)) {\n                // This is a homeworld, so gather its info\n                let adjacentInfo = this.getAdjacent(tileNumber);\n                let playerName = this.props.currentPlayerNames[moreInfoByPlayer.length];\n                if (playerName === \"\") {\n                    playerName = \"P\" + (moreInfoByPlayer.length + 1);\n                }\n                moreInfoByPlayer.push(\n                    <tr key={\"more-info-\" + playerName} >\n                        <th scope=\"row\">{playerName}</th>\n                        <td>{adjacentInfo.resources}</td>\n                        <td>{adjacentInfo.influence}</td>\n                        <td>\n                            <span className={\"d-flex\"}>\n                                {[...Array(adjacentInfo.traits.cultural)].map((e, i) => <img key={playerName + \"-cultural-\" + i} className={\"icon\"} src={traitCultural} alt={\"C\"}/>)}\n                                {[...Array(adjacentInfo.traits.hazardous)].map((e, i) => <img key={playerName + \"-hazardous-\" + i} className={\"icon\"} src={traitHazardous} alt={\"H\"}/>)}\n                                {[...Array(adjacentInfo.traits.industrial)].map((e, i) => <img key={playerName + \"-industrial-\" + i} className={\"icon\"} src={traitIndustrial} alt={\"I\"}/>)}\n                            </span>\n                        </td>\n                        <td>\n                            <span className={\"d-flex\"}>\n                                {[...Array(adjacentInfo.specialties.biotic)].map((e, i) => <img key={playerName + \"-biotic-\" + i} className={\"icon\"} src={specialtyBiotic} alt={\"B\"}/>)}\n                                {[...Array(adjacentInfo.specialties.warfare)].map((e, i) => <img key={playerName + \"-warfare-\" + i} className={\"icon\"} src={specialtyWarfare} alt={\"W\"}/>)}\n                                {[...Array(adjacentInfo.specialties.propulsion)].map((e, i) => <img key={playerName + \"-propulsion-\" + i} className={\"icon\"} src={specialtyPropulsion} alt={\"P\"}/>)}\n                                {[...Array(adjacentInfo.specialties.cybernetic)].map((e, i) => <img key={playerName + \"-cybernetic-\" + i} className={\"icon\"} src={specialtyCybernetic} alt={\"C\"}/>)}\n                            </span>\n                        </td>\n                    </tr>\n                );\n            }\n\n        }\n        return (\n            <div id=\"moreInfoContainer\" className={this.props.visible ? \"\" : \"d-none\"}>\n                <div className=\"title\">\n                    <h4 id=\"infoTitle\" className=\"text-center\">Assets Adjacent to Home System</h4>\n                </div>\n                <div id=\"moreInfo\" className=\"\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\"></th>\n                                <th scope=\"col\"><img className={\"icon\"} src={resource} alt={\"Res.\"}/></th>\n                                <th scope=\"col\"><img className={\"icon\"} src={influence} alt={\"Inf.\"}/></th>\n                                <th scope=\"col\"><img className={\"icon\"} src={planet} alt={\"Planets\"}/></th>\n                                <th scope=\"col\"><img className={\"icon\"} src={specialtyWarfare} alt={\"Tech\"}/></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {moreInfoByPlayer}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}\nexport default MoreInfo;","import React from \"react\";\nimport tileData from \"../data/tileData.json\";\n\nclass ExtraTiles extends React.Component {\n    constructor(props) {\n        super(props);\n        this.underlayStyle = {\n            width: \"210px\",\n            height: \"185px\",\n            position: \"absolute\",\n            top: \"0\",\n            left: \"0\",\n        }\n        this.tileStyle = {\n            display: \"none\",\n            margin: \"5px\",\n            position: \"relative\",\n        }\n    }\n    \n    render() {\n        let systemNumbers = [];\n        systemNumbers = systemNumbers.concat(tileData.blue).concat(tileData.red);\n        if (this.props.useProphecyOfKings) {\n            systemNumbers = systemNumbers.concat(tileData.pokBlue).concat(tileData.pokRed);\n        }\n\n        const tileObjects = []\n        for (let systemNumber of systemNumbers) {\n\n            // Handle hyperlanes differently. Pull out their tile number, separate from their rotation angle\n            if (isNaN(Number(systemNumber)) && systemNumber !== undefined) {\n                systemNumber = systemNumber.split(\"-\")[0]\n            }\n\n            tileObjects.push(\n                <div key={\"extra-tile-wrapper-\" + systemNumber} className=\"tile-wrapper\">\n                    {/*<span id={\"num-\" + tileNumber} className={\"overlay\" + (this.props.overlayVisible ? \"\" : \" d-none\")}>{tileNumber}</span>*/}\n                    <img id={\"extra-\" + systemNumber}\n                         width=\"200px\"\n                         height=\"175px\"\n                         className=\"tile\"\n                         src={window.location.origin + window.location.pathname + \"/tiles/ST_\" + systemNumber + \".png\"}\n                         draggable=\"true\" onDragStart={this.props.drag} onDrop={this.props.drop}\n                         onDragOver={this.props.allowDrop} onDragEnter={this.props.dragEnter}\n                         onDragLeave={this.props.dragLeave}\n                         alt=\"\"\n                         style={this.tileStyle}\n                    />\n                    <svg id={\"extra-underlay-\" + systemNumber} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 359.35 311.21\" className=\"underlay\" fill=\"currentColor\"\n                         style={this.underlayStyle}>\n                        <polygon points=\"269.51 0 89.84 0 0 155.6 89.84 311.2 269.51 311.2 359.35 155.6 269.51 0\" />\n                    </svg>\n                </div>\n            )\n        }\n    \n        return (\n            <div id=\"extraTilesContainer\" className={this.props.visible ? \"\" : \"d-none\"}>\n                <div className=\"title\">\n                    <h4 id=\"extraTitle\" className=\"text-center\">Extra Tiles</h4>\n                </div>\n                <div id=\"extraTiles\" className=\"\">\n                    {tileObjects}\n                </div>\n            </div>\n        );\n    }\n}\nexport default ExtraTiles;","import React from \"react\";\nimport {ClipboardPlus} from \"react-bootstrap-icons\";\n\nclass MainOverview extends React.Component {\n    render() {\n        return (\n            <div id=\"overview\" className={\"flex-column justify-content-center\" + (this.props.visible ? \" d-flex\" : \" d-none\")}>\n                <div className=\"title\">\n                    <h1>TI4 Map Generator</h1>\n                </div>\n\n                <div className={\"overview-panel mb-4 mt-4 ml-auto mr-auto\"}>\n                    <h4 className={\"m-3\"}>Customize Your Next Twilight Imperium 4 Map!</h4>\n                    <div className={\"d-flex\"}>\n                        <p className={\"text-left p-3\"}>\n                            Use this tool to generate a fresh new Twilight Imperium map for the next game you play. The\n                            goal of this tool is to cut down the game setup time by letting you generate a fair and balanced map\n                            before you play, so that you are not spending a half-hour picking and placing tiles, or getting a bad draw of tiles. Get started\n                            by customizing settings via the generation panel on the right, and hit \"Generate\" to see a new\n                            map.\n                        </p>\n                    </div>\n                </div>\n\n                <div className={\"overview-panel mb-4 mt-4 ml-auto mr-auto\"}>\n                    <h4 className={\"m-3\"}>Drag and Drop for Further Customization</h4>\n                    <div className={\"d-flex\"}>\n                        <p className={\"text-left p-3\"}>\n                            Unhappy with a wormhole next to a home world? Are two asteroids next to one another? Don't like\n                            a certain system? Just swap it with another tile by clicking and dragging one tile over the top of\n                            another tile.\n                        </p>\n                    </div>\n                </div>\n\n                <div className={\"overview-panel mb-4 mt-4 ml-auto mr-auto\"}>\n                    <h4 className={\"m-3\"}>New Prophecy of Kings Expansion Content</h4>\n                    <div className={\"d-flex\"}>\n                        <p className={\"text-left p-3\"}>\n                            The new expansion content for TI4, called Prophecy of Kings, was recently released. Check out\n                            the new tiles as well as the 7 and 8 player maps. Hyperlanes which connect systems together\n                            were also added, and are included on some non expansion board styles.\n                        </p>\n                    </div>\n                </div>\n\n                <div className={\"overview-panel mb-4 mt-4 ml-auto mr-auto\"}>\n                    <h4 className={\"m-3\"}>Share With Your Friends</h4>\n                    <div className={\"d-flex\"}>\n                        <p className={\"text-left p-3\"}>\n                            After you have made your custom map, just copy the url and send it to your friends! Or, if\n                            you are using Table Top Simulator (TTS), press the \"Copy to Clipboard\" button (\n                            <ClipboardPlus className=\"icon d-inline\" />\n                             ) to get the full\n                            map string for the currently displayed map.\n                        </p>\n                    </div>\n                </div>\n\n                <div className={\"overview-panel mb-4 mt-4 ml-auto mr-auto\"}>\n                    <h4 className={\"m-3\"}>Use Any Tile You Want</h4>\n                    <div className={\"d-flex\"}>\n                        <p className={\"text-left p-3\"}>\n                            Do you really like the gravity rift anomaly and not see it on the board? Click the \"Show unused\n                            tiles\" button (\n                            <svg id=\"showExtraTilesSvg\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 359.35 311.21\" className=\"icon d-inline\" fill=\"currentColor\">\n                                <polygon id=\"showExtraTilesPoly\" points=\"269.51 0 89.84 0 0 155.6 89.84 311.2 269.51 311.2 359.35 155.6 269.51 0\" />\n                            </svg>\n                            ) to see any tiles not currently being used in the map, and drag and drop them to add them!\n                        </p>\n                    </div>\n                </div>\n\n                <div className={\"overview-panel mb-4 mt-4 ml-auto mr-auto\"}>\n                    <h4 className={\"m-3\"}>Easy Setup On Game Day</h4>\n                    <div className={\"d-flex\"}>\n                        <p className={\"text-left p-3\"}>\n                            It can be hard to know which tile is which when it is time to setup your new board. Click the\n                            \"Toggle Tile Number Overlay\" (\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 194.78 169.62\" className=\"icon d-inline\" fill=\"currentColor\">\n                                <polygon className=\"overlay-cls-1\" points=\"148.03 4 51.81 4 4.61 86.92 52.02 169.84 148.03 169.84 195.03 86.92 148.03 4\"/>\n                                <text className=\"overlay-cls-2\" transform=\"translate(27.09 132.03)\">18</text>\n                            </svg>\n                            )\n                            button to see the numbers of every tile on your custom board.\n                        </p>\n                    </div>\n                </div>\n\n                <div className={\"overview-panel mb-4 mt-4 ml-auto mr-auto\"}>\n                    <h4 className={\"m-3\"}>Have Any Ideas On Improvements?</h4>\n                    <div className={\"d-flex\"}>\n                        <p className={\"text-left p-3\"}>\n                            I am always open to feedback and suggestions! You can see\n                            the <a href=\"https://github.com/KeeganW/ti4/issues\">current set of issues</a> with the generator, or if\n                            you don't see your issue or want to suggest a new feature, add\n                            it <a href=\"https://github.com/KeeganW/ti4/issues/new\">to my issue tracker</a>. Thanks for checking\n                            this out!\n                        </p>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default MainOverview;","import React from \"react\";\nimport boardData from \"../data/boardData.json\";\n\nclass MainMap extends React.Component {\n    render() {\n        const mapTiles = []\n\n        // Loop over 0 to pok board size, and add in the tile objects to be displayed\n        for (let tileNumber = 0; tileNumber < boardData.pokSize; tileNumber++) {\n            let systemNumber = this.props.tiles[tileNumber]\n\n            // Handle hyperlanes differently. Pull out their tile number, separate from their rotation angle\n            if (isNaN(Number(systemNumber)) && systemNumber !== undefined) {\n                systemNumber = this.props.tiles[tileNumber].split(\"-\")[0]\n            }\n\n            // Add the tile to the array of tiles to be displayed, if they are valid tiles\n            if (systemNumber !== -1 && systemNumber !== undefined) {\n                mapTiles.push(\n                    <div key={\"tile-wrapper-\" + tileNumber} className=\"tile-wrapper\">\n                        <span id={\"rotate-left-\" + tileNumber} className={\"d-none\"}></span>\n                        <span id={\"lock-\" + tileNumber} className={\"d-none\"}></span>\n                        <span id={\"rotate-right-\" + tileNumber} className={\"d-none\"}></span>\n                        <span id={\"number-\" + tileNumber} className={\"overlay\"}>{tileNumber}</span>\n                        <img id={\"tile-\" + tileNumber}\n                             className=\"tile\"\n                             src={window.location.origin + window.location.pathname + \"/tiles/ST_\" + systemNumber + \".png\"}\n                             draggable=\"true\" onDragStart={this.props.drag} onDrop={this.props.drop} onDragOver={this.props.allowDrop} onDragEnter={this.props.dragEnter} onDragLeave={this.props.dragLeave}\n                             alt={\"Twilight Imperium 4 Tile Number \" + tileNumber + \" and System Number \" + systemNumber + \".\"}\n                        />\n                        <svg id={\"underlay-\" + tileNumber} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 359.35 311.21\" className=\"underlay\" fill=\"currentColor\">\n                            <polygon points=\"269.51 0 89.84 0 0 155.6 89.84 311.2 269.51 311.2 359.35 155.6 269.51 0\" />\n                        </svg>\n                        <span id={\"exclude-\" + tileNumber} className={\"d-none\"}></span>\n                        <span id={\"swap-\" + tileNumber} className={\"d-none\"}></span>\n                        <span id={\"include-\" + tileNumber} className={\"d-none\"}></span>\n                    </div>\n                )\n            }\n        }\n        \n        return (\n            <div id=\"map\" className={\"map center-map \" + (this.props.visible ? \"\" : \"d-none\")}>\n                {mapTiles}\n            </div>\n        );\n    }\n}\nexport default MainMap;","import React from \"react\";\nimport {CardImage, ClipboardPlus, Dash, InfoCircle, Plus} from \"react-bootstrap-icons\";\nimport ReactTooltip from 'react-tooltip';\n\nclass MapControls extends React.Component {\n    \n    render() {\n        return (\n            <div id={\"map-controls\"}>\n                <ReactTooltip place={\"left\"} effect={\"solid\"}/>\n                <div id=\"zoomButtons\" className={\"btn-group-justified btn-group-sm btn-group-vertical\" + (this.props.visible ? \"\" : \" d-none\")}>\n                    <button className=\"btn btn-primary\" id=\"zoomPlus\" onClick={this.props.zoomPlus}>\n                        <Plus className=\"icon\" />\n                    </button>\n                    <button className=\"btn btn-primary\" id=\"zoomMinus\" onClick={this.props.zoomMinus}>\n                        <Dash className=\"icon\" />\n                    </button>\n                </div>\n    \n                <div id=\"hexOverlay\" className={\"btn-group-justified btn-group-sm\" + (this.props.visible ? \"\" : \" d-none\")} onClick={this.props.toggleOverlay}>\n                    <button className={\"btn btn-primary\" + (this.props.overlayVisible ? \" active\": \"\")} id=\"showHexOverlay\" data-tip=\"Tile Number Overlay\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 194.78 169.62\" className=\"icon\" fill=\"currentColor\">\n                            <polygon className=\"overlay-cls-1\" points=\"148.03 4 51.81 4 4.61 86.92 52.02 169.84 148.03 169.84 195.03 86.92 148.03 4\"/>\n                            <text className=\"overlay-cls-2\" transform=\"translate(27.09 132.03)\">18</text>\n                        </svg>\n                    </button>\n                </div>\n    \n                <div id=\"extraTilesButton\" className={\"btn-group-justified btn-group-sm\" + (this.props.visible ? \"\" : \" d-none\")} onClick={this.props.toggleExtraTiles}>\n                    <button className={\"btn btn-primary\" + (this.props.extraTilesVisible ? \" active\": \"\")} id=\"showExtraTiles\" data-tip=\"Unused Tiles\" >\n                        <svg id=\"showExtraTilesSvg\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 359.35 311.21\" className=\"icon\" fill=\"currentColor\">\n                            <polygon id=\"showExtraTilesPoly\" points=\"269.51 0 89.84 0 0 155.6 89.84 311.2 269.51 311.2 359.35 155.6 269.51 0\" />\n                        </svg>\n                    </button>\n                </div>\n\n                <div id=\"moreInfoButton\" className={\"btn-group-justified btn-group-sm\" + (this.props.visible ? \"\" : \" d-none\")} onClick={this.props.toggleMoreInfo}>\n                    <button className={\"btn btn-primary\" + (this.props.moreInfoVisible ? \" active\": \"\")} id=\"showMoreInfo\" data-tip=\"Assets Adjacent to Home\">\n                        <InfoCircle id=\"showMoreInfoSvg\" className=\"icon\" />\n                    </button>\n                </div>\n\n                <div id=\"copyTileStringButton\" className={\"btn-group-justified btn-group-sm\" + (this.props.visible ? \"\" : \" d-none\")} onClick={this.props.copyTilesToClipboard}>\n                    <button className={\"btn btn-primary\"} id=\"copyTileStringInfo\" data-tip=\"Copy TTS Tile String to Clipboard\">\n                        <ClipboardPlus id=\"copyTileStringSvg\" className=\"icon\" />\n                    </button>\n                </div>\n\n\n\n                <div id=\"toggleBackgroundButton\" className={\"btn-group-justified btn-group-sm\"} onClick={this.props.toggleBackground}>\n                    <button className={\"btn btn-primary\"} id=\"toggleBackground\" data-tip=\"Toggle Background Animation\">\n                        <CardImage id=\"toggleBackgroundSvg\" className=\"icon\" />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\nexport default MapControls;","import React from \"react\";\nimport {ArrowBarLeft, ArrowBarRight} from \"react-bootstrap-icons\";\n\nclass OptionsControls extends React.Component {\n    render() {\n        return (\n            <div className=\"controls btn-group-justified btn-group-sm\">\n                <button type=\"button\" id=\"toggleOptions\" className={\"btn btn-primary\" + (this.props.visible ? \"\" : \" hidden\") + (this.props.isMobileView ? \" full-screen\" : \"\")} onClick={this.props.toggleOptions}>\n                    <ArrowBarRight className={\"icon icon-contract\"} />\n                    <ArrowBarLeft className={\"icon icon-expand\"} />\n                </button>\n            </div>\n        );\n    }\n}\nexport default OptionsControls;","import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\n\nclass HelpModal extends React.Component {\n    render() {\n        return (\n            <Modal show={this.props.visible} onHide={this.props.hideModal}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{this.props.title}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div dangerouslySetInnerHTML={{__html: this.props.content}} />\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\nexport default HelpModal;","import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\n\nclass SetPlayerNameModal extends React.Component {\n    render() {\n        return (\n            <Modal show={this.props.visible} onHide={this.props.hideModal}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Set Player Names</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <form id={\"playerNameForm\"}>\n                        {this.props.currentPlayerNames.map((x, i) => {\n                            return (\n                                <div className={\"form-group\"} key={\"set-names-\" + i}>\n                                    <label htmlFor={\"player\" + (i+1) + \"Name\"}>Player {(i+1)}</label>\n                                    <input className={\"form-control\"} name={\"playerName\" + i} type={\"text\"} placeholder={\"P\" + (i+1)} defaultValue={x} onChange={this.props.handleNameChange} />\n                                </div>\n                            )\n                        })}\n                    </form>\n\n\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\nexport default SetPlayerNameModal;","import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\n\nclass SetRacesModal extends React.Component {\n    render() {\n        let visibleRaces = this.props.races\n        if (this.props.useProphecyOfKings) {\n            visibleRaces = visibleRaces.concat(this.props.pokRaces)\n        }\n\n        return (\n            <Modal show={this.props.visible} onHide={this.props.hideModal}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Set Races</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {/*{this.props.races}*/}\n                    {/*{this.props.pokRaces}*/}\n                    {/*{this.props.useProphecyOfKings}*/}\n                    {/*{this.props.currentRaces}*/}\n                    {/*{this.props.handleRacesChange}*/}\n                    <form id={\"includedRacesForm\"}>\n                        {/*<div className={\"form-group\"}>*/}\n                        {/*    <input className={\"form-control\"} id={\"filterRaces\"} type={\"text\"} placeholder={\"filterRaces\"} />*/}\n                        {/*</div>*/}\n                        {visibleRaces.map((raceName, raceIndex) => {\n                            return (\n                                <div className={\"custom-control custom-checkbox mb-3 races\"} key={\"set-races-\" + raceIndex}>\n                                    <input className={\"custom-control-input\"} name={raceName} type={\"checkbox\"} id={\"include\" + raceName.replace(\" \", \"\")} checked={this.props.currentRaces.indexOf(raceName) > -1} onChange={this.props.handleRacesChange} />\n                                    <label className={\"custom-control-label d-flex\"} htmlFor={\"include\" + raceName.replace(\" \", \"\")}>{raceName}</label>\n                                </div>\n                            )\n                        })}\n                    </form>\n\n\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\nexport default SetRacesModal;","import React from \"react\";\nimport {QuestionCircle} from \"react-bootstrap-icons\";\nimport boardData from \"../data/boardData.json\";\nimport tileData from \"../data/tileData.json\";\nimport raceData from \"../data/raceData.json\";\nimport adjacencyData from \"../data/adjacencyData.json\";\nimport HelpModal from \"./HelpModal\";\nimport SetPlayerNameModal from \"./SetPlayerNameModal\";\nimport SetRacesModal from \"./SetRacesModal\";\n\n\nclass MapOptions extends React.Component {\n    constructor(props) {\n        super(props);\n        const startingValues = {\n            numberOfPlayers: [2, 3, 4, 5, 6],\n            pokNumberOfPlayers: [7, 8],\n            boardStyles: {\n                2: Object.keys(boardData.styles[\"2\"]).map((key) => key),\n                3: Object.keys(boardData.styles[\"3\"]).map((key) => key),\n                4: Object.keys(boardData.styles[\"4\"]).map((key) => key),\n                5: Object.keys(boardData.styles[\"5\"]).map((key) => key),\n                6: Object.keys(boardData.styles[\"6\"]).map((key) => key === \"large\" ? null : key).filter(x => x),\n            },\n            boardStylesPok: {\n                2: Object.keys(boardData.styles[\"2\"]).map((key) => key),\n                3: Object.keys(boardData.styles[\"3\"]).map((key) => key),\n                4: Object.keys(boardData.styles[\"4\"]).map((key) => key),\n                5: Object.keys(boardData.styles[\"5\"]).map((key) => key),\n                6: Object.keys(boardData.styles[\"6\"]).map((key) => key),\n                7: Object.keys(boardData.styles[\"7\"]).map((key) => key),\n                8: Object.keys(boardData.styles[\"8\"]).map((key) => key),\n            },\n            pickStyles: [\"balanced\", \"random\", \"resource\", \"influence\", \"custom\"],\n            placementStyles: [\"slice\", \"initial\", \"home\", \"random\"],\n            races: [...raceData[\"races\"]],\n            pokRaces: [...raceData[\"pokRaces\"]],\n            homeworlds: raceData[\"homeSystems\"],\n            pokHomeworlds: raceData[\"pokHomeSystems\"]\n        }\n        const startingPlayers = 6;\n\n        this.state = {\n            optionsPossible: startingValues,\n            currentNumberOfPlayers: startingPlayers,\n            currentNumberOfPlayersOptions: startingValues[\"numberOfPlayers\"],\n            currentBoardStyleOptions: startingValues[\"boardStyles\"][startingPlayers],\n            currentBoardStyle: startingValues[\"boardStyles\"][startingPlayers][0],\n            currentPickStyle: startingValues[\"pickStyles\"][0],\n            currentPlacementStyle: startingValues[\"placementStyles\"][0],\n            currentSeed: \"\",\n            userSetSeed: false,\n            pickRaces: false,\n            pickMultipleRaces: false,\n            shuffleBoards: false,\n            reversePlacementOrder: false,\n            generated: false,\n\n            pickRacesHelp: false,\n            boardStyleHelp: false,\n            pickStyleHelp: false,\n            placementStyleHelp: false,\n            setPlayerNamesHelp: false,\n            setRacesHelp: false,\n            pickMultipleRacesHelp: false,\n            shufflePriorityHelp: false,\n            reversePlacementOrderHelp: false,\n\n            resourceWeight: 70,\n            influenceWeight: 30,\n            planetCountWeight: 15,\n            specialtyWeight: 50,\n            anomalyWeight: 10,\n            wormholeWeight: 25,\n\n            shuffleThreshold: 5,\n        };\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleNameChange = this.handleNameChange.bind(this);\n        this.handleRacesChange = this.handleRacesChange.bind(this);\n        this.updatePok = this.updatePok.bind(this);\n        this.updatePlayerCount = this.updatePlayerCount.bind(this);\n        this.updateBoardStyle = this.updateBoardStyle.bind(this);\n        this.updateSeed = this.updateSeed.bind(this);\n\n        this.ensureAnomalies = this.ensureAnomalies.bind(this);\n        this.ensureWormholesForType = this.ensureWormholesForType.bind(this);\n\n        this.updateBoardStyleOptions = this.updateBoardStyleOptions.bind(this); // TODO is the bind needed?\n\n        this.generateBoard = this.generateBoard.bind(this);\n        this.getNewTileSet = this.getNewTileSet.bind(this);\n\n        this.togglePickRacesHelp = this.togglePickRacesHelp.bind(this);\n        this.toggleBoardStyleHelp = this.toggleBoardStyleHelp.bind(this);\n        this.togglePickStyleHelp = this.togglePickStyleHelp.bind(this);\n        this.togglePlacementStyleHelp = this.togglePlacementStyleHelp.bind(this);\n        this.toggleSetPlayerNamesHelp = this.toggleSetPlayerNamesHelp.bind(this);\n        this.toggleSetRacesHelp = this.toggleSetRacesHelp.bind(this);\n        this.togglePickMultipleRacesHelp = this.togglePickMultipleRacesHelp.bind(this);\n        this.toggleShufflePriorityHelp = this.toggleShufflePriorityHelp.bind(this);\n        this.toggleReversePlacementOrderHelp = this.toggleReversePlacementOrderHelp.bind(this);\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleNameChange(event) {\n        let nameIndex = parseInt(event.target.name.substring(10))\n        let newPlayerNames = this.props.currentPlayerNames\n        newPlayerNames[nameIndex] = event.target.value\n\n        this.setState({\n            currentPlayerNames: newPlayerNames\n        })\n    }\n\n    handleRacesChange(event) {\n        let race = event.target.name;\n        let newCurrentRaces = this.props.currentRaces;\n        let indexToToggle = newCurrentRaces.indexOf(race)\n        if (indexToToggle >= 0) {\n            newCurrentRaces.splice(indexToToggle, 1)\n        } else {\n            newCurrentRaces.push(race)\n        }\n\n        this.props.updateRaces(newCurrentRaces);\n    }\n\n    updatePok(event) {\n        let boardOptions = this.state.optionsPossible.boardStyles;\n        if (event.target.checked) {\n            boardOptions = this.state.optionsPossible.boardStylesPok;\n            this.setState({\n                currentNumberOfPlayersOptions: this.state.optionsPossible.numberOfPlayers.concat(this.state.optionsPossible.pokNumberOfPlayers),\n                currentBoardStyle: boardOptions[this.state.currentNumberOfPlayers][0],\n                currentBoardStyleOptions: boardOptions[this.state.currentNumberOfPlayers],\n            }, () => {\n                this.props.updateRaces([...this.state.optionsPossible.races.concat(this.state.optionsPossible.pokRaces)]);\n                this.props.toggleProphecyOfKings(event);\n            });\n        } else {\n            this.setState({\n                currentNumberOfPlayers: this.state.currentNumberOfPlayers > 6 ? 6 : this.state.currentNumberOfPlayers,\n                currentNumberOfPlayersOptions: this.state.optionsPossible.numberOfPlayers,\n                currentBoardStyle: this.state.currentNumberOfPlayers > 6 ? boardOptions[\"6\"][0] : this.state.currentBoardStyle,\n                currentBoardStyleOptions: this.state.currentNumberOfPlayers > 6 ? boardOptions[\"6\"] : boardOptions[this.state.currentNumberOfPlayers],\n            }, () => {\n                this.props.updateRaces([...this.state.optionsPossible.races]);\n                this.props.toggleProphecyOfKings(event);\n            });\n        }\n    }\n\n    updatePlayerCount(event) {\n        this.setState({\n            currentNumberOfPlayers: parseInt(event.target.value),\n        }, () => {\n            this.updateBoardStyleOptions(event)\n        });\n    }\n\n    updateBoardStyle(event) {\n        this.setState({\n            currentBoardStyle: event.target.value,\n        }, () => {\n            if (this.state.generated) {\n                this.generateBoard(event)\n            }\n        });\n    }\n\n    updateBoardStyleOptions(event) {\n        let boardOptions = this.state.optionsPossible.boardStyles;\n        if (this.props.useProphecyOfKings) {\n            boardOptions = this.state.optionsPossible.boardStylesPok;\n        }\n        this.setState({\n            currentBoardStyleOptions: boardOptions[this.state.currentNumberOfPlayers],\n            currentBoardStyle: boardOptions[this.state.currentNumberOfPlayers][0],\n        }, () => {\n            if (this.state.generated) {\n                this.generateBoard(event)\n            }\n        });\n    }\n\n    updateSeed(event) {\n        let newSeed = parseInt(event.target.value)\n        if (!isNaN(newSeed) || event.target.value === \"\") {\n            this.setState({\n                currentSeed: event.target.value,\n                userSetSeed: event.target.value !== \"\"  // Ignore user entry if the value is blank\n            });\n        }\n    }\n\n    capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    shuffle(array) {\n        let m = array.length, t, i;\n        let seed = this.state.currentSeed.valueOf();\n\n        // While there remain elements to shuffle…\n        while (m) {\n            // Pick a remaining element…\n            i = Math.floor(this.random(seed) * m--);\n\n            // And swap it with the current element.\n            t = array[m];\n            array[m] = array[i];\n            array[i] = t;\n            ++seed\n        }\n\n        return array;\n    }\n\n    random(seed) {\n        let x = Math.sin(seed++) * 10000;\n        return x - Math.floor(x);\n    }\n\n    /**\n     * Create a new board using a custom seed.\n     * @param event The event which triggered this action, to be ignored.\n     */\n    generateBoard(event) {\n        // Don't actually submit the form\n        event.preventDefault();\n\n        // Create a random seed to use unless the user has specified one\n        let currentSeed = this.state.currentSeed\n        if (!this.state.userSetSeed) {\n            currentSeed = Math.floor(Math.random() * Math.floor(9999));\n        }\n\n        this.setState({\n            currentSeed: currentSeed,\n            generated: true,\n        }, () => {\n            this.props.updateTiles(this.getNewTileSet());\n        });\n\n    }\n\n    /**\n     * Create a set of new tiles for the board based on the user's input.\n     */\n    getNewTileSet() {\n        // Get an ordered list of board spaces that need to have non-home systems assigned to them\n        let systemIndexes = this.getNewTilesToPlace()\n\n        // Get a set of systems to make the board with, ordered based on user supplied weights\n        let newSystems = this.getNewSystemsToPlace(systemIndexes.length)\n\n        // Copy a blank map to add to\n        let newTiles = [...boardData.blankMap]\n\n        // Put Mecatol Rex in the middle\n        newTiles[0] = 18\n\n        // Place hyperlanes\n        this.placeHyperlanes(newTiles)\n\n        // Place home planets\n        this.placeHomeSystems(newTiles)\n\n        // Place planets one at a time, using the indexes to place combined with the ordered planet list\n        for (let systemIndex of systemIndexes) {\n            newTiles[systemIndex] = newSystems.shift();\n        }\n\n        // Check that anomalies and wormholes are not adjacent\n        this.checkAdjacencies(newTiles)\n\n        // Update the generated flag then update the tiles\n        return newTiles;\n    }\n\n    /**\n     * Generate a list of index on the board that need to be filled with tiles. The various inputs include:\n     * Board Data: Information about what this board looks like, the tiles split into 3 groupings of importance\n     * Random Priority: Whether the first player goes first, or who gets the various picks is randomized\n     * Placement Style: How the groupings of tiles should be added to the board\n     * Reverse Placement Order: Whether the groupsings should be added in reverse order\n     * @returns {number[]} A list of indexes on the board that need to be filled in with system tiles\n     */\n    getNewTilesToPlace() {\n        // Copy all the tile arrays from board data\n        let primary = [...boardData.styles[this.state.currentNumberOfPlayers.toString()][this.state.currentBoardStyle][\"primary_tiles\"]];\n        let secondary = [...boardData.styles[this.state.currentNumberOfPlayers.toString()][this.state.currentBoardStyle][\"secondary_tiles\"]];\n        let tertiary = [...boardData.styles[this.state.currentNumberOfPlayers.toString()][this.state.currentBoardStyle][\"tertiary_tiles\"]];\n\n        // If shuffling, we need to shuffle primary, secondary, and tertiary indexes.\n        if (this.state.shuffleBoards) {\n            this.shuffle(primary);\n            this.shuffle(secondary);\n            this.shuffle(tertiary);\n        }\n\n        // Based on the placement style, generate the list of indexes to place\n        let systemIndexes = [];\n        switch(this.state.currentPlacementStyle) {\n            case(\"random\"):\n                // Add them all together and shuffle them\n                if (this.state.reversePlacementOrder) {\n                    systemIndexes = tertiary.concat(secondary).concat(primary);\n                } else {\n                    systemIndexes = primary.concat(secondary).concat(tertiary);\n                }\n                this.shuffle(systemIndexes);\n                break;\n            case(\"initial\"):\n                // Primary tiles are separate from the secondary shuffled tiles\n                if (this.state.reversePlacementOrder) {\n                    systemIndexes = this.shuffle(secondary.concat(tertiary)).concat(primary);\n                } else {\n                    systemIndexes = primary.concat(this.shuffle(secondary.concat(tertiary)));\n                }\n                break;\n            case(\"home\"):\n                // Primary tiles are tiles adjacent to home systems\n                systemIndexes = primary.concat(secondary).concat(tertiary);\n\n                // Get home systems\n                let home = [...boardData.styles[this.state.currentNumberOfPlayers.toString()][this.state.currentBoardStyle][\"home_worlds\"]];\n                let newPrimary = [];\n                for (let homeSystem of home) {\n                    // Loop over adjacent systems\n                    let adjacentSystems = adjacencyData[homeSystem];\n                    for (let adjacentSystem of adjacentSystems) {\n                        // Remove the adjacent system from the complete list (if it exists), and add it to the front\n                        if (systemIndexes.indexOf(adjacentSystem) >= 0) {\n                            newPrimary.push(adjacentSystem);\n                            systemIndexes.splice(systemIndexes.indexOf(adjacentSystem), 1);\n                        }\n                    }\n                }\n\n                // Add the adjacent planets to the front of the list\n                this.shuffle(newPrimary);\n                if (this.state.reversePlacementOrder) {\n                    systemIndexes = systemIndexes.concat(newPrimary);\n                } else {\n                    systemIndexes = newPrimary.concat(systemIndexes);\n                }\n                break;\n            case(\"slice\"):\n            default:\n                // Combine them in their listed order\n                if (this.state.reversePlacementOrder) {\n                    systemIndexes = tertiary.concat(secondary).concat(primary);\n                } else {\n                    systemIndexes = primary.concat(secondary).concat(tertiary);\n                }\n                break;\n        }\n\n        return systemIndexes;\n    }\n\n    /**\n     *\n     * Get an array of system tile numbers to place on the board.\n     * @param {number} numberOfSystems The number of systems to get.\n     * @returns {[]}\n     */\n    getNewSystemsToPlace(numberOfSystems) {\n        // Pick our a random set of systems, following the needed number of anomalies\n        let allBlues = this.props.useProphecyOfKings ? [...tileData.blue.concat(tileData.pokBlue)] : [...tileData.blue];\n        let allReds = this.props.useProphecyOfKings ? [...tileData.red.concat(tileData.pokRed)] : [...tileData.red];\n\n        // Shuffle our tiles for randomness\n        this.shuffle(allBlues)\n        this.shuffle(allReds)\n\n        // Calculate how many reds we need based on player count\n        let blueTileRatio = 2;\n        let redTileRatio = 1;\n        // For 3, 4, and 6 player games, there is a different ratio\n        switch (this.state.currentNumberOfPlayers) {\n            case(3):\n                blueTileRatio = 3\n                redTileRatio = 1\n                break;\n            case(4):\n                blueTileRatio = 5\n                redTileRatio = 3\n                break;\n            case(6):\n                blueTileRatio = 3\n                redTileRatio = 2\n                break;\n            default:\n                break;\n        }\n        let redsToPlace = Math.round(Number((numberOfSystems / (blueTileRatio + redTileRatio)) * redTileRatio));\n        let bluesToPlace = Math.round(Number((numberOfSystems / (blueTileRatio + redTileRatio)) * blueTileRatio));\n\n        // If planet heavy system, then reduce number of anomalies\n        if (false) {\n            let newRedsToPlace = 2; // TODO make this user configurable\n            if (newRedsToPlace > redsToPlace) {\n                bluesToPlace = bluesToPlace - (newRedsToPlace - redsToPlace);\n            } else if (newRedsToPlace < redsToPlace) {\n                bluesToPlace = bluesToPlace + (redsToPlace - newRedsToPlace);\n            }\n            redsToPlace = newRedsToPlace\n        }\n\n        // Get only the needed blues and reds\n        let newSystems = []\n        if (redsToPlace > allReds.length) {\n            newSystems = allBlues.slice(0, bluesToPlace + (redsToPlace - allReds.length)).concat(allReds)\n        } else if (bluesToPlace > allBlues.length) {\n            newSystems = allBlues.concat(allReds.slice(0, redsToPlace + (bluesToPlace - allBlues.length)))\n        } else {\n            newSystems = allBlues.slice(0, bluesToPlace).concat(allReds.slice(0, redsToPlace))\n        }\n\n        // Ensure that if a wormhole is included, two are\n        const allAlphaWormholes = this.props.useProphecyOfKings ? [...tileData.alphaWormholes.concat(tileData.pokAlphaWormholes)] : [...tileData.alphaWormholes];\n        const allBetaWormholes = this.props.useProphecyOfKings ? [...tileData.betaWormholes.concat(tileData.pokBetaWormholes)] : [...tileData.betaWormholes];\n\n        newSystems = this.ensureWormholesForType(newSystems, [26], allAlphaWormholes, allBetaWormholes);\n\n        // Ensure that if we have an alpha wormhole, then we have at least two of them\n        newSystems = this.ensureWormholesForType(newSystems, [25, 64], allBetaWormholes, allAlphaWormholes);\n\n        // Based on the system style, order the systems according to their weights\n        let weights = {};\n        switch (this.state.currentPickStyle) {\n            case \"random\":\n                this.shuffle(newSystems)\n                return newSystems\n            case \"custom\":\n                weights = {\n                    \"resource\": parseInt(this.state.resourceWeight),\n                    \"influence\": parseInt(this.state.influenceWeight),\n                    \"planet_count\": parseInt(this.state.planetCountWeight),\n                    \"specialty\": parseInt(this.state.specialtyWeight),\n                    \"anomaly\": parseInt(this.state.anomalyWeight),\n                    \"wormhole\": parseInt(this.state.wormholeWeight)\n                }\n                break;\n            case \"resource\":\n                weights = {\n                    \"resource\": 100,\n                    \"influence\": 10,\n                    \"planet_count\": 10,\n                    \"specialty\": 10,\n                    \"anomaly\": 10,\n                    \"wormhole\": 10\n                }\n                break;\n            case \"influence\":\n                weights = {\n                    \"resource\": 10,\n                    \"influence\": 100,\n                    \"planet_count\": 10,\n                    \"specialty\": 10,\n                    \"anomaly\": 10,\n                    \"wormhole\": 10\n                }\n                break;\n            case \"balanced\":\n            default:\n                if (this.props.useProphecyOfKings) {\n                    weights = {\n                        \"resource\": 80,\n                        \"influence\": 30,\n                        \"planet_count\": 15,\n                        \"specialty\": 50,\n                        \"anomaly\": 40,\n                        \"wormhole\": 25\n                    }\n                } else {\n                    weights = {\n                        \"resource\": 80,\n                        \"influence\": 30,\n                        \"planet_count\": 15,\n                        \"specialty\": 40,\n                        \"anomaly\": 30,\n                        \"wormhole\": 25\n                    }\n                }\n                break;\n        }\n\n        // Re-order the planets based on their weights\n        newSystems = this.getWeightedPlanetList(newSystems, weights)\n\n        return newSystems\n\n    }\n    placeHyperlanes(newTiles) {\n        // Place hyperlanes in their specific layout and orientation\n        // TODO in the future, can this be random? Can they rotate?\n        for (let index = 0; index < boardData.styles[this.state.currentNumberOfPlayers.toString()][this.state.currentBoardStyle]['hyperlane_tiles'].length; index++) {\n            let hyperlaneData = boardData.styles[this.state.currentNumberOfPlayers.toString()][this.state.currentBoardStyle]['hyperlane_tiles'][index]\n            newTiles[hyperlaneData[0]] = hyperlaneData[1] + \"-\" + hyperlaneData[2]\n        }\n    }\n    placeHomeSystems(newTiles) {\n        // Get current races for placing races, and shuffle them around\n        let currentRaces = [...this.props.currentRaces]\n        this.shuffle(currentRaces)\n\n        // Place data for the homeSystems from board data\n        for (let index = 0; index < boardData.styles[this.state.currentNumberOfPlayers.toString()][this.state.currentBoardStyle]['home_worlds'].length; index++) {\n            let planetIndex = boardData.styles[this.state.currentNumberOfPlayers.toString()][this.state.currentBoardStyle]['home_worlds'][index]\n            if (this.state.pickRaces && !this.state.pickMultipleRaces) {\n                // Convert races into race hexes and assign a random race to a player\n                newTiles[planetIndex] = raceData.raceToHomeSystemMap[currentRaces[0]]\n                currentRaces.shift();\n            } else {\n                // Set home worlds to 0, races to be decided later\n                newTiles[planetIndex] = 0\n            }\n        }\n    }\n    checkAdjacencies(newTiles) {// Planets have been placed, time to do post processing checks to make sure things are good to go.\n        // Get all anomalies that are adjacent to one another\n        let allTrueAnomalies = this.props.useProphecyOfKings ? [...tileData.anomaly.concat(tileData.pokAnomaly)] : [...tileData.anomaly];\n        for (let anomaly of allTrueAnomalies) {\n            let anomalyTileNumber = newTiles.indexOf(anomaly);\n            if (anomalyTileNumber >= 0) {\n                // anomaly exists in the map, so check it\n                let adjacentTiles = adjacencyData[anomalyTileNumber];\n                let adjacentAnomalies = [];\n\n                // Get a list of all adjacent anomalies to this one\n                for (let adjacentTileNumber of adjacentTiles) {\n                    let adjacentTile = newTiles[adjacentTileNumber];\n                    if (allTrueAnomalies.indexOf(adjacentTile) >= 0) {\n                        // This tile is an anomaly\n                        adjacentAnomalies.push(adjacentTile)\n                    }\n                }\n\n                // If tile is in conflict more than 1 anomaly, see if there is a \"blank\" anomaly off the board to swap with. if not, then continue\n                let swapped = false;\n                let blankReds = this.props.useProphecyOfKings ? [...tileData.blankRed.concat(tileData.pokBlankRed)] : [...tileData.blankRed];\n                if (adjacentAnomalies.length > 1) {\n                    let possibleBlanks = [];\n                    for (let blankRed of blankReds) {\n                        if (newTiles.indexOf(blankRed) < 0) {\n                            possibleBlanks.push(blankRed)\n                        }\n                    }\n                    possibleBlanks = this.shuffle(possibleBlanks);\n                    if (possibleBlanks.length > 0) {\n                        swapped = true;\n                        newTiles[anomalyTileNumber] = possibleBlanks[0];\n                    }\n                }\n\n                if (!swapped && adjacentAnomalies.length > 0) {\n                    // Look at all red back tiles on the board that are not anomalies, and see if they have adjacent anomalies\n                    // Test this code with 2 player, everything else base, seed of 9986\n                    for (let blankRed of blankReds) {\n                        let blankRedTileNumber = newTiles.indexOf(blankRed)\n                        if (blankRedTileNumber >= 0) {\n                            let adjacentTiles = adjacencyData[blankRedTileNumber];\n                            let swappable = true;\n                            for (let adjacentTile of adjacentTiles) {\n                                if (allTrueAnomalies.indexOf(newTiles[adjacentTile]) >= 0 && adjacentTile !== anomalyTileNumber) {\n                                    // This blank has an adjacent anomaly, so throw it out\n                                    swappable = false;\n                                    break;\n                                }\n                            }\n                            if (swappable) {\n                                // This blank red has no other adjacent anomalies, so swap\n                                newTiles[anomalyTileNumber] = blankRed;\n                                newTiles[blankRedTileNumber] = anomaly;\n                                swapped = true;\n                                break;\n                            }\n                        }\n                    }\n                    if (!swapped) {\n                        let blankReds = this.props.useProphecyOfKings ? [...tileData.blankRed.concat(tileData.pokBlankRed)] : [...tileData.blankRed];\n                        let possibleBlanks = [];\n                        for (let blankRed of blankReds) {\n                            if (newTiles.indexOf(blankRed) < 0) {\n                                possibleBlanks.push(blankRed)\n                            }\n                        }\n                        possibleBlanks = this.shuffle(possibleBlanks);\n                        if (possibleBlanks.length > 0) {\n                            swapped = true;\n                            newTiles[anomalyTileNumber] = possibleBlanks[0];\n                        }\n                        if (!swapped) {\n                            console.log(\"Unable to swap anomaly to a free position.\")\n                        }\n                        /*\n                        There is a potential use for this strategy, but for now it seems pretty safe to just let it fail\n                        to swap on a blank. It is rare that it is impossible, and even when it is, its a pretty simple\n                        rule. Plus the rules let you place reds next to each other if moving them is impossible.\n                        btw, not sure this code below works properly. I believe there is a bug in it.\n                         */\n\n                        /*\n                        // Going in reverse, find the first tile with no anomalies adjacent, and swap\n                        newTiles.reverse()\n                        for (let tile of newTiles) {\n                            if (tile !== 0 && tile !== -1 && allTrueAnomalies.indexOf(tile) < 0 && blankReds.indexOf(tile) < 0) {\n                                console.log(\"Tile: \" + tile)\n                                // This is a real tile, check for adjacency to other anomalies\n                                let blankRedTileNumber = newTiles.indexOf(tile)\n                                let adjacentTiles = adjacencyData[blankRedTileNumber];\n                                let swappable = true;\n                                for (let adjacentTile of adjacentTiles) {\n                                    if (allTrueAnomalies.indexOf(newTiles[adjacentTile]) >= 0) {\n                                        // This blank has an adjacent anomaly, so throw it out\n                                        swappable = false;\n                                        break;\n                                    }\n                                }\n                                if (swappable) {\n                                    // No adjacency breaks found, go ahead and swap it\n                                    console.log(anomalyTileNumber)\n                                    console.log(blankRedTileNumber)\n                                    newTiles[anomalyTileNumber] = tile;\n                                    newTiles[blankRedTileNumber] = anomaly;\n                                    swapped = true;\n                                    break;\n                                }\n                            }\n                        }\n                        // If no swap possible, no problem. Continue on\n                        newTiles.reverse()\n                        */\n                    }\n                }\n            }\n        }\n\n        const allAlphaWormholes = this.props.useProphecyOfKings ? [...tileData.alphaWormholes.concat(tileData.pokAlphaWormholes)] : [...tileData.alphaWormholes];\n        const allBetaWormholes = this.props.useProphecyOfKings ? [...tileData.betaWormholes.concat(tileData.pokBetaWormholes)] : [...tileData.betaWormholes];\n\n\n        // Alpha, at least one wormhole is a \"empty tile\" so swap it with a blank tile\n        for (let alphaWormhole of allAlphaWormholes) {\n            let alphaWormholeTileNumber = newTiles.indexOf(alphaWormhole);\n            if (alphaWormholeTileNumber >= 0 && tileData.all[alphaWormhole].planets.length === 0) {\n                // Wormhole exists on the board, and is blank. Check if it is adjacent to another wormhole\n                let adjacentTileNumbers = adjacencyData[alphaWormholeTileNumber];\n                let adjacentWormhole = false;\n                for (let adjacentTileNumber of adjacentTileNumbers) {\n                    if (allAlphaWormholes.indexOf(newTiles[adjacentTileNumber]) >= 0) {\n                        adjacentWormhole = true;\n                        break;\n                    }\n                }\n                if (adjacentWormhole) {\n                    // This blank has an adjacent wormhole, so we need to move it. Loop over all blanks to swap with\n                    let blankReds = this.props.useProphecyOfKings ? [...tileData.blankRed.concat(tileData.pokBlankRed)] : [...tileData.blankRed];\n                    // Remove wormholes from blank reds, because swapping alphas doesn't make sense.\n                    blankReds = blankReds.filter( function( el ) {\n                        return allAlphaWormholes.indexOf( el ) < 0;\n                    } );\n                    blankReds = this.shuffle(blankReds);\n                    for (let blankRed of blankReds) {\n                        let blankRedTileNumber = newTiles.indexOf(blankRed)\n                        if (blankRedTileNumber >= 0) {\n                            let adjacentTilesNumbers = adjacencyData[blankRedTileNumber];\n                            let swappable = true;\n                            for (let adjacentTileNumber of adjacentTilesNumbers) {\n                                if ((allAlphaWormholes.indexOf(newTiles[adjacentTileNumber]) >= 0 && adjacentTileNumber !== alphaWormholeTileNumber) || (allTrueAnomalies.indexOf(alphaWormhole) >= 0 && allTrueAnomalies.indexOf(newTiles[adjacentTileNumber]) >= 0)) {\n                                    // This blank has an adjacent anomaly, so throw it out\n                                    swappable = false;\n                                    break;\n                                }\n                            }\n                            if (swappable) {\n                                // This blank red has no other adjacent anomalies, so swap\n                                newTiles[alphaWormholeTileNumber] = blankRed;\n                                newTiles[blankRedTileNumber] = alphaWormhole;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // Beta at least one planet wormhole, so swap it with another planet of equal resource value\n        for (let betaWormhole of allBetaWormholes) {\n            let betaWormholeTileNumber = newTiles.indexOf(betaWormhole);\n            if (betaWormholeTileNumber >= 0 && tileData.all[betaWormhole].planets.length === 0) {\n                // Wormhole exists on the board, and is blank. Check if it is adjacent to another wormhole\n                let adjacentTileNumbers = adjacencyData[betaWormholeTileNumber];\n                let adjacentWormhole = false;\n                for (let adjacentTileNumber of adjacentTileNumbers) {\n                    if (allBetaWormholes.indexOf(newTiles[adjacentTileNumber]) >= 0) {\n                        adjacentWormhole = true;\n                        break;\n                    }\n                }\n                if (adjacentWormhole) {\n                    // This blank has an adjacent wormhole, so we need to move it. Loop over all blanks to swap with\n                    let blankReds = this.props.useProphecyOfKings ? [...tileData.blue.concat(tileData.pokBlue)] : [...tileData.blue];\n                    // Remove wormholes from blank reds, because swapping alphas doesn't make sense.\n                    blankReds = blankReds.filter( function( el ) {\n                        return allBetaWormholes.indexOf( el ) < 0;\n                    } );\n                    blankReds = this.shuffle(blankReds);\n                    for (let blankRed of blankReds) {\n                        let blankRedTileNumber = newTiles.indexOf(blankRed)\n                        if (blankRedTileNumber >= 0) {\n                            let adjacentTilesNumbers = adjacencyData[blankRedTileNumber];\n                            let swappable = true;\n                            for (let adjacentTileNumber of adjacentTilesNumbers) {\n                                // Check for adjacency to another wormhole (excluding itself) and other anomalies\n                                if ((allBetaWormholes.indexOf(newTiles[adjacentTileNumber]) >= 0 && adjacentTileNumber !== betaWormholeTileNumber)) {\n                                    //\n                                    swappable = false;\n                                    break;\n                                }\n                            }\n                            if (swappable) {\n                                // This blank red has no other adjacent anomalies, so swap\n                                newTiles[betaWormholeTileNumber] = blankRed;\n                                newTiles[blankRedTileNumber] = betaWormhole;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    ensureWormholesForType(possibleTiles, planetWormholes, allWormholes, oppositeWormholes) {\n        let allAnomalyList = this.props.useProphecyOfKings ? [...tileData.anomaly.concat(tileData.pokAnomaly)] : [...tileData.anomaly];\n        let unusedWormholes = [];\n        let usedWormholes = [];\n\n        // Get an array of all unused wormholes\n        for (let wormholeIndex in allWormholes) {\n            possibleTiles.indexOf(allWormholes[wormholeIndex]) < 0 ?\n                unusedWormholes.push(allWormholes[wormholeIndex]) : usedWormholes.push(allWormholes[wormholeIndex]);\n        }\n\n        // If there is only one wormhole, then we need to add a new one in\n        if (usedWormholes.length === 1) {\n            console.log(\"Error! Only one wormhole!\")\n            /*\n            Lets do some tricky logic here. If we are using a planet wormhole tile, then we want to replace\n            another anomaly with one of the other one (pok: two) anomaly wormholes. If we are not using the planet tile,\n            then we can try to find a planet to replace with any remaining wormhole tiles.\n             */\n            unusedWormholes = this.shuffle(unusedWormholes);\n            let excludedTiles = [...allWormholes.concat(oppositeWormholes)];\n\n            // Check that the single used wormhole is not a planet. If not, try to replace some other planet with a planet wormhole\n            if (planetWormholes.indexOf(usedWormholes[0]) < 0) {\n                unusedWormholes = planetWormholes;\n                excludedTiles = excludedTiles.concat(allAnomalyList);\n            } // else { // Using a planet, so try to replace the lowest weight tiles with any wormhole tile }\n            possibleTiles = this.reverseReplace(possibleTiles, 1, unusedWormholes, excludedTiles, false);\n        }\n\n        return possibleTiles;\n    }\n\n    ensureAnomalies(possibleTiles, numPlanetsToPlace) {\n        // Only care about the tiles we will actually place\n        possibleTiles = possibleTiles.slice(0, numPlanetsToPlace);\n\n        // Check that there is a minimum number of anomalies on the board\n        let blueTileRatio = 2;\n        let redTileRatio = 1;\n        // For 3, 4, and 6 player games, there is a different ratio\n        switch (this.state.currentNumberOfPlayers) {\n            case(3):\n                blueTileRatio = 3\n                redTileRatio = 1\n                break;\n            case(4):\n                blueTileRatio = 5\n                redTileRatio = 3\n                break;\n            case(6):\n                blueTileRatio = 3\n                redTileRatio = 2\n                break;\n            default:\n                break;\n        }\n        let numAnomaliesLeftToBePlaced = (numPlanetsToPlace / (blueTileRatio + redTileRatio)) * redTileRatio;\n\n        // If there is no anomalies to add, then we are done\n        if (numAnomaliesLeftToBePlaced < 0) {\n            return possibleTiles\n        }\n\n        // Still have to add a certain number of anomalies in. Get a list of possible anomalies we can add to the tile list\n        let allAnomalyList = this.props.useProphecyOfKings ? [...tileData.red.concat(tileData.pokRed)] : [...tileData.red];\n\n        // Remove all current anomalies in use from this list\n        let possibleAnomalies = []\n        for (let anomalyIndex in allAnomalyList) {\n            if (possibleTiles.indexOf(allAnomalyList[anomalyIndex]) < 0) {\n                // Not using this anomaly yet, so we can add it\n                possibleAnomalies.push(allAnomalyList[anomalyIndex])\n            } else {\n                // Anomaly is already being used\n                numAnomaliesLeftToBePlaced -= 1;\n            }\n        }\n\n        // Randomize, so anomalies we are using are not always the same\n        possibleAnomalies = this.shuffle(possibleAnomalies);\n\n        return this.reverseReplace(possibleTiles, numAnomaliesLeftToBePlaced, possibleAnomalies, allAnomalyList, false)\n\n    }\n\n    /**\n     * Replace tiles starting from the lowest weight (bottom of the list being defined by reversPlacementOrder)\n     * @param possibleTiles {Int8Array} The ordered list of tiles, cut to the needed size\n     * @param numTilesToReplace {Number} The number of tiles we need to try to replace from replacement into possible\n     * @param replacementTiles {Int8Array} An array of all the tiles we can pick from to put into possibleTiles\n     * @param excludedTiles {Int8Array} An array of tiles we do not want to replace in possible\n     * @param reverseBeforeAndAfter {Boolean} Whether we want to reverse the list before and after replacement\n     * @returns {Int8Array} An ordered list of tiles, with some tiles being replaced\n     */\n    reverseReplace (possibleTiles, numTilesToReplace, replacementTiles, excludedTiles, reverseBeforeAndAfter) {\n        // If we aren't placing in reverse order, we want to start changing the worst tiles (which are usually last)\n        if (reverseBeforeAndAfter) {\n            possibleTiles = possibleTiles.reverse()\n        }\n        let currentTileIndex = possibleTiles.length - 1;\n\n        // While there are anomalies to place and a place to put them...\n        while (numTilesToReplace > 0 && replacementTiles.length > 0 && currentTileIndex > 0) {\n            // Check the index to see that it is not an anomaly or a 0 or -1 or 18 or hyperlane\n            let tileOfInterest = possibleTiles[currentTileIndex]\n            if (excludedTiles.indexOf(tileOfInterest) < 0 && tileOfInterest !== -1  && tileOfInterest !== 18 && tileOfInterest !== 0 && typeof tileOfInterest !== \"string\") {\n                // It is a replaceable tile, so fill it from the new anomalies list\n                possibleTiles[currentTileIndex] = replacementTiles.shift()\n                numTilesToReplace -= 1;\n            }\n            currentTileIndex -= 1;\n        }\n\n        // Undo the reverse from before\n        if (reverseBeforeAndAfter) {\n            possibleTiles = possibleTiles.reverse()\n        }\n\n        return possibleTiles\n    }\n\n    // TODO rename from planet to tile\n    getWeightedPlanetList(possiblePlanets, weights) {\n        // Generate an array of tuples where the first element is the plant's tile number and the second is its weight\n        let planetWeights = [];\n        for (let planetTileNumber in possiblePlanets) {\n            planetWeights.push([possiblePlanets[planetTileNumber], this.getWeight(possiblePlanets[planetTileNumber], weights)])\n        }\n\n        // Sort the returned list by weight, with higher weighted planets being first\n        planetWeights.sort(function(a, b) {\n            return b[1] - a[1];\n        })\n\n        // Do a little post process shuffling for roughly similar planets\n        let currentIndex = 0;\n        let currentHighValue = planetWeights[0][1];\n        let currentSetToShuffle = [];\n        let postPossiblePlanets = [];\n        while (currentIndex < planetWeights.length) {\n            let planetWeight = planetWeights[currentIndex];\n            // Something in this array, lets see if we add to it\n            if (planetWeight[1] >= (currentHighValue - this.state.shuffleThreshold)) {\n                // Add this item to the array to shuffle\n                currentSetToShuffle.push(planetWeight);\n            } else {\n                // We are now outside our shuffle range. So shuffle what we have, and add it to the post\n                currentSetToShuffle = this.shuffle(currentSetToShuffle)\n                postPossiblePlanets = postPossiblePlanets.concat(currentSetToShuffle)\n                currentSetToShuffle = [planetWeight]\n                currentHighValue = planetWeight[1]\n            }\n\n            currentIndex += 1;\n        }\n        currentSetToShuffle = this.shuffle(currentSetToShuffle)\n        postPossiblePlanets = postPossiblePlanets.concat(currentSetToShuffle)\n\n\n        // Convert from tuple down to just the tile number\n        let orderedPlanets = [];\n        for (let weightedPlanet in postPossiblePlanets) {\n            orderedPlanets.push(postPossiblePlanets[weightedPlanet][0]);\n        }\n\n        return orderedPlanets\n    }\n\n    getWeight(planetTileNumber, weights) {\n        let total_weight = 0\n        let tile = tileData.all[planetTileNumber.toString()]\n\n        // Go over all the planets in this tile and add up their values\n        for (let planetIndex in tile['planets']) {\n            let planet = tile['planets'][planetIndex]\n            total_weight += (planet['resources'] / 4) * weights['resource']\n            total_weight += (planet['influence'] / 4) * weights['influence']\n            total_weight += (weights['planet_count'] / 2)\n            total_weight += planet['specialty'] ? weights['specialty'] : 0\n        }\n\n        // Handle anomalies\n        if (tile['type'] === 'anomaly') {\n            total_weight += weights['anomaly'] + 40;\n            // Providing bonuses to these sections mean the other ones are never used\n            // if (tile['anomaly'] === null\n            //     || tile['anomaly'] === 'asteroid-field'\n            //     || tile['anomaly'] === 'gravity-rift') {\n            //     // Give an extra boost to these anomalies, as they are easier to cross than others\n            //     total_weight += 20;  // Change total back to 30 if using this\n            // }\n        }\n        total_weight += tile['wormhole'] ? weights['wormhole'] : 0\n\n        return total_weight\n    }\n    togglePickRacesHelp(event) {\n        this.setState({\n            pickRacesHelp: !this.state.pickRacesHelp\n        })\n    }\n    toggleBoardStyleHelp(event) {\n        this.setState({\n            boardStyleHelp: !this.state.boardStyleHelp\n        })\n    }\n    togglePlacementStyleHelp(event) {\n        this.setState({\n            placementStyleHelp: !this.state.placementStyleHelp\n        })\n    }\n    togglePickStyleHelp(event) {\n        this.setState({\n            pickStyleHelp: !this.state.pickStyleHelp\n        })\n    }\n    toggleSetPlayerNamesHelp(event) {\n        this.setState({\n            setPlayerNamesHelp: !this.state.setPlayerNamesHelp\n        })\n    }\n    toggleSetRacesHelp(event) {\n        this.setState({\n            setRacesHelp: !this.state.setRacesHelp\n        })\n    }\n    togglePickMultipleRacesHelp(event) {\n        this.setState({\n            pickMultipleRacesHelp: !this.state.pickMultipleRacesHelp\n        })\n    }\n    toggleShufflePriorityHelp(event) {\n        this.setState({\n            shufflePriorityHelp: !this.state.shufflePriorityHelp\n        })\n    }\n    toggleReversePlacementOrderHelp(event) {\n        this.setState({\n            reversePlacementOrderHelp: !this.state.reversePlacementOrderHelp\n        })\n    }\n\n    render() {\n        return (\n            <div id=\"options\" className={this.props.visible ? \"\" : \"d-none\"}>\n                <div className=\"title\">\n                    <h4 className=\"text-center\">Generation Options</h4>\n                </div>\n                <form id=\"generateForm\" onSubmit={this.generateBoard}>\n\n                    <div className=\"custom-control custom-checkbox mb-3\">\n                        <input type=\"checkbox\" className=\"custom-control-input\" id=\"pokExpansion\" name=\"useProphecyOfKings\" checked={this.props.useProphecyOfKings} onChange={this.updatePok} />\n                        <label className=\"custom-control-label\" htmlFor=\"pokExpansion\">Use Prophecy of Kings Expansion</label>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"playerCount\">Number of Players</label>\n                        <select className=\"form-control\" id=\"playerCount\" name=\"currentNumberOfPlayers\" value={this.state.currentNumberOfPlayers} onChange={this.updatePlayerCount}>\n                            {this.state.currentNumberOfPlayersOptions.map((x) => <option key={x} value={x}>{x}</option>)}\n                        </select>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"boardStyle\" className=\"d-flex\">Board Style\n                            <QuestionCircle className=\"icon\" onClick={this.toggleBoardStyleHelp} />\n                        </label>\n                        <select className=\"form-control\" id=\"boardStyle\" name=\"currentBoardStyle\" value={this.state.currentBoardStyle} onChange={this.updateBoardStyle}>\n                            {this.state.currentBoardStyleOptions.map((x) => <option key={x} value={x}>{this.capitalize(x)}</option>)}\n                        </select>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"placementStyle\" className=\"d-flex\">Placement Style\n                            <QuestionCircle className=\"icon\" onClick={this.togglePlacementStyleHelp} />\n                        </label>\n                        <select className=\"form-control\" id=\"placementStyle\" name=\"currentPlacementStyle\" value={this.state.currentPlacementStyle} onChange={this.handleInputChange}>\n                            {this.state.optionsPossible.placementStyles.map((x) => <option key={x} value={x}>{this.capitalize(x)}</option>)}\n                        </select>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"pickStyle\" className=\"d-flex\">System Weighting\n                            <QuestionCircle className=\"icon\" onClick={this.togglePickStyleHelp} />\n                        </label>\n                        <select className=\"form-control\" id=\"pickStyle\" name=\"currentPickStyle\" value={this.state.currentPickStyle} onChange={this.handleInputChange}>\n                            {this.state.optionsPossible.pickStyles.map((x) => <option key={x} value={x}>{this.capitalize(x)}</option>)}\n                        </select>\n                    </div>\n\n                    <div className={\"ml-2 collapse \" + (this.state.currentPickStyle === \"custom\" ? \"show\" : \"\")} id=\"customPickStyle\">\n                        <div className=\"card card-body\">\n                            <label htmlFor=\"customResource\">Resource</label>\n                            <input type=\"range\" className=\"custom-range\" name=\"resourceWeight\" value={this.state.resourceWeight} onChange={this.handleInputChange} />\n\n                            <label htmlFor=\"customInfluence\">Influence</label>\n                            <input type=\"range\" className=\"custom-range\" name=\"influenceWeight\" value={this.state.influenceWeight} onChange={this.handleInputChange} />\n\n                            <label htmlFor=\"customPlanetCount\">Planet Count</label>\n                            <input type=\"range\" className=\"custom-range\" name=\"planetCountWeight\" value={this.state.planetCountWeight} onChange={this.handleInputChange} />\n\n                            <label htmlFor=\"customSpecialty\">Specialty</label>\n                            <input type=\"range\" className=\"custom-range\" name=\"specialtyWeight\" value={this.state.specialtyWeight} onChange={this.handleInputChange} />\n\n                            <label htmlFor=\"customAnomaly\">Anomaly</label>\n                            <input type=\"range\" className=\"custom-range\" name=\"anomalyWeight\" value={this.state.anomalyWeight} onChange={this.handleInputChange} />\n\n                            <label htmlFor=\"customWormhole\">Wormhole</label>\n                            <input type=\"range\" className=\"custom-range\" name=\"wormholeWeight\" value={this.state.wormholeWeight} onChange={this.handleInputChange} />\n                        </div>\n                    </div>\n\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"seed\">Specific Seed</label>\n                        <input className=\"form-control\" id=\"seed\" name=\"updateSeed\" type=\"text\" placeholder=\"Enter a number to seed generation...\" value={this.state.currentSeed} onChange={this.updateSeed} />\n                    </div>\n\n                    <div className=\"custom-control custom-checkbox mb-3 d-flex\">\n                        <input type=\"checkbox\" className=\"custom-control-input\" id=\"pickRaces\" name=\"pickRaces\" checked={this.state.pickRaces} onChange={this.handleInputChange} />\n                        <label className=\"custom-control-label\" htmlFor=\"pickRaces\">Pick Races for Players</label>\n                        <QuestionCircle className=\"icon\" onClick={this.togglePickRacesHelp} />\n                    </div>\n                    <div className={\"ml-2 collapse \" + (this.state.pickRaces ? \"show\" : \"\")} id=\"pickRacesCollapse\">\n                        <div className=\"card card-body\">\n                            <button type=\"button\" className=\"btn btn-outline-primary mb-2\" onClick={this.toggleSetPlayerNamesHelp}>Set Player Names</button>\n\n                            <button type=\"button\" className=\"btn btn-outline-primary mb-2\" onClick={this.toggleSetRacesHelp}>Set Included Races</button>\n\n                            {/*<div className=\"custom-control custom-checkbox d-flex\">*/}\n                            {/*    <input type=\"checkbox\" className=\"custom-control-input\" id=\"pickMultipleRaces\" name=\"pickMultipleRaces\" checked={this.state.pickMultipleRaces} onChange={this.handleInputChange} />*/}\n                            {/*    <label className=\"custom-control-label\" htmlFor=\"pickMultipleRaces\">Let Players Pick From Multiple</label>*/}\n                            {/*    <QuestionCircle className=\"icon\" onClick={this.togglePickMultipleRacesHelp} />*/}\n                            {/*</div>*/}\n                        </div>\n                    </div>\n\n                    <div className=\"custom-control custom-checkbox mb-3 d-flex\">\n                        <input type=\"checkbox\" className=\"custom-control-input\" id=\"shuffleBoards\" name=\"shuffleBoards\" checked={this.state.shuffleBoards} onChange={this.handleInputChange} />\n                        <label className=\"custom-control-label\" htmlFor=\"shuffleBoards\">Randomize Priorities Before Placement</label>\n                        <QuestionCircle className=\"icon\" onClick={this.toggleShufflePriorityHelp} />\n                    </div>\n\n                    <div className=\"custom-control custom-checkbox mb-3 d-flex\">\n                        <input type=\"checkbox\" className=\"custom-control-input\" id=\"reversePlacementOrder\" name=\"reversePlacementOrder\" checked={this.state.reversePlacementOrder} onChange={this.handleInputChange} />\n                        <label className=\"custom-control-label\" htmlFor=\"reversePlacementOrder\">Reverse Placement Order</label>\n                        <QuestionCircle className=\"icon\" onClick={this.toggleReversePlacementOrderHelp} />\n                    </div>\n\n                    <SetPlayerNameModal visible={this.state.setPlayerNamesHelp} currentPlayerNames={this.props.currentPlayerNames}\n                                        hideModal={this.toggleSetPlayerNamesHelp} handleNameChange={this.handleNameChange}\n                    />\n                    <SetRacesModal visible={this.state.setRacesHelp} races={this.state.optionsPossible.races}\n                                   pokRaces={this.state.optionsPossible.pokRaces} useProphecyOfKings={this.props.useProphecyOfKings}\n                                   currentRaces={this.props.currentRaces}\n                                   hideModal={this.toggleSetRacesHelp} handleRacesChange={this.handleRacesChange}\n                    />\n\n                    <HelpModal key={\"help-board\"} visible={this.state.boardStyleHelp} hideModal={this.toggleBoardStyleHelp} title={\"About Board Style\"}\n                         content='<p>\n                         Board style changes how the tiles are actually laid out on a newly generated map.\n                         <br>\n                         <br>\n                         Changing this would cause you to expect different hex layouts, such as different patterns of tiles, usage of hyperlanes, or unorthodox placement of home worlds.\n                         </p>'\n                    />\n                    <HelpModal key={\"help-placement\"} visible={this.state.placementStyleHelp} hideModal={this.togglePlacementStyleHelp} title={\"About Placement Style\"}\n                         content='<p>\n                         Placement style dictates where important tiles are placed. Most revolve around having at least one tile near the homeworld with good resources.\n                         <br>\n                         <br>\n                         <br><b>Slice:</b> Places tiles like a normal player would. Prioritizes a good pathway to mecatol, and filling in the area around the home system with good tiles.\n                         <br><b>Initial:</b> Only guarantees a good tile right in front of the home system (on the way to mecatol). Everything else is random.\n                         <br><b>Home:</b> Prioritizes all of the adjacent tiles to the home system and everything else is random.\n                         <br><b>Random:</b> Shuffles the priority levels completely. No favoritism to tiles near the home system.\n                         </p>'\n                    />\n                    <HelpModal key={\"help-pick\"} visible={this.state.pickStyleHelp} hideModal={this.togglePickStyleHelp} title={\"About Pick Style\"}\n                               content='<p>\n                         Pick Style is used to determine how tiles are weighted for when they are placed on the board. A higher weighted tile means that the hex is more important, and so (depending on the placement style) it is put closer to home worlds to facilitate available assets.\n                         <br>\n                         <br><b>Balanced:</b> A custom weight which favors resources and planet count more than anomalies. This more accurately factors in tech specialties and influence as trade-offs to the \"Resource\" pick.\n                         <br><b>Resource:</b> Tiles are ordered primarily by their resource values. Higher resource planets are more coveted, and so are more important.\n                         <br><b>Influence:</b> Similar to \"Resource\", tiles are ordered primarily by their influence values.\n                         <br><b>Random:</b> Tiles are completely randomly ordered. Expect chaotic and unbalanced maps.\n                         <br><b>Custom:</b> Enter your own values in for balancing tradeoffs between various tile qualities.\n                         </p>'\n\n                    />\n                    <HelpModal key={\"help-races\"} visible={this.state.pickRacesHelp} hideModal={this.togglePickRacesHelp} title={\"About Picking Races\"}\n                         content=\"<p>\n                         Automatically assigns races to the players on the boards.\n                         <br>\n                         <br>\n                         From the set of races, turning this on will assign every player a random race (designated by assigning them the homeworld tile of that race). You should pick which player sits at a certain position before turning this on.\n                         </p>\"\n                    />\n                    <HelpModal key={\"help-multiple\"} visible={this.state.pickMultipleRacesHelp} hideModal={this.togglePickMultipleRacesHelp} title={\"About Picking Multiple Races\"}\n                         content=\"<p>\n                         Divides all the races evenly up amongst the players in the game (with no overflow), so that they can choose from a selection instead of being specifically assigned one race.\n                         <br>\n                         <br>\n                         Some groups prefer to have a draft, where every player is given a few races to pick between. This lets them pick the races that they want to play, but not have any conflicts with other players about playing a certain race.\n                         </p>\"\n                    />\n                    <HelpModal key={\"help-priority\"} visible={this.state.shufflePriorityHelp} hideModal={this.toggleShufflePriorityHelp} title={\"About Shuffling Priority\"}\n                         content='<p>\n                         Randomizes the priority picks for each picking round.\n                         <br>\n                         <br>\n                         Normally when placing tiles, this tool attempts to place the tiles so player 1 does not always get the best tiles. To do this, it follows the game setup rules and (in a 6 player game) player 1 gets to place tile 1 and 12, while player 6 gets to place tile 6 and 7.\n                         <br>\n                         <br>\n                         Turning this on stops this from happening, and instead completely randomizes the placement order.\n                         </p>'\n                    />\n                    <HelpModal key={\"help-reverse\"} visible={this.state.reversePlacementOrderHelp} hideModal={this.toggleReversePlacementOrderHelp} title={\"About Reverse Placement Order\"}\n                         content='<p>\n                         Reverses which tiles are placed first in placement order.\n                         <br>\n                         <br>\n                         Tiles are normally placed in priority (see randomize priority help). This reverses the order, so that the last picks are first, which generally has the effect of pushing the more valuable tiles towards the center of the galaxy.\n                         </p>'\n                    />\n            \n                    <button type=\"submit\" className=\"btn btn-primary\">Generate</button>\n                </form>\n            </div>\n        );\n    }\n}\nexport default MapOptions;","import React from 'react';\nimport $ from 'jquery';\nimport './App.css';\nimport BootstrapScripts from \"./helpers/BootstrapScripts\";\nimport MoreInfo from \"./panels/MoreInfo\";\nimport ExtraTiles from \"./panels/ExtraTiles\";\nimport MainOverview from \"./overview/MainOverview\";\nimport MainMap from \"./map/MainMap\";\nimport MapControls from \"./map/MapControls\";\nimport OptionsControls from \"./options/OptionsControls\";\nimport MapOptions from \"./options/MapOptions\";\nimport tileData from \"./data/tileData.json\";\nimport raceData from \"./data/raceData.json\";\nimport boardData from \"./data/boardData.json\";\nimport {calculateOffsets} from \"./helpers/Helpers\";\n\n/**\n * The core application page. Holds the states for common objects like tile data and player names. Responsible for\n * drawing the actual map.\n */\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            isOptionsMenuShowing: true,\n            useProphecyOfKings: false,\n            overviewVisible: true,\n            extraTilesVisible: false,\n            moreInfoVisible: false,\n            backgroundAnimated: true,\n            tiles: [...boardData.blankMap],\n            overlayVisible: false,\n            zoom: 1.0,\n            mobileBreakpoint: 700,\n            isMobileView: false,\n            currentPlayerNames: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n            currentRaces: [...raceData.races]\n        };\n    \n        this.drawMap = this.drawMap.bind(this);\n\n        this.onPopState = this.onPopState.bind(this);\n        this.checkResize = this.checkResize.bind(this);\n\n        this.updateTiles = this.updateTiles.bind(this);\n        this.updateRaces = this.updateRaces.bind(this);\n        this.validateTiles = this.validateTiles.bind(this);\n        this.toggleBackground = this.toggleBackground.bind(this);\n        this.removeTrailing = this.removeTrailing.bind(this);\n\n        this.toggleOptionsMenu = this.toggleOptionsMenu.bind(this);\n        this.toggleProphecyOfKings = this.toggleProphecyOfKings.bind(this);\n        this.toggleOverlay = this.toggleOverlay.bind(this);\n        this.toggleMoreInfo = this.toggleMoreInfo.bind(this);\n        this.toggleExtraTiles = this.toggleExtraTiles.bind(this);\n        this.copyTilesToClipboard = this.copyTilesToClipboard.bind(this);\n        this.showExtraTiles = this.showExtraTiles.bind(this);\n        this.zoomPlusClick = this.zoomPlusClick.bind(this);\n        this.zoomMinusClick = this.zoomMinusClick.bind(this);\n        \n        this.drag = this.drag.bind(this);\n        this.drop = this.drop.bind(this);\n        this.dragEnter = this.dragEnter.bind(this);\n        this.dragLeave = this.dragLeave.bind(this);\n        this.allowDrop = this.allowDrop.bind(this);\n\n    }\n    \n    /* URL CONTROLS */\n\n    /**\n     * After all elements on the html page have been created, run this.\n     */\n    componentDidMount() {\n        // Setup the main jquery selectors\n        // TODO move these or find a way to not use them\n        this.$mapContainer =  $(\"#mainContent\");\n        this.$tiMap = $(\"#map\");\n\n        // Grab the variables from the url on back/forward events\n        window.onpopstate = this.onPopState\n        this.onPopState();\n\n        // Change the map dimensions whenever the page size is different\n        window.onresize = this.checkResize\n        this.checkResize();\n    }\n\n    /**\n     * We are done with the page, removing everything.\n     */\n    componentWillUnmount() {\n        window.onpopstate = () => {};\n    }\n\n    /**\n     * When the window size is changed, update various components to be better looking on mobile vs desktop.\n     */\n    checkResize() {\n        if (window.innerWidth < this.state.mobileBreakpoint) {\n            if (!this.state.isMobileView) {\n                // Just transitioned into mobile state, so hide the options menu\n                this.setState({\n                    isMobileView: true,\n                    isOptionsMenuShowing: false,\n                })\n                document.documentElement.style.setProperty('--options-width', \"0px\");\n            } // else { // We went from mobile to mobile, don't need to do anything\n        } else {\n            // We are in desktop state\n            this.setState({\n                isMobileView: false,\n                isOptionsMenuShowing: true,\n            })\n            document.documentElement.style.setProperty('--options-width', \"400px\");\n        }\n\n        // Redraw with the new mobile conditions\n        this.drawMap()\n    }\n\n    /**\n     * Whenever we go back, grab the tiles from the url bar, and set them as the current tiles.\n     * @param {*} event The event that triggered this function.\n     */\n    onPopState(event) {\n        // Get the tiles from the url\n        let url = new URL(document.location);\n        let tiles = url.searchParams.get(\"tiles\");\n        \n        // Make sure the tiles parameter is set to something\n        const newTiles = tiles !== null ? this.validateTiles(tiles) : [];\n\n        // Update the tiles in the state, and redraw the map\n        if (newTiles !== []) {\n            this.setState({\n                tiles: newTiles,\n            }, this.drawMap );\n        }\n    };\n    \n    /* TILE CHANGING FUNCTIONS */\n\n    /**\n     * Updates the tiles state with a new set of tiles, and also pushes it to the url for sharable links\n     * @param {number[]} newTiles\n     */\n    updateTiles(newTiles) {\n        // Remove the unused tile numbers at the end of the array\n        newTiles = this.removeTrailing(newTiles);\n\n        // Add it to the url as a parameter\n        window.history.pushState({}, null, window.location.pathname + '?tiles=' + newTiles.toString());\n\n        // Hide the options menu when we are on mobile (for when the tiles update and the options menu is open)\n        let newOptionsMenuState = this.state.isOptionsMenuShowing\n        if (this.state.isMobileView) {\n            newOptionsMenuState = false;\n        }\n\n        this.setState({\n            tiles: newTiles,\n            isOptionsMenuShowing: newOptionsMenuState,\n        }, () => {\n            // Update the extra tiles menu, and draw a new map with the new tiles\n            this.showExtraTiles();\n            this.drawMap();\n        });\n    }\n\n    /**\n     * Removes any trailing -1s from a tile string.\n     * @param {number[]} tiles the tile string to clean\n     * @returns {number[]} the clean tile string\n     */\n    removeTrailing(tiles) {\n        while(tiles[tiles.length - 1] === -1){\n            tiles.pop();\n        }\n        return tiles;\n    }\n\n    /**\n     * Attempts to validate a given tile string, by cleaning it up and turning it into an object.\n     * @returns {number[]} An array of numbers representing tiles.\n     */\n    validateTiles(tiles) {\n        // Remove any spaces\n        tiles = tiles.replaceAll(\" \", \"\");\n        \n        // Check if it has opening and closing brackets. If so, remove them\n        if (tiles.charAt(0) === \"[\") {\n            tiles = tiles.substring(1, tiles.length);\n        }\n        if (tiles.charAt(tiles.length - 1) === \"]\") {\n            tiles = tiles.substring(0, tiles.length-1);\n        }\n        \n        // Now split on commas\n        tiles = tiles.split(',');\n        let newTiles = [];\n        for (let tileIndex in tiles) {\n            let parsed = Number(tiles[tileIndex]);\n            // If tile is a string (like a hyperlane), add it. Otherwise add it as a number\n            newTiles.push(isNaN(parsed) ? tiles[tileIndex] : parsed);\n        }\n        return newTiles;\n    }\n    \n    /* BUTTON ACTIONS */\n\n    /**\n     * Toggle the visibility of the options menu for both desktop and mobile clients.\n     */\n    toggleOptionsMenu() {\n        // Set the css variable for options width (for desktop only)\n        if (window.innerWidth >= this.state.mobileBreakpoint) {\n            let optionsSize = this.state.isOptionsMenuShowing ? \"0px\" : \"400px\";\n            document.documentElement.style.setProperty('--options-width', optionsSize);\n        }\n        \n        // Update the map so that it correctly uses the new width\n        this.drawMap();\n        \n        // Update the state to the new view\n        this.setState({\n            isOptionsMenuShowing: !this.state.isOptionsMenuShowing,\n        });\n    }\n\n    /**\n     * Toggle the system number overlay.\n     */\n    toggleOverlay() {\n        this.setState({\n            overlayVisible: !this.state.overlayVisible,\n        }, this.drawMap );\n    }\n\n    /**\n     * Toggle whether we need to use the prophecy of kings expansion or not\n     */\n    toggleProphecyOfKings() {\n        this.setState({\n            useProphecyOfKings: !this.state.useProphecyOfKings,\n        }, this.showExtraTiles);\n    }\n\n    /**\n     * Toggle whether the more info side panel is visible. If the extra tiles panel had just been triggered, we just\n     * need to hide the more info panel.\n     * @param {*} event The event that triggered this function.\n     * @param {boolean} justTriggeredTiles Whether or not the extra tiles panel had just been opened.\n     */\n    toggleMoreInfo(event, justTriggeredTiles) {\n        // Guarantee that justTriggeredTiles is set\n        justTriggeredTiles = justTriggeredTiles === undefined ? false : justTriggeredTiles;\n\n        let optionsSize = this.state.moreInfoVisible ? \"0px\" : \"400px\";\n        document.documentElement.style.setProperty('--more-info-width', optionsSize);\n\n        this.setState({\n            moreInfoVisible: !this.state.moreInfoVisible,\n        }, () => {\n            // Hide the extra tiles if the user just pressed the show more info button\n            if (this.state.extraTilesVisible && !justTriggeredTiles) {\n                this.toggleExtraTiles(event, true);\n            }\n        });\n    }\n\n    /**\n     * Toggle whether the extra tiles side panel is visible.\n     * @param {*} event The event that triggered this function.\n     * @param {boolean} justTriggeredInfo Whether or not the more info panel had just been opened.\n     */\n    toggleExtraTiles(event, justTriggeredInfo) {\n        justTriggeredInfo = justTriggeredInfo === undefined ? false : justTriggeredInfo;\n\n        // Update what tiles are going to be displayed\n        this.showExtraTiles();\n\n        let optionsSize = this.state.extraTilesVisible ? \"0px\" : \"250px\";\n        document.documentElement.style.setProperty('--extra-tiles-width', optionsSize);\n\n        this.setState({\n            extraTilesVisible: !this.state.extraTilesVisible,\n        }, () => {\n            if (this.state.moreInfoVisible && !justTriggeredInfo) {\n                this.toggleMoreInfo(event, true);\n            }\n        });\n    }\n\n    /**\n     * Update what tiles are visible in the extra tiles panel based on the current tiles being used on the map\n     */\n    showExtraTiles() {\n        let systemNumbers = []\n        systemNumbers = systemNumbers.concat(tileData.blue).concat(tileData.red);\n        if (this.state.useProphecyOfKings) {\n            systemNumbers = systemNumbers.concat(tileData.pokBlue).concat(tileData.pokRed);\n        }\n\n        for (let systemNumber of systemNumbers) {\n            // If it is not on the map, show the system tile. Otherwise, hide it.\n            let systemSelector = $(\"#extra-\" + systemNumber);\n            !this.state.tiles.includes(systemNumber) ? systemSelector.show() : systemSelector.hide();\n        }\n    }\n\n    /**\n     * Using writeText, copy the tiles currently being displayed to the user's clipboard.\n     */\n    copyTilesToClipboard() {\n        // Get the current tiles\n        let tileString = [...this.state.tiles];\n        tileString = this.removeTrailing(tileString);\n\n        // Remove mecatol rex\n        tileString.shift();\n\n        tileString = tileString.toString();\n        tileString = tileString.replaceAll(\"-1\", \"0\");  // Remove the -1s because it is unused\n        tileString = tileString.replaceAll(\",\", \" \");  // Remove commas from old array\n        tileString = tileString.replaceAll(\"-\", \"\");  // Remove rotation dash in hyperlanes\n\n        // Print to console in case the copy function doesnt actually work\n        console.log(\"Here is your tile string for use with this TTS Mod (https://steamcommunity.com/sharedfiles/filedetails/?id=1466689117):\");\n        console.log(tileString);\n\n        // Copy to the user's clipboard\n        navigator.clipboard.writeText(tileString);\n    }\n\n    /**\n     * Toggle the background animation, from moving stars to static, and visa versa\n     */\n    toggleBackground() {\n        if (!this.state.backgroundAnimated) {\n            $(\"#stars\").css(\"animation\", \"animateStar 50s linear infinite\");\n            $(\"#stars2\").css(\"animation\", \"animateStar 100s linear infinite\");\n            $(\"#stars3\").css(\"animation\", \"animateStar 150s linear infinite\");\n        } else {\n            $(\"#stars\").css(\"animation\", \"staticStar 50s linear infinite\");\n            $(\"#stars2\").css(\"animation\", \"staticStar 100s linear infinite\");\n            $(\"#stars3\").css(\"animation\", \"staticStar 150s linear infinite\");\n        }\n        this.setState({\n            backgroundAnimated: !this.state.backgroundAnimated,\n        });\n    }\n\n    /**\n     * Zoom the map in by a set amount, up until it is the same size as the original images. Then redraw the map.\n     */\n    zoomPlusClick() {\n        if (this.state.zoom < 3) {\n            this.setState({\n                zoom: this.state.zoom + 0.75,\n            }, this.drawMap );\n        }\n    }\n\n    /**\n     * Zoom the map out by a set amount, up until it is too small to see. Then redraw the map.\n     */\n    zoomMinusClick() {\n        if (this.state.zoom > 0.5) {\n            this.setState({\n                zoom: this.state.zoom - 0.75,\n            }, this.drawMap );\n        }\n    }\n\n    updateRaces(races) {\n        this.setState({\n            currentRaces: races,\n        });\n    }\n\n    /* MAP GENERATION */\n\n    /**\n     * The main rendering function for the map. Using the tile string, cleanly lays out a map that is centered in the\n     * map div.\n     */\n    drawMap() {\n        // Check to see if there are any tiles to render currently\n        if (this.state === undefined || this.state.tiles.length <= 0) {\n            this.setState({\n                overviewVisible: true,\n                mapVisible: false,\n                mapControlsVisible: false,\n            });\n            return;\n        } else {\n            this.setState({\n                overviewVisible: false,\n                mapVisible: true,\n                mapControlsVisible: true,\n            });\n        }\n\n        // Set the map height based on which tiles are being used\n        let mapNumberTilesHeight = 1;\n        let mapNumberTilesWidth = 1;\n        if (this.state.tiles[37] >= 0 || this.state.tiles[38] >= 0 || this.state.tiles[60] >= 0\n            || this.state.tiles[48] >= 0 || this.state.tiles[49] >= 0 || this.state.tiles[50] >= 0) {\n            mapNumberTilesHeight = 9;\n            mapNumberTilesWidth = 7;\n        } else if (this.state.tiles[19] >= 0 || this.state.tiles[20] >= 0 || this.state.tiles[36] >= 0\n            || this.state.tiles[27] >= 0 || this.state.tiles[28] >= 0 || this.state.tiles[29] >= 0) {\n            mapNumberTilesHeight = 7;\n            mapNumberTilesWidth = 5.5;\n        } else if (this.state.tiles[7] >= 0 || this.state.tiles[8] >= 0 || this.state.tiles[18] >= 0\n            || this.state.tiles[12] >= 0 || this.state.tiles[13] >= 0 || this.state.tiles[14] >= 0) {\n            mapNumberTilesHeight = 5;\n            mapNumberTilesWidth = 4;\n        } else if (this.state.tiles[1] >= 0 || this.state.tiles[2] >= 0 || this.state.tiles[6] >= 0\n            || this.state.tiles[3] >= 0 || this.state.tiles[4] >= 0 || this.state.tiles[5] >= 0) {\n            mapNumberTilesHeight = 3;\n            mapNumberTilesWidth = 2.5;\n        }\n\n        // Configuration options for magic numbers\n        let mapPadding = 0; // The amount of pad spacing to apply to the map edges\n        let mapTileWidth = 364; // The width of every tile in the static folder\n        let mapTileHeight = 317;\n\n        // Get extra information about the map\n        let mapWidth = this.$mapContainer.width() - (2 * mapPadding); // Put padding on top/bottom of map\n        let mapHeight = this.$mapContainer.height() - (2 * mapPadding); // Put padding on either side of map\n        let tileWidth = Math.floor(mapWidth / mapNumberTilesWidth)\n        let tileHeight = Math.floor(mapHeight / mapNumberTilesHeight)\n\n        // Determine which will be our constraining factor, width or height?\n        let constraintWidth = Math.min(this.state.zoom * Math.min(tileWidth, Math.floor((mapTileWidth / mapTileHeight) * tileHeight)), mapTileWidth) // Prohibit over-zooming\n        let constraintHeight = Math.floor((mapTileHeight / mapTileWidth) * constraintWidth)\n\n        // Configure the map container to be this size\n        this.$tiMap.css(\"width\", constraintWidth * mapNumberTilesWidth)\n            .css(\"height\", constraintHeight * mapNumberTilesHeight);\n\n        // Calculate the offset values for margin left and margin top per tile\n        let offsets = calculateOffsets(constraintWidth, constraintHeight)\n\n        // Loop over tiles to assign various values to them\n        let currentPlayerNumber = 0;\n        for (let tileNumber = 0; tileNumber < offsets.length; tileNumber++) {\n            let tile = $(\"#tile-\" + tileNumber);\n            let numOverlay = $(\"#number-\" + tileNumber);\n            let underlay = $(\"#underlay-\" + tileNumber);\n            if (this.state.tiles[tileNumber] >= 0 || typeof this.state.tiles[tileNumber] === \"string\") {\n                tile.attr(\"width\", constraintWidth)\n                    .attr(\"height\", constraintHeight)\n                    .css(\"margin-left\", offsets[tileNumber][0])\n                    .css(\"margin-top\", offsets[tileNumber][1])\n                    .css(\"left\", (mapNumberTilesWidth / 2) * constraintWidth)\n                    .css(\"top\", (mapNumberTilesHeight / 2) * constraintHeight)\n                    .css({'transform' : 'rotate(0)'})  // Reset any rotations from other hyperlanes\n\n                tile.show();\n\n                if (typeof this.state.tiles[tileNumber] === \"string\") {\n                    // Hyperlane, so remove the last section and check if it needs to be rotated\n                    if (this.state.tiles[tileNumber].split(\"-\")[1] !== \"0\") {\n                        let degrees = 60 * Number(this.state.tiles[tileNumber].split(\"-\")[1]);\n                        tile.css({'transform' : 'rotate(-'+ degrees +'deg)'});\n                    }\n                }\n            } else {\n                tile.hide();\n            }\n\n            numOverlay.css(\"width\", constraintWidth)\n                .css(\"height\", constraintHeight)\n                .css(\"line-height\", constraintHeight + \"px\")\n                .css(\"margin-left\", offsets[tileNumber][0])\n                .css(\"margin-top\", offsets[tileNumber][1])\n                .css(\"left\", (mapNumberTilesWidth / 2) * constraintWidth)\n                .css(\"top\", (mapNumberTilesHeight / 2) * constraintHeight)\n                .css(\"display\", \"none\")\n                // .html(tileNumber)\n\n            if (typeof this.state.tiles[tileNumber] === \"string\") {\n                numOverlay.html(this.state.tiles[tileNumber].split(\"-\")[0])\n            } else {\n                numOverlay.html(this.state.tiles[tileNumber])\n            }\n\n            underlay.css(\"width\", constraintWidth + 6)\n                .css(\"height\", constraintHeight + 6)\n                .css(\"margin-left\", offsets[tileNumber][0]-3)\n                .css(\"margin-top\", offsets[tileNumber][1]-3)\n                .css(\"left\", (mapNumberTilesWidth / 2) * constraintWidth)\n                .css(\"top\", (mapNumberTilesHeight / 2) * constraintHeight)\n\n            if (!this.state.overlayVisible) {\n                numOverlay.hide()\n            } else {\n                if (this.state.tiles[tileNumber] === 0) {\n                    // Show the player name\n                    let name = this.state.currentPlayerNames[currentPlayerNumber];\n                    numOverlay.html(name === \"\" ? \"P\" + (currentPlayerNumber + 1) : name);\n                    currentPlayerNumber += 1;\n                }\n\n                if (this.state.tiles[tileNumber] !== -1) {\n                    numOverlay.show();\n                }\n            }\n        }\n\n        // Clear any css classes on the map\n        this.$tiMap.removeClass(\"center-map\");\n        this.$tiMap.removeClass(\"center-map-vertical\");\n        this.$tiMap.removeClass(\"center-map-horizontal\");\n\n        // Check to see if we are zoomed, or map is always screen size.\n        if (this.state.zoom > 1.0) {\n            // Check to see if we should still be horizontally or vertically centered\n            if ((constraintWidth * mapNumberTilesWidth) < mapWidth) {\n                this.$tiMap.addClass(\"center-map-horizontal\");\n            } else if ((constraintHeight * mapNumberTilesHeight) < mapHeight) {\n                this.$tiMap.addClass(\"center-map-vertical\");\n            } else {\n                // Use default map values\n            }\n\n            // TODO find what the mouse is hovering nearest to, or over. Get that element, and zoom in. Something like\n            //  this? https://stackoverflow.com/questions/6519043/get-mouse-position-on-scroll\n\n            // Center Mecatol Rex on the screen\n            $(\"#tile-0\").get(0).scrollIntoView({behavior: \"smooth\", block:\"center\", inline: \"center\"});\n        } else {\n            // No need to move the map around, just center it on the screen\n            this.$tiMap.addClass(\"center-map\");\n        }\n    }\n\n    /* DRAG AND DROP FUNCTIONS, modified from https://www.w3schools.com/html/html5_draganddrop.asp */\n\n    allowDrop(ev) {\n        ev.preventDefault();\n    }\n    dragEnter(ev){\n        let targetSelector = $(\"#\" + ev.target.id);\n        let targetUnderlay = $(\"#underlay-\" + ev.target.id.split(\"-\")[1]);\n        targetSelector.addClass(\"tile-target\")\n        targetUnderlay.addClass(\"underlay-target\")\n    }\n    dragLeave(ev){\n        let targetSelector = $(\"#\" + ev.target.id);\n        let targetUnderlay = $(\"#underlay-\" + ev.target.id.split(\"-\")[1]);\n        targetSelector.removeClass(\"tile-target\")\n        targetUnderlay.removeClass(\"underlay-target\")\n    }\n    drag(ev) {\n        ev.dataTransfer.setData(\"text\", ev.target.id);\n    }\n    drop(ev) {\n        ev.preventDefault();\n        // Get the associated ids\n        let fromId = ev.dataTransfer.getData(\"text\");\n        let targetId = ev.target.id;\n        \n        let targetSelector = $(\"#\" + targetId);\n        let fromSelector = $(\"#\" + fromId);\n        let targetUnderlay = $(\"#underlay-\" + ev.target.id.split(\"-\")[1]);\n        \n        // Temporarily store the target's source, and swap\n        let targetSource = targetSelector.attr('src');\n        targetSelector.attr('src', fromSelector.attr('src'));\n        fromSelector.attr('src', targetSource);\n        \n        let targetType = targetId.split(\"-\")[0];\n        let fromType = fromId.split(\"-\")[0];\n        let targetSecond = targetId.split(\"-\")[1];\n        let fromSecond = fromId.split(\"-\")[1];\n    \n        let tilesCopy = [...this.state.tiles];\n        if (fromType === \"tile\" && targetType === \"tile\") {\n            // Both are on the main map, so simply swap their positions in the tile array\n            let temp = tilesCopy[targetSecond];\n            tilesCopy[targetSecond] = tilesCopy[fromSecond];\n            tilesCopy[fromSecond] = temp;\n        } else if (fromType === \"extra\" && targetType === \"tile\") {\n            // Moving from the extra tiles onto the main map\n            let temp = tilesCopy[targetSecond];\n            tilesCopy[targetSecond] = parseInt(fromSecond);\n            // Update the id of the tile\n            fromSelector.attr('id', 'extra-' + temp)\n        } else if (fromType === \"tile\" && targetType === \"extra\") {\n            // Moving from the main map to the tiles\n            let temp = tilesCopy[fromSecond];\n            tilesCopy[fromSecond] = parseInt(targetSecond);\n            // Update the id of the tile\n            targetSelector.attr('id', 'extra-' + temp)\n        } else {\n            // Swapping extra tiles... Just update the ids\n            targetSelector.attr('id', 'extra-' + fromSecond)\n            fromSelector.attr('id', 'extra-' + targetSecond)\n        }\n        \n        // Clear the target classes\n        targetSelector.removeClass(\"tile-target\");\n        targetUnderlay.removeClass(\"underlay-target\");\n        \n        // Update the tile string\n        this.updateTiles(tilesCopy);\n    }\n    \n\n    render() {\n        return (\n            <div>\n                <div id=\"mainContent\" className=\"justify-content-center align-items-center\">\n                    <MainOverview visible={this.state.overviewVisible}\n                    />\n                    \n                    <MainMap visible={this.state.mapVisible} overlayVisible={this.state.overlayVisible}\n                             tiles={this.state.tiles} useProphecyOfKings={this.state.useProphecyOfKings}\n\n                             drag={this.drag} drop={this.drop} dragEnter={this.dragEnter} dragLeave={this.dragLeave} allowDrop={this.allowDrop}\n                    />\n                </div>\n\n                <OptionsControls visible={this.state.isOptionsMenuShowing} isMobileView={this.state.isMobileView}\n                                 toggleOptions={this.toggleOptionsMenu}\n                />\n\n                <MapControls visible={this.state.mapControlsVisible} extraTilesVisible={this.state.extraTilesVisible}\n                             moreInfoVisible={this.state.moreInfoVisible} overlayVisible={this.state.overlayVisible}\n\n                             toggleOverlay={this.toggleOverlay} copyTilesToClipboard={this.copyTilesToClipboard}\n                             toggleMoreInfo={this.toggleMoreInfo} toggleExtraTiles={this.toggleExtraTiles}\n                             zoomPlus={this.zoomPlusClick} zoomMinus={this.zoomMinusClick}\n                             toggleBackground={this.toggleBackground}\n                />\n                \n                <ExtraTiles visible={this.state.extraTilesVisible} overlayVisible={this.state.overlayVisible}\n                            useProphecyOfKings={this.state.useProphecyOfKings}\n                            updateTiles={this.updateTiles}\n\n                            drag={this.drag} drop={this.drop} dragEnter={this.dragEnter} dragLeave={this.dragLeave} allowDrop={this.allowDrop}\n                />\n                \n                <MoreInfo visible={this.state.moreInfoVisible} currentPlayerNames={this.state.currentPlayerNames}\n                          useProphecyOfKings={this.state.useProphecyOfKings} tiles={this.state.tiles}\n                />\n                \n                <MapOptions visible={this.state.isOptionsMenuShowing} useProphecyOfKings={this.state.useProphecyOfKings}\n                            currentPlayerNames={this.state.currentPlayerNames} currentRaces={this.state.currentRaces}\n\n                            toggleProphecyOfKings={this.toggleProphecyOfKings} updateTiles={this.updateTiles}\n                            showExtraTiles={this.showExtraTiles} updateRaces={this.updateRaces}\n                />\n            \n                <BootstrapScripts />\n            </div>\n        );\n    }\n}\nexport default App;\n","/**\n * Calculate offsets of the tiles in relation to Mecatol Rex (the center tile). This information\n * is stored in an array of two value arrays. The two value arrays reperesent the margin left\n * and margin right to offset the tile (based on size of of tiles).\n * @param width The width (in pixels) of a single tile\n * @param height The height (in pixels) of a single tile\n * @returns {(number[]|(number)[])[]} an array of two value arrays.\n */\nexport const calculateOffsets = (width, height) => {\n    let leftWidth = -width\n    let topHeight = -height\n    let halfWidth = Math.ceil(leftWidth * 0.5)\n    let halfHeight = Math.ceil(topHeight * 0.5)\n    let treQuarWidth = Math.ceil(leftWidth * 0.75)\n\n    return [\n        [halfWidth, halfHeight],  // Mecatol Rex\n        // Inner ring\n        [halfWidth, halfHeight + topHeight],\n        [halfWidth - treQuarWidth, halfHeight + halfHeight],\n        [halfWidth - treQuarWidth, 0],\n        [halfWidth, halfHeight - topHeight],\n        [halfWidth + treQuarWidth, 0],\n        [halfWidth + treQuarWidth, halfHeight + halfHeight],\n        // Middle ring\n        [halfWidth, halfHeight + topHeight + topHeight],\n        [halfWidth - treQuarWidth, halfHeight + topHeight + halfHeight],\n        [halfWidth - leftWidth - halfWidth, halfHeight + topHeight],\n        [halfWidth - leftWidth - halfWidth, halfHeight],\n        [halfWidth - leftWidth - halfWidth, halfHeight - topHeight],\n        [halfWidth - treQuarWidth, halfHeight - topHeight - halfHeight],\n        [halfWidth, halfHeight - topHeight - topHeight],\n        [halfWidth + treQuarWidth, halfHeight - topHeight - halfHeight],\n        [halfWidth + leftWidth + halfWidth, halfHeight - topHeight],\n        [halfWidth + leftWidth + halfWidth, halfHeight],\n        [halfWidth + leftWidth + halfWidth, halfHeight + topHeight],\n        [halfWidth + treQuarWidth, halfHeight + topHeight + halfHeight],\n        // Outer Ring\n        [halfWidth, halfHeight + topHeight + topHeight + topHeight],\n        [halfWidth - treQuarWidth, halfHeight + topHeight + topHeight + halfHeight],\n        [halfWidth - leftWidth - halfWidth, halfHeight + topHeight + topHeight],\n        [halfWidth - treQuarWidth - leftWidth - halfWidth, halfHeight + topHeight + halfHeight],\n        [halfWidth - treQuarWidth - leftWidth - halfWidth, halfHeight + halfHeight],\n        [halfWidth - treQuarWidth - leftWidth - halfWidth, halfHeight - halfHeight],\n        [halfWidth - treQuarWidth - leftWidth - halfWidth, halfHeight - topHeight - halfHeight],\n        [halfWidth - leftWidth - halfWidth, halfHeight - topHeight - topHeight],\n        [halfWidth - treQuarWidth, halfHeight - topHeight - topHeight - halfHeight],\n        [halfWidth, halfHeight - topHeight - topHeight - topHeight],\n        [halfWidth + treQuarWidth, halfHeight - topHeight - topHeight - halfHeight],\n        [halfWidth + leftWidth + halfWidth, halfHeight - topHeight - topHeight],\n        [halfWidth + treQuarWidth + leftWidth + halfWidth, halfHeight - topHeight - halfHeight],\n        [halfWidth + treQuarWidth + leftWidth + halfWidth, halfHeight - halfHeight],\n        [halfWidth + treQuarWidth + leftWidth + halfWidth, halfHeight + halfHeight],\n        [halfWidth + treQuarWidth + leftWidth + halfWidth, halfHeight + topHeight + halfHeight],\n        [halfWidth + leftWidth + halfWidth, halfHeight + topHeight + topHeight],\n        [halfWidth + treQuarWidth, halfHeight + topHeight + topHeight + halfHeight],\n        // Extended Ring\n        [halfWidth, halfHeight + topHeight + topHeight + topHeight + topHeight],\n        [halfWidth - treQuarWidth, halfHeight + topHeight + topHeight + topHeight + halfHeight],\n        [halfWidth - leftWidth - halfWidth, halfHeight + topHeight + topHeight + topHeight],\n        [halfWidth - treQuarWidth - leftWidth - halfWidth, halfHeight + topHeight + topHeight + halfHeight],\n        [halfWidth - leftWidth - leftWidth - leftWidth, halfHeight + topHeight + topHeight],\n        [halfWidth - leftWidth - leftWidth - leftWidth, halfHeight + topHeight],\n        [halfWidth - leftWidth - leftWidth - leftWidth, halfHeight],\n        [halfWidth - leftWidth - leftWidth - leftWidth, halfHeight - topHeight],\n        [halfWidth - leftWidth - leftWidth - leftWidth, halfHeight - topHeight - topHeight],\n        [halfWidth - treQuarWidth - leftWidth - halfWidth, halfHeight - topHeight - topHeight - halfHeight],\n        [halfWidth - leftWidth - halfWidth, halfHeight - topHeight - topHeight - topHeight],\n        [halfWidth - treQuarWidth, halfHeight - topHeight - topHeight - topHeight - halfHeight],\n        [halfWidth, halfHeight - topHeight - topHeight - topHeight - topHeight],\n        [halfWidth + treQuarWidth, halfHeight - topHeight - topHeight - topHeight - halfHeight],\n        [halfWidth + leftWidth + halfWidth, halfHeight - topHeight - topHeight - topHeight],\n        [halfWidth + treQuarWidth + leftWidth + halfWidth, halfHeight - topHeight - topHeight - halfHeight],\n        [halfWidth + leftWidth + leftWidth + leftWidth, halfHeight - topHeight - topHeight],\n        [halfWidth + leftWidth + leftWidth + leftWidth, halfHeight - topHeight],\n        [halfWidth + leftWidth + leftWidth + leftWidth, halfHeight],\n        [halfWidth + leftWidth + leftWidth + leftWidth, halfHeight + topHeight],\n        [halfWidth + leftWidth + leftWidth + leftWidth, halfHeight + topHeight + topHeight],\n        [halfWidth + treQuarWidth + leftWidth + halfWidth, halfHeight + topHeight + topHeight + halfHeight],\n        [halfWidth + leftWidth + halfWidth, halfHeight + topHeight + topHeight + topHeight],\n        [halfWidth + treQuarWidth, halfHeight + topHeight + topHeight + topHeight + halfHeight],\n    ]\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}